// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod timeline {
    #[allow(dead_code)]
    pub mod event_processor {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum EventValue {
                StringValue(_rt::String),
                IntValue(i64),
                FloatValue(f64),
                BoolValue(bool),
            }
            impl ::core::fmt::Debug for EventValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        EventValue::StringValue(e) => {
                            f.debug_tuple("EventValue::StringValue").field(e).finish()
                        }
                        EventValue::IntValue(e) => {
                            f.debug_tuple("EventValue::IntValue").field(e).finish()
                        }
                        EventValue::FloatValue(e) => {
                            f.debug_tuple("EventValue::FloatValue").field(e).finish()
                        }
                        EventValue::BoolValue(e) => {
                            f.debug_tuple("EventValue::BoolValue").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct Event {
                pub time: u64,
                pub event: _rt::Vec<(_rt::String, EventValue)>,
            }
            impl ::core::fmt::Debug for Event {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Event")
                        .field("time", &self.time)
                        .field("event", &self.event)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct TimePeriod {
                pub t1: u64,
                pub t2: Option<u64>,
            }
            impl ::core::fmt::Debug for TimePeriod {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TimePeriod")
                        .field("t1", &self.t1)
                        .field("t2", &self.t2)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TimelineResultPoint {
                pub time_period: TimePeriod,
                pub value: EventValue,
            }
            impl ::core::fmt::Debug for TimelineResultPoint {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TimelineResultPoint")
                        .field("time-period", &self.time_period)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TimelineResult {
                pub results: _rt::Vec<TimelineResultPoint>,
            }
            impl ::core::fmt::Debug for TimelineResult {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TimelineResult").field("results", &self.results).finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum EventPredicateOp {
                Equal,
                GreaterThan,
                LessThan,
            }
            impl ::core::fmt::Debug for EventPredicateOp {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        EventPredicateOp::Equal => {
                            f.debug_tuple("EventPredicateOp::Equal").finish()
                        }
                        EventPredicateOp::GreaterThan => {
                            f.debug_tuple("EventPredicateOp::GreaterThan").finish()
                        }
                        EventPredicateOp::LessThan => {
                            f.debug_tuple("EventPredicateOp::LessThan").finish()
                        }
                    }
                }
            }

            impl EventPredicateOp {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> EventPredicateOp {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => EventPredicateOp::Equal,
                        1 => EventPredicateOp::GreaterThan,
                        2 => EventPredicateOp::LessThan,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct EventPredicate {
                pub col_name: _rt::String,
                pub value: EventValue,
                pub op: EventPredicateOp,
            }
            impl ::core::fmt::Debug for EventPredicate {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("EventPredicate")
                        .field("col-name", &self.col_name)
                        .field("value", &self.value)
                        .field("op", &self.op)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_latest_event_state(
                event_col_name: &str,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = event_col_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-latest-event-state"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<*mut u8>();
                                let l4 = *ptr1.add(8).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                _rt::string_lift(bytes5)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = *ptr1.add(4).cast::<*mut u8>();
                                let l7 = *ptr1.add(8).cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                _rt::string_lift(bytes8)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_tl_has_existed(
                event_predicate: &EventPredicate,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let EventPredicate { col_name: col_name0, value: value0, op: op0 } =
                        event_predicate;
                    let vec1 = col_name0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result3_0, result3_1, result3_2) = match value0 {
                        EventValue::StringValue(e) => {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();

                            (
                                0i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr2.cast_mut());
                                    t
                                },
                                len2,
                            )
                        }
                        EventValue::IntValue(e) => {
                            (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                        }
                        EventValue::FloatValue(e) => (
                            2i32,
                            ::core::mem::MaybeUninit::new((_rt::as_f64(e)).to_bits() as i64 as u64),
                            0usize,
                        ),
                        EventValue::BoolValue(e) => (
                            3i32,
                            ::core::mem::MaybeUninit::new(i64::from(match e {
                                true => 1,
                                false => 0,
                            }) as u64),
                            0usize,
                        ),
                    };
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-tl-has-existed"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr1.cast_mut(),
                        len1,
                        result3_0,
                        result3_1,
                        result3_2,
                        op0.clone() as i32,
                        ptr4,
                    );
                    let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                    match l5 {
                        0 => {
                            let e = {
                                let l6 = *ptr4.add(4).cast::<*mut u8>();
                                let l7 = *ptr4.add(8).cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                _rt::string_lift(bytes8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l9 = *ptr4.add(4).cast::<*mut u8>();
                                let l10 = *ptr4.add(8).cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                                _rt::string_lift(bytes11)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_tl_has_existed_within(
                event_predicate: &EventPredicate,
                time: u64,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let EventPredicate { col_name: col_name0, value: value0, op: op0 } =
                        event_predicate;
                    let vec1 = col_name0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result3_0, result3_1, result3_2) = match value0 {
                        EventValue::StringValue(e) => {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();

                            (
                                0i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr2.cast_mut());
                                    t
                                },
                                len2,
                            )
                        }
                        EventValue::IntValue(e) => {
                            (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                        }
                        EventValue::FloatValue(e) => (
                            2i32,
                            ::core::mem::MaybeUninit::new((_rt::as_f64(e)).to_bits() as i64 as u64),
                            0usize,
                        ),
                        EventValue::BoolValue(e) => (
                            3i32,
                            ::core::mem::MaybeUninit::new(i64::from(match e {
                                true => 1,
                                false => 0,
                            }) as u64),
                            0usize,
                        ),
                    };
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-tl-has-existed-within"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: i64,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: i64,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr1.cast_mut(),
                        len1,
                        result3_0,
                        result3_1,
                        result3_2,
                        op0.clone() as i32,
                        _rt::as_i64(&time),
                        ptr4,
                    );
                    let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                    match l5 {
                        0 => {
                            let e = {
                                let l6 = *ptr4.add(4).cast::<*mut u8>();
                                let l7 = *ptr4.add(8).cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                _rt::string_lift(bytes8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l9 = *ptr4.add(4).cast::<*mut u8>();
                                let l10 = *ptr4.add(8).cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                                _rt::string_lift(bytes11)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn add_event(event: &Event) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let Event { time: time0, event: event0 } = event;
                    let vec4 = event0;
                    let len4 = vec4.len();
                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(vec4.len() * 24, 8);
                    let result4 = if layout4.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout4);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec4.into_iter().enumerate() {
                        let base = result4.add(i * 24);
                        {
                            let (t1_0, t1_1) = e;
                            let vec2 = t1_0;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base.add(4).cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                            match t1_1 {
                                EventValue::StringValue(e) => {
                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec3 = e;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    *base.add(20).cast::<usize>() = len3;
                                    *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                EventValue::IntValue(e) => {
                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                    *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                }
                                EventValue::FloatValue(e) => {
                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                    *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                }
                                EventValue::BoolValue(e) => {
                                    *base.add(8).cast::<u8>() = (3i32) as u8;
                                    *base.add(16).cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    })
                                        as u8;
                                }
                            }
                        }
                    }
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "add-event"]
                        fn wit_import(_: i64, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(time0), result4, len4, ptr5);
                    let l6 = i32::from(*ptr5.add(0).cast::<u8>());
                    if layout4.size() != 0 {
                        _rt::alloc::dealloc(result4.cast(), layout4);
                    }
                    match l6 {
                        0 => {
                            let e = {
                                let l7 = *ptr5.add(4).cast::<*mut u8>();
                                let l8 = *ptr5.add(8).cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                _rt::string_lift(bytes9)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l10 = *ptr5.add(4).cast::<*mut u8>();
                                let l11 = *ptr5.add(8).cast::<usize>();
                                let len12 = l11;
                                let bytes12 = _rt::Vec::from_raw_parts(l10.cast(), len12, len12);

                                _rt::string_lift(bytes12)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn latest_event_to_state(t1: u64) -> Result<TimelineResult, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "latest-event-to-state"]
                        fn wit_import(_: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&t1), ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<*mut u8>();
                                let l3 = *ptr0.add(8).cast::<usize>();
                                let base15 = l2;
                                let len15 = l3;
                                let mut result15 = _rt::Vec::with_capacity(len15);
                                for i in 0..len15 {
                                    let base = base15.add(i * 40);
                                    let e15 = {
                                        let l4 = *base.add(0).cast::<i64>();
                                        let l5 = i32::from(*base.add(8).cast::<u8>());
                                        let l7 = i32::from(*base.add(24).cast::<u8>());
                                        let v14 = match l7 {
                                            0 => {
                                                let e14 = {
                                                    let l8 = *base.add(32).cast::<*mut u8>();
                                                    let l9 = *base.add(36).cast::<usize>();
                                                    let len10 = l9;
                                                    let bytes10 = _rt::Vec::from_raw_parts(
                                                        l8.cast(),
                                                        len10,
                                                        len10,
                                                    );

                                                    _rt::string_lift(bytes10)
                                                };
                                                EventValue::StringValue(e14)
                                            }
                                            1 => {
                                                let e14 = {
                                                    let l11 = *base.add(32).cast::<i64>();

                                                    l11
                                                };
                                                EventValue::IntValue(e14)
                                            }
                                            2 => {
                                                let e14 = {
                                                    let l12 = *base.add(32).cast::<f64>();

                                                    l12
                                                };
                                                EventValue::FloatValue(e14)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                let e14 = {
                                                    let l13 = i32::from(*base.add(32).cast::<u8>());

                                                    _rt::bool_lift(l13 as u8)
                                                };
                                                EventValue::BoolValue(e14)
                                            }
                                        };

                                        TimelineResultPoint {
                                            time_period: TimePeriod {
                                                t1: l4 as u64,
                                                t2: match l5 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l6 = *base.add(16).cast::<i64>();

                                                            l6 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            value: v14,
                                        }
                                    };
                                    result15.push(e15);
                                }
                                _rt::cabi_dealloc(base15, len15 * 40, 8);

                                TimelineResult { results: result15 }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l16 = *ptr0.add(4).cast::<*mut u8>();
                                let l17 = *ptr0.add(8).cast::<usize>();
                                let len18 = l17;
                                let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                _rt::string_lift(bytes18)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn tl_has_existed(t1: u64) -> Result<TimelineResult, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "tl-has-existed"]
                        fn wit_import(_: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&t1), ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<*mut u8>();
                                let l3 = *ptr0.add(8).cast::<usize>();
                                let base15 = l2;
                                let len15 = l3;
                                let mut result15 = _rt::Vec::with_capacity(len15);
                                for i in 0..len15 {
                                    let base = base15.add(i * 40);
                                    let e15 = {
                                        let l4 = *base.add(0).cast::<i64>();
                                        let l5 = i32::from(*base.add(8).cast::<u8>());
                                        let l7 = i32::from(*base.add(24).cast::<u8>());
                                        let v14 = match l7 {
                                            0 => {
                                                let e14 = {
                                                    let l8 = *base.add(32).cast::<*mut u8>();
                                                    let l9 = *base.add(36).cast::<usize>();
                                                    let len10 = l9;
                                                    let bytes10 = _rt::Vec::from_raw_parts(
                                                        l8.cast(),
                                                        len10,
                                                        len10,
                                                    );

                                                    _rt::string_lift(bytes10)
                                                };
                                                EventValue::StringValue(e14)
                                            }
                                            1 => {
                                                let e14 = {
                                                    let l11 = *base.add(32).cast::<i64>();

                                                    l11
                                                };
                                                EventValue::IntValue(e14)
                                            }
                                            2 => {
                                                let e14 = {
                                                    let l12 = *base.add(32).cast::<f64>();

                                                    l12
                                                };
                                                EventValue::FloatValue(e14)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                let e14 = {
                                                    let l13 = i32::from(*base.add(32).cast::<u8>());

                                                    _rt::bool_lift(l13 as u8)
                                                };
                                                EventValue::BoolValue(e14)
                                            }
                                        };

                                        TimelineResultPoint {
                                            time_period: TimePeriod {
                                                t1: l4 as u64,
                                                t2: match l5 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l6 = *base.add(16).cast::<i64>();

                                                            l6 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            value: v14,
                                        }
                                    };
                                    result15.push(e15);
                                }
                                _rt::cabi_dealloc(base15, len15 * 40, 8);

                                TimelineResult { results: result15 }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l16 = *ptr0.add(4).cast::<*mut u8>();
                                let l17 = *ptr0.add(8).cast::<usize>();
                                let len18 = l17;
                                let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                _rt::string_lift(bytes18)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn tl_has_existed_within(t1: u64) -> Result<TimelineResult, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "tl-has-existed-within"]
                        fn wit_import(_: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&t1), ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<*mut u8>();
                                let l3 = *ptr0.add(8).cast::<usize>();
                                let base15 = l2;
                                let len15 = l3;
                                let mut result15 = _rt::Vec::with_capacity(len15);
                                for i in 0..len15 {
                                    let base = base15.add(i * 40);
                                    let e15 = {
                                        let l4 = *base.add(0).cast::<i64>();
                                        let l5 = i32::from(*base.add(8).cast::<u8>());
                                        let l7 = i32::from(*base.add(24).cast::<u8>());
                                        let v14 = match l7 {
                                            0 => {
                                                let e14 = {
                                                    let l8 = *base.add(32).cast::<*mut u8>();
                                                    let l9 = *base.add(36).cast::<usize>();
                                                    let len10 = l9;
                                                    let bytes10 = _rt::Vec::from_raw_parts(
                                                        l8.cast(),
                                                        len10,
                                                        len10,
                                                    );

                                                    _rt::string_lift(bytes10)
                                                };
                                                EventValue::StringValue(e14)
                                            }
                                            1 => {
                                                let e14 = {
                                                    let l11 = *base.add(32).cast::<i64>();

                                                    l11
                                                };
                                                EventValue::IntValue(e14)
                                            }
                                            2 => {
                                                let e14 = {
                                                    let l12 = *base.add(32).cast::<f64>();

                                                    l12
                                                };
                                                EventValue::FloatValue(e14)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                let e14 = {
                                                    let l13 = i32::from(*base.add(32).cast::<u8>());

                                                    _rt::bool_lift(l13 as u8)
                                                };
                                                EventValue::BoolValue(e14)
                                            }
                                        };

                                        TimelineResultPoint {
                                            time_period: TimePeriod {
                                                t1: l4 as u64,
                                                t2: match l5 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l6 = *base.add(16).cast::<i64>();

                                                            l6 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            value: v14,
                                        }
                                    };
                                    result15.push(e15);
                                }
                                _rt::cabi_dealloc(base15, len15 * 40, 8);

                                TimelineResult { results: result15 }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l16 = *ptr0.add(4).cast::<*mut u8>();
                                let l17 = *ptr0.add(8).cast::<usize>();
                                let len18 = l17;
                                let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                _rt::string_lift(bytes18)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod timeline {
        #[allow(dead_code)]
        pub mod timeline_processor {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type EventValue =
                    super::super::super::super::timeline::event_processor::api::EventValue;
                pub type TimelineResult =
                    super::super::super::super::timeline::event_processor::api::TimelineResult;
                #[derive(Clone)]
                pub struct TimelineResultWorker {
                    pub worker_id: _rt::String,
                    pub template_id: _rt::String,
                }
                impl ::core::fmt::Debug for TimelineResultWorker {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("TimelineResultWorker")
                            .field("worker-id", &self.worker_id)
                            .field("template-id", &self.template_id)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum LeafTimelineNode {
                    TlHasExisted(TimelineResultWorker),
                    TlHasExistedWithin(TimelineResultWorker),
                    TlLatestEventToState(TimelineResultWorker),
                }
                impl ::core::fmt::Debug for LeafTimelineNode {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            LeafTimelineNode::TlHasExisted(e) => {
                                f.debug_tuple("LeafTimelineNode::TlHasExisted").field(e).finish()
                            }
                            LeafTimelineNode::TlHasExistedWithin(e) => f
                                .debug_tuple("LeafTimelineNode::TlHasExistedWithin")
                                .field(e)
                                .finish(),
                            LeafTimelineNode::TlLatestEventToState(e) => f
                                .debug_tuple("LeafTimelineNode::TlLatestEventToState")
                                .field(e)
                                .finish(),
                        }
                    }
                }
                #[derive(Clone)]
                pub enum DerivedTimelineNode {
                    EqualTo(TimelineResultWorker),
                    GreaterThan(TimelineResultWorker),
                    GreaterThanOrEqualTo(TimelineResultWorker),
                    LessThan(TimelineResultWorker),
                    LessThanOrEqualTo(TimelineResultWorker),
                    And(TimelineResultWorker),
                    Or(TimelineResultWorker),
                    Not(TimelineResultWorker),
                }
                impl ::core::fmt::Debug for DerivedTimelineNode {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            DerivedTimelineNode::EqualTo(e) => {
                                f.debug_tuple("DerivedTimelineNode::EqualTo").field(e).finish()
                            }
                            DerivedTimelineNode::GreaterThan(e) => {
                                f.debug_tuple("DerivedTimelineNode::GreaterThan").field(e).finish()
                            }
                            DerivedTimelineNode::GreaterThanOrEqualTo(e) => f
                                .debug_tuple("DerivedTimelineNode::GreaterThanOrEqualTo")
                                .field(e)
                                .finish(),
                            DerivedTimelineNode::LessThan(e) => {
                                f.debug_tuple("DerivedTimelineNode::LessThan").field(e).finish()
                            }
                            DerivedTimelineNode::LessThanOrEqualTo(e) => f
                                .debug_tuple("DerivedTimelineNode::LessThanOrEqualTo")
                                .field(e)
                                .finish(),
                            DerivedTimelineNode::And(e) => {
                                f.debug_tuple("DerivedTimelineNode::And").field(e).finish()
                            }
                            DerivedTimelineNode::Or(e) => {
                                f.debug_tuple("DerivedTimelineNode::Or").field(e).finish()
                            }
                            DerivedTimelineNode::Not(e) => {
                                f.debug_tuple("DerivedTimelineNode::Not").field(e).finish()
                            }
                        }
                    }
                }
                #[derive(Clone)]
                pub enum TypedTimelineResultWorker {
                    LeafTimeline(LeafTimelineNode),
                    DerivedTimeline(DerivedTimelineNode),
                }
                impl ::core::fmt::Debug for TypedTimelineResultWorker {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            TypedTimelineResultWorker::LeafTimeline(e) => f
                                .debug_tuple("TypedTimelineResultWorker::LeafTimeline")
                                .field(e)
                                .finish(),
                            TypedTimelineResultWorker::DerivedTimeline(e) => f
                                .debug_tuple("TypedTimelineResultWorker::DerivedTimeline")
                                .field(e)
                                .finish(),
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_equal_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: ::core::mem::MaybeUninit<u64>,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v24 = match arg0 {
                        0 => {
                            let e24 = {
                                let v6 = match arg1 {
                                    0 => {
                                        let e6 = {
                                            let len0 = arg3;
                                            let bytes0 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                                            let len1 = arg5;
                                            let bytes1 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes0),
                                                template_id: _rt::string_lift(bytes1),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e6)
                                    }
                                    1 => {
                                        let e6 = {
                                            let len2 = arg3;
                                            let bytes2 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len2, len2);
                                            let len3 = arg5;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len3, len3);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes2),
                                                template_id: _rt::string_lift(bytes3),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e6 = {
                                            let len4 = arg3;
                                            let bytes4 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len4, len4);
                                            let len5 = arg5;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes4),
                                                template_id: _rt::string_lift(bytes5),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e6)
                                    }
                                };

                                v6
                            };
                            TypedTimelineResultWorker::LeafTimeline(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let v23 = match arg1 {
                                    0 => {
                                        let e23 = {
                                            let len7 = arg3;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len7, len7);
                                            let len8 = arg5;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len8, len8);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes7),
                                                template_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e23)
                                    }
                                    1 => {
                                        let e23 = {
                                            let len9 = arg3;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len9, len9);
                                            let len10 = arg5;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len10, len10);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes9),
                                                template_id: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e23)
                                    }
                                    2 => {
                                        let e23 = {
                                            let len11 = arg3;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len11, len11);
                                            let len12 = arg5;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len12, len12);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes11),
                                                template_id: _rt::string_lift(bytes12),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e23)
                                    }
                                    3 => {
                                        let e23 = {
                                            let len13 = arg3;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                                            let len14 = arg5;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len14, len14);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes13),
                                                template_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e23)
                                    }
                                    4 => {
                                        let e23 = {
                                            let len15 = arg3;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len15, len15);
                                            let len16 = arg5;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len16, len16);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes15),
                                                template_id: _rt::string_lift(bytes16),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e23)
                                    }
                                    5 => {
                                        let e23 = {
                                            let len17 = arg3;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len17, len17);
                                            let len18 = arg5;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len18, len18);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes17),
                                                template_id: _rt::string_lift(bytes18),
                                            }
                                        };
                                        DerivedTimelineNode::And(e23)
                                    }
                                    6 => {
                                        let e23 = {
                                            let len19 = arg3;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len19, len19);
                                            let len20 = arg5;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len20, len20);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes19),
                                                template_id: _rt::string_lift(bytes20),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e23 = {
                                            let len21 = arg3;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len21, len21);
                                            let len22 = arg5;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len22, len22);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes21),
                                                template_id: _rt::string_lift(bytes22),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e23)
                                    }
                                };

                                v23
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e24)
                        }
                    };
                    use super::super::super::super::timeline::event_processor::api::EventValue as V26;
                    let v26 = match arg6 {
                        0 => {
                            let e26 = {
                                let len25 = arg8;
                                let bytes25 = _rt::Vec::from_raw_parts(
                                    arg7.as_ptr().cast::<*mut u8>().read().cast(),
                                    len25,
                                    len25,
                                );

                                _rt::string_lift(bytes25)
                            };
                            V26::StringValue(e26)
                        }
                        1 => {
                            let e26 = arg7.assume_init() as i64;
                            V26::IntValue(e26)
                        }
                        2 => {
                            let e26 = f64::from_bits(arg7.assume_init() as i64 as u64);
                            V26::FloatValue(e26)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e26 = _rt::bool_lift(arg7.assume_init() as i64 as i32 as u8);
                            V26::BoolValue(e26)
                        }
                    };
                    let result27 = T::initialize_equal(v24, v26);
                    let ptr28 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result27 {
                        Ok(e) => {
                            *ptr28.add(0).cast::<u8>() = (0i32) as u8;
                            let vec29 = (e.into_bytes()).into_boxed_slice();
                            let ptr29 = vec29.as_ptr().cast::<u8>();
                            let len29 = vec29.len();
                            ::core::mem::forget(vec29);
                            *ptr28.add(8).cast::<usize>() = len29;
                            *ptr28.add(4).cast::<*mut u8>() = ptr29.cast_mut();
                        }
                        Err(e) => {
                            *ptr28.add(0).cast::<u8>() = (1i32) as u8;
                            let vec30 = (e.into_bytes()).into_boxed_slice();
                            let ptr30 = vec30.as_ptr().cast::<u8>();
                            let len30 = vec30.len();
                            ::core::mem::forget(vec30);
                            *ptr28.add(8).cast::<usize>() = len30;
                            *ptr28.add(4).cast::<*mut u8>() = ptr30.cast_mut();
                        }
                    };
                    ptr28
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_equal<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_greater_than_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: ::core::mem::MaybeUninit<u64>,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v24 = match arg0 {
                        0 => {
                            let e24 = {
                                let v6 = match arg1 {
                                    0 => {
                                        let e6 = {
                                            let len0 = arg3;
                                            let bytes0 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                                            let len1 = arg5;
                                            let bytes1 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes0),
                                                template_id: _rt::string_lift(bytes1),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e6)
                                    }
                                    1 => {
                                        let e6 = {
                                            let len2 = arg3;
                                            let bytes2 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len2, len2);
                                            let len3 = arg5;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len3, len3);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes2),
                                                template_id: _rt::string_lift(bytes3),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e6 = {
                                            let len4 = arg3;
                                            let bytes4 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len4, len4);
                                            let len5 = arg5;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes4),
                                                template_id: _rt::string_lift(bytes5),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e6)
                                    }
                                };

                                v6
                            };
                            TypedTimelineResultWorker::LeafTimeline(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let v23 = match arg1 {
                                    0 => {
                                        let e23 = {
                                            let len7 = arg3;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len7, len7);
                                            let len8 = arg5;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len8, len8);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes7),
                                                template_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e23)
                                    }
                                    1 => {
                                        let e23 = {
                                            let len9 = arg3;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len9, len9);
                                            let len10 = arg5;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len10, len10);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes9),
                                                template_id: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e23)
                                    }
                                    2 => {
                                        let e23 = {
                                            let len11 = arg3;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len11, len11);
                                            let len12 = arg5;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len12, len12);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes11),
                                                template_id: _rt::string_lift(bytes12),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e23)
                                    }
                                    3 => {
                                        let e23 = {
                                            let len13 = arg3;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                                            let len14 = arg5;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len14, len14);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes13),
                                                template_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e23)
                                    }
                                    4 => {
                                        let e23 = {
                                            let len15 = arg3;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len15, len15);
                                            let len16 = arg5;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len16, len16);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes15),
                                                template_id: _rt::string_lift(bytes16),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e23)
                                    }
                                    5 => {
                                        let e23 = {
                                            let len17 = arg3;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len17, len17);
                                            let len18 = arg5;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len18, len18);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes17),
                                                template_id: _rt::string_lift(bytes18),
                                            }
                                        };
                                        DerivedTimelineNode::And(e23)
                                    }
                                    6 => {
                                        let e23 = {
                                            let len19 = arg3;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len19, len19);
                                            let len20 = arg5;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len20, len20);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes19),
                                                template_id: _rt::string_lift(bytes20),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e23 = {
                                            let len21 = arg3;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len21, len21);
                                            let len22 = arg5;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len22, len22);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes21),
                                                template_id: _rt::string_lift(bytes22),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e23)
                                    }
                                };

                                v23
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e24)
                        }
                    };
                    use super::super::super::super::timeline::event_processor::api::EventValue as V26;
                    let v26 = match arg6 {
                        0 => {
                            let e26 = {
                                let len25 = arg8;
                                let bytes25 = _rt::Vec::from_raw_parts(
                                    arg7.as_ptr().cast::<*mut u8>().read().cast(),
                                    len25,
                                    len25,
                                );

                                _rt::string_lift(bytes25)
                            };
                            V26::StringValue(e26)
                        }
                        1 => {
                            let e26 = arg7.assume_init() as i64;
                            V26::IntValue(e26)
                        }
                        2 => {
                            let e26 = f64::from_bits(arg7.assume_init() as i64 as u64);
                            V26::FloatValue(e26)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e26 = _rt::bool_lift(arg7.assume_init() as i64 as i32 as u8);
                            V26::BoolValue(e26)
                        }
                    };
                    let result27 = T::initialize_greater_than(v24, v26);
                    let ptr28 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result27 {
                        Ok(e) => {
                            *ptr28.add(0).cast::<u8>() = (0i32) as u8;
                            let vec29 = (e.into_bytes()).into_boxed_slice();
                            let ptr29 = vec29.as_ptr().cast::<u8>();
                            let len29 = vec29.len();
                            ::core::mem::forget(vec29);
                            *ptr28.add(8).cast::<usize>() = len29;
                            *ptr28.add(4).cast::<*mut u8>() = ptr29.cast_mut();
                        }
                        Err(e) => {
                            *ptr28.add(0).cast::<u8>() = (1i32) as u8;
                            let vec30 = (e.into_bytes()).into_boxed_slice();
                            let ptr30 = vec30.as_ptr().cast::<u8>();
                            let len30 = vec30.len();
                            ::core::mem::forget(vec30);
                            *ptr28.add(8).cast::<usize>() = len30;
                            *ptr28.add(4).cast::<*mut u8>() = ptr30.cast_mut();
                        }
                    };
                    ptr28
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_greater_than<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_greater_than_or_equal_to_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: ::core::mem::MaybeUninit<u64>,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v24 = match arg0 {
                        0 => {
                            let e24 = {
                                let v6 = match arg1 {
                                    0 => {
                                        let e6 = {
                                            let len0 = arg3;
                                            let bytes0 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                                            let len1 = arg5;
                                            let bytes1 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes0),
                                                template_id: _rt::string_lift(bytes1),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e6)
                                    }
                                    1 => {
                                        let e6 = {
                                            let len2 = arg3;
                                            let bytes2 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len2, len2);
                                            let len3 = arg5;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len3, len3);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes2),
                                                template_id: _rt::string_lift(bytes3),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e6 = {
                                            let len4 = arg3;
                                            let bytes4 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len4, len4);
                                            let len5 = arg5;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes4),
                                                template_id: _rt::string_lift(bytes5),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e6)
                                    }
                                };

                                v6
                            };
                            TypedTimelineResultWorker::LeafTimeline(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let v23 = match arg1 {
                                    0 => {
                                        let e23 = {
                                            let len7 = arg3;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len7, len7);
                                            let len8 = arg5;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len8, len8);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes7),
                                                template_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e23)
                                    }
                                    1 => {
                                        let e23 = {
                                            let len9 = arg3;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len9, len9);
                                            let len10 = arg5;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len10, len10);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes9),
                                                template_id: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e23)
                                    }
                                    2 => {
                                        let e23 = {
                                            let len11 = arg3;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len11, len11);
                                            let len12 = arg5;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len12, len12);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes11),
                                                template_id: _rt::string_lift(bytes12),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e23)
                                    }
                                    3 => {
                                        let e23 = {
                                            let len13 = arg3;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                                            let len14 = arg5;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len14, len14);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes13),
                                                template_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e23)
                                    }
                                    4 => {
                                        let e23 = {
                                            let len15 = arg3;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len15, len15);
                                            let len16 = arg5;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len16, len16);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes15),
                                                template_id: _rt::string_lift(bytes16),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e23)
                                    }
                                    5 => {
                                        let e23 = {
                                            let len17 = arg3;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len17, len17);
                                            let len18 = arg5;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len18, len18);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes17),
                                                template_id: _rt::string_lift(bytes18),
                                            }
                                        };
                                        DerivedTimelineNode::And(e23)
                                    }
                                    6 => {
                                        let e23 = {
                                            let len19 = arg3;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len19, len19);
                                            let len20 = arg5;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len20, len20);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes19),
                                                template_id: _rt::string_lift(bytes20),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e23 = {
                                            let len21 = arg3;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len21, len21);
                                            let len22 = arg5;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len22, len22);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes21),
                                                template_id: _rt::string_lift(bytes22),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e23)
                                    }
                                };

                                v23
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e24)
                        }
                    };
                    use super::super::super::super::timeline::event_processor::api::EventValue as V26;
                    let v26 = match arg6 {
                        0 => {
                            let e26 = {
                                let len25 = arg8;
                                let bytes25 = _rt::Vec::from_raw_parts(
                                    arg7.as_ptr().cast::<*mut u8>().read().cast(),
                                    len25,
                                    len25,
                                );

                                _rt::string_lift(bytes25)
                            };
                            V26::StringValue(e26)
                        }
                        1 => {
                            let e26 = arg7.assume_init() as i64;
                            V26::IntValue(e26)
                        }
                        2 => {
                            let e26 = f64::from_bits(arg7.assume_init() as i64 as u64);
                            V26::FloatValue(e26)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e26 = _rt::bool_lift(arg7.assume_init() as i64 as i32 as u8);
                            V26::BoolValue(e26)
                        }
                    };
                    let result27 = T::initialize_greater_than_or_equal_to(v24, v26);
                    let ptr28 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result27 {
                        Ok(e) => {
                            *ptr28.add(0).cast::<u8>() = (0i32) as u8;
                            let vec29 = (e.into_bytes()).into_boxed_slice();
                            let ptr29 = vec29.as_ptr().cast::<u8>();
                            let len29 = vec29.len();
                            ::core::mem::forget(vec29);
                            *ptr28.add(8).cast::<usize>() = len29;
                            *ptr28.add(4).cast::<*mut u8>() = ptr29.cast_mut();
                        }
                        Err(e) => {
                            *ptr28.add(0).cast::<u8>() = (1i32) as u8;
                            let vec30 = (e.into_bytes()).into_boxed_slice();
                            let ptr30 = vec30.as_ptr().cast::<u8>();
                            let len30 = vec30.len();
                            ::core::mem::forget(vec30);
                            *ptr28.add(8).cast::<usize>() = len30;
                            *ptr28.add(4).cast::<*mut u8>() = ptr30.cast_mut();
                        }
                    };
                    ptr28
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_greater_than_or_equal_to<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_less_than_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: ::core::mem::MaybeUninit<u64>,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v24 = match arg0 {
                        0 => {
                            let e24 = {
                                let v6 = match arg1 {
                                    0 => {
                                        let e6 = {
                                            let len0 = arg3;
                                            let bytes0 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                                            let len1 = arg5;
                                            let bytes1 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes0),
                                                template_id: _rt::string_lift(bytes1),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e6)
                                    }
                                    1 => {
                                        let e6 = {
                                            let len2 = arg3;
                                            let bytes2 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len2, len2);
                                            let len3 = arg5;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len3, len3);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes2),
                                                template_id: _rt::string_lift(bytes3),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e6 = {
                                            let len4 = arg3;
                                            let bytes4 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len4, len4);
                                            let len5 = arg5;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes4),
                                                template_id: _rt::string_lift(bytes5),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e6)
                                    }
                                };

                                v6
                            };
                            TypedTimelineResultWorker::LeafTimeline(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let v23 = match arg1 {
                                    0 => {
                                        let e23 = {
                                            let len7 = arg3;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len7, len7);
                                            let len8 = arg5;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len8, len8);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes7),
                                                template_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e23)
                                    }
                                    1 => {
                                        let e23 = {
                                            let len9 = arg3;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len9, len9);
                                            let len10 = arg5;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len10, len10);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes9),
                                                template_id: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e23)
                                    }
                                    2 => {
                                        let e23 = {
                                            let len11 = arg3;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len11, len11);
                                            let len12 = arg5;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len12, len12);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes11),
                                                template_id: _rt::string_lift(bytes12),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e23)
                                    }
                                    3 => {
                                        let e23 = {
                                            let len13 = arg3;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                                            let len14 = arg5;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len14, len14);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes13),
                                                template_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e23)
                                    }
                                    4 => {
                                        let e23 = {
                                            let len15 = arg3;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len15, len15);
                                            let len16 = arg5;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len16, len16);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes15),
                                                template_id: _rt::string_lift(bytes16),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e23)
                                    }
                                    5 => {
                                        let e23 = {
                                            let len17 = arg3;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len17, len17);
                                            let len18 = arg5;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len18, len18);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes17),
                                                template_id: _rt::string_lift(bytes18),
                                            }
                                        };
                                        DerivedTimelineNode::And(e23)
                                    }
                                    6 => {
                                        let e23 = {
                                            let len19 = arg3;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len19, len19);
                                            let len20 = arg5;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len20, len20);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes19),
                                                template_id: _rt::string_lift(bytes20),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e23 = {
                                            let len21 = arg3;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len21, len21);
                                            let len22 = arg5;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len22, len22);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes21),
                                                template_id: _rt::string_lift(bytes22),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e23)
                                    }
                                };

                                v23
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e24)
                        }
                    };
                    use super::super::super::super::timeline::event_processor::api::EventValue as V26;
                    let v26 = match arg6 {
                        0 => {
                            let e26 = {
                                let len25 = arg8;
                                let bytes25 = _rt::Vec::from_raw_parts(
                                    arg7.as_ptr().cast::<*mut u8>().read().cast(),
                                    len25,
                                    len25,
                                );

                                _rt::string_lift(bytes25)
                            };
                            V26::StringValue(e26)
                        }
                        1 => {
                            let e26 = arg7.assume_init() as i64;
                            V26::IntValue(e26)
                        }
                        2 => {
                            let e26 = f64::from_bits(arg7.assume_init() as i64 as u64);
                            V26::FloatValue(e26)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e26 = _rt::bool_lift(arg7.assume_init() as i64 as i32 as u8);
                            V26::BoolValue(e26)
                        }
                    };
                    let result27 = T::initialize_less_than(v24, v26);
                    let ptr28 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result27 {
                        Ok(e) => {
                            *ptr28.add(0).cast::<u8>() = (0i32) as u8;
                            let vec29 = (e.into_bytes()).into_boxed_slice();
                            let ptr29 = vec29.as_ptr().cast::<u8>();
                            let len29 = vec29.len();
                            ::core::mem::forget(vec29);
                            *ptr28.add(8).cast::<usize>() = len29;
                            *ptr28.add(4).cast::<*mut u8>() = ptr29.cast_mut();
                        }
                        Err(e) => {
                            *ptr28.add(0).cast::<u8>() = (1i32) as u8;
                            let vec30 = (e.into_bytes()).into_boxed_slice();
                            let ptr30 = vec30.as_ptr().cast::<u8>();
                            let len30 = vec30.len();
                            ::core::mem::forget(vec30);
                            *ptr28.add(8).cast::<usize>() = len30;
                            *ptr28.add(4).cast::<*mut u8>() = ptr30.cast_mut();
                        }
                    };
                    ptr28
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_less_than<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_less_than_or_equal_to_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: ::core::mem::MaybeUninit<u64>,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v24 = match arg0 {
                        0 => {
                            let e24 = {
                                let v6 = match arg1 {
                                    0 => {
                                        let e6 = {
                                            let len0 = arg3;
                                            let bytes0 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                                            let len1 = arg5;
                                            let bytes1 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes0),
                                                template_id: _rt::string_lift(bytes1),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e6)
                                    }
                                    1 => {
                                        let e6 = {
                                            let len2 = arg3;
                                            let bytes2 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len2, len2);
                                            let len3 = arg5;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len3, len3);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes2),
                                                template_id: _rt::string_lift(bytes3),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e6 = {
                                            let len4 = arg3;
                                            let bytes4 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len4, len4);
                                            let len5 = arg5;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes4),
                                                template_id: _rt::string_lift(bytes5),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e6)
                                    }
                                };

                                v6
                            };
                            TypedTimelineResultWorker::LeafTimeline(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let v23 = match arg1 {
                                    0 => {
                                        let e23 = {
                                            let len7 = arg3;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len7, len7);
                                            let len8 = arg5;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len8, len8);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes7),
                                                template_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e23)
                                    }
                                    1 => {
                                        let e23 = {
                                            let len9 = arg3;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len9, len9);
                                            let len10 = arg5;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len10, len10);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes9),
                                                template_id: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e23)
                                    }
                                    2 => {
                                        let e23 = {
                                            let len11 = arg3;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len11, len11);
                                            let len12 = arg5;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len12, len12);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes11),
                                                template_id: _rt::string_lift(bytes12),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e23)
                                    }
                                    3 => {
                                        let e23 = {
                                            let len13 = arg3;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                                            let len14 = arg5;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len14, len14);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes13),
                                                template_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e23)
                                    }
                                    4 => {
                                        let e23 = {
                                            let len15 = arg3;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len15, len15);
                                            let len16 = arg5;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len16, len16);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes15),
                                                template_id: _rt::string_lift(bytes16),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e23)
                                    }
                                    5 => {
                                        let e23 = {
                                            let len17 = arg3;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len17, len17);
                                            let len18 = arg5;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len18, len18);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes17),
                                                template_id: _rt::string_lift(bytes18),
                                            }
                                        };
                                        DerivedTimelineNode::And(e23)
                                    }
                                    6 => {
                                        let e23 = {
                                            let len19 = arg3;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len19, len19);
                                            let len20 = arg5;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len20, len20);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes19),
                                                template_id: _rt::string_lift(bytes20),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e23 = {
                                            let len21 = arg3;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len21, len21);
                                            let len22 = arg5;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len22, len22);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes21),
                                                template_id: _rt::string_lift(bytes22),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e23)
                                    }
                                };

                                v23
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e24)
                        }
                    };
                    use super::super::super::super::timeline::event_processor::api::EventValue as V26;
                    let v26 = match arg6 {
                        0 => {
                            let e26 = {
                                let len25 = arg8;
                                let bytes25 = _rt::Vec::from_raw_parts(
                                    arg7.as_ptr().cast::<*mut u8>().read().cast(),
                                    len25,
                                    len25,
                                );

                                _rt::string_lift(bytes25)
                            };
                            V26::StringValue(e26)
                        }
                        1 => {
                            let e26 = arg7.assume_init() as i64;
                            V26::IntValue(e26)
                        }
                        2 => {
                            let e26 = f64::from_bits(arg7.assume_init() as i64 as u64);
                            V26::FloatValue(e26)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e26 = _rt::bool_lift(arg7.assume_init() as i64 as i32 as u8);
                            V26::BoolValue(e26)
                        }
                    };
                    let result27 = T::initialize_less_than_or_equal_to(v24, v26);
                    let ptr28 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result27 {
                        Ok(e) => {
                            *ptr28.add(0).cast::<u8>() = (0i32) as u8;
                            let vec29 = (e.into_bytes()).into_boxed_slice();
                            let ptr29 = vec29.as_ptr().cast::<u8>();
                            let len29 = vec29.len();
                            ::core::mem::forget(vec29);
                            *ptr28.add(8).cast::<usize>() = len29;
                            *ptr28.add(4).cast::<*mut u8>() = ptr29.cast_mut();
                        }
                        Err(e) => {
                            *ptr28.add(0).cast::<u8>() = (1i32) as u8;
                            let vec30 = (e.into_bytes()).into_boxed_slice();
                            let ptr30 = vec30.as_ptr().cast::<u8>();
                            let len30 = vec30.len();
                            ::core::mem::forget(vec30);
                            *ptr28.add(8).cast::<usize>() = len30;
                            *ptr28.add(4).cast::<*mut u8>() = ptr30.cast_mut();
                        }
                    };
                    ptr28
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_less_than_or_equal_to<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_and_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: i32,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: *mut u8,
                    arg11: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v24 = match arg0 {
                        0 => {
                            let e24 = {
                                let v6 = match arg1 {
                                    0 => {
                                        let e6 = {
                                            let len0 = arg3;
                                            let bytes0 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                                            let len1 = arg5;
                                            let bytes1 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes0),
                                                template_id: _rt::string_lift(bytes1),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e6)
                                    }
                                    1 => {
                                        let e6 = {
                                            let len2 = arg3;
                                            let bytes2 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len2, len2);
                                            let len3 = arg5;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len3, len3);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes2),
                                                template_id: _rt::string_lift(bytes3),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e6 = {
                                            let len4 = arg3;
                                            let bytes4 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len4, len4);
                                            let len5 = arg5;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes4),
                                                template_id: _rt::string_lift(bytes5),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e6)
                                    }
                                };

                                v6
                            };
                            TypedTimelineResultWorker::LeafTimeline(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let v23 = match arg1 {
                                    0 => {
                                        let e23 = {
                                            let len7 = arg3;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len7, len7);
                                            let len8 = arg5;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len8, len8);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes7),
                                                template_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e23)
                                    }
                                    1 => {
                                        let e23 = {
                                            let len9 = arg3;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len9, len9);
                                            let len10 = arg5;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len10, len10);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes9),
                                                template_id: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e23)
                                    }
                                    2 => {
                                        let e23 = {
                                            let len11 = arg3;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len11, len11);
                                            let len12 = arg5;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len12, len12);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes11),
                                                template_id: _rt::string_lift(bytes12),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e23)
                                    }
                                    3 => {
                                        let e23 = {
                                            let len13 = arg3;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                                            let len14 = arg5;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len14, len14);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes13),
                                                template_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e23)
                                    }
                                    4 => {
                                        let e23 = {
                                            let len15 = arg3;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len15, len15);
                                            let len16 = arg5;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len16, len16);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes15),
                                                template_id: _rt::string_lift(bytes16),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e23)
                                    }
                                    5 => {
                                        let e23 = {
                                            let len17 = arg3;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len17, len17);
                                            let len18 = arg5;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len18, len18);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes17),
                                                template_id: _rt::string_lift(bytes18),
                                            }
                                        };
                                        DerivedTimelineNode::And(e23)
                                    }
                                    6 => {
                                        let e23 = {
                                            let len19 = arg3;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len19, len19);
                                            let len20 = arg5;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len20, len20);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes19),
                                                template_id: _rt::string_lift(bytes20),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e23 = {
                                            let len21 = arg3;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len21, len21);
                                            let len22 = arg5;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len22, len22);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes21),
                                                template_id: _rt::string_lift(bytes22),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e23)
                                    }
                                };

                                v23
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e24)
                        }
                    };
                    let v49 = match arg6 {
                        0 => {
                            let e49 = {
                                let v31 = match arg7 {
                                    0 => {
                                        let e31 = {
                                            let len25 = arg9;
                                            let bytes25 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len25, len25);
                                            let len26 = arg11;
                                            let bytes26 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len26,
                                                len26,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes25),
                                                template_id: _rt::string_lift(bytes26),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e31)
                                    }
                                    1 => {
                                        let e31 = {
                                            let len27 = arg9;
                                            let bytes27 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len27, len27);
                                            let len28 = arg11;
                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len28,
                                                len28,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes27),
                                                template_id: _rt::string_lift(bytes28),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e31)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e31 = {
                                            let len29 = arg9;
                                            let bytes29 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len29, len29);
                                            let len30 = arg11;
                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len30,
                                                len30,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes29),
                                                template_id: _rt::string_lift(bytes30),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e31)
                                    }
                                };

                                v31
                            };
                            TypedTimelineResultWorker::LeafTimeline(e49)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e49 = {
                                let v48 = match arg7 {
                                    0 => {
                                        let e48 = {
                                            let len32 = arg9;
                                            let bytes32 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len32, len32);
                                            let len33 = arg11;
                                            let bytes33 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len33,
                                                len33,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes32),
                                                template_id: _rt::string_lift(bytes33),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e48)
                                    }
                                    1 => {
                                        let e48 = {
                                            let len34 = arg9;
                                            let bytes34 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len34, len34);
                                            let len35 = arg11;
                                            let bytes35 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len35,
                                                len35,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes34),
                                                template_id: _rt::string_lift(bytes35),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e48)
                                    }
                                    2 => {
                                        let e48 = {
                                            let len36 = arg9;
                                            let bytes36 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len36, len36);
                                            let len37 = arg11;
                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len37,
                                                len37,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes36),
                                                template_id: _rt::string_lift(bytes37),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e48)
                                    }
                                    3 => {
                                        let e48 = {
                                            let len38 = arg9;
                                            let bytes38 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len38, len38);
                                            let len39 = arg11;
                                            let bytes39 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len39,
                                                len39,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes38),
                                                template_id: _rt::string_lift(bytes39),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e48)
                                    }
                                    4 => {
                                        let e48 = {
                                            let len40 = arg9;
                                            let bytes40 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len40, len40);
                                            let len41 = arg11;
                                            let bytes41 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len41,
                                                len41,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes40),
                                                template_id: _rt::string_lift(bytes41),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e48)
                                    }
                                    5 => {
                                        let e48 = {
                                            let len42 = arg9;
                                            let bytes42 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len42, len42);
                                            let len43 = arg11;
                                            let bytes43 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len43,
                                                len43,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes42),
                                                template_id: _rt::string_lift(bytes43),
                                            }
                                        };
                                        DerivedTimelineNode::And(e48)
                                    }
                                    6 => {
                                        let e48 = {
                                            let len44 = arg9;
                                            let bytes44 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len44, len44);
                                            let len45 = arg11;
                                            let bytes45 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len45,
                                                len45,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes44),
                                                template_id: _rt::string_lift(bytes45),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e48)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e48 = {
                                            let len46 = arg9;
                                            let bytes46 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len46, len46);
                                            let len47 = arg11;
                                            let bytes47 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len47,
                                                len47,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes46),
                                                template_id: _rt::string_lift(bytes47),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e48)
                                    }
                                };

                                v48
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e49)
                        }
                    };
                    let result50 = T::initialize_and(v24, v49);
                    let ptr51 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result50 {
                        Ok(e) => {
                            *ptr51.add(0).cast::<u8>() = (0i32) as u8;
                            let vec52 = (e.into_bytes()).into_boxed_slice();
                            let ptr52 = vec52.as_ptr().cast::<u8>();
                            let len52 = vec52.len();
                            ::core::mem::forget(vec52);
                            *ptr51.add(8).cast::<usize>() = len52;
                            *ptr51.add(4).cast::<*mut u8>() = ptr52.cast_mut();
                        }
                        Err(e) => {
                            *ptr51.add(0).cast::<u8>() = (1i32) as u8;
                            let vec53 = (e.into_bytes()).into_boxed_slice();
                            let ptr53 = vec53.as_ptr().cast::<u8>();
                            let len53 = vec53.len();
                            ::core::mem::forget(vec53);
                            *ptr51.add(8).cast::<usize>() = len53;
                            *ptr51.add(4).cast::<*mut u8>() = ptr53.cast_mut();
                        }
                    };
                    ptr51
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_and<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_or_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: i32,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: *mut u8,
                    arg11: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v24 = match arg0 {
                        0 => {
                            let e24 = {
                                let v6 = match arg1 {
                                    0 => {
                                        let e6 = {
                                            let len0 = arg3;
                                            let bytes0 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                                            let len1 = arg5;
                                            let bytes1 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes0),
                                                template_id: _rt::string_lift(bytes1),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e6)
                                    }
                                    1 => {
                                        let e6 = {
                                            let len2 = arg3;
                                            let bytes2 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len2, len2);
                                            let len3 = arg5;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len3, len3);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes2),
                                                template_id: _rt::string_lift(bytes3),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e6 = {
                                            let len4 = arg3;
                                            let bytes4 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len4, len4);
                                            let len5 = arg5;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes4),
                                                template_id: _rt::string_lift(bytes5),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e6)
                                    }
                                };

                                v6
                            };
                            TypedTimelineResultWorker::LeafTimeline(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let v23 = match arg1 {
                                    0 => {
                                        let e23 = {
                                            let len7 = arg3;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len7, len7);
                                            let len8 = arg5;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len8, len8);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes7),
                                                template_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e23)
                                    }
                                    1 => {
                                        let e23 = {
                                            let len9 = arg3;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len9, len9);
                                            let len10 = arg5;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len10, len10);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes9),
                                                template_id: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e23)
                                    }
                                    2 => {
                                        let e23 = {
                                            let len11 = arg3;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len11, len11);
                                            let len12 = arg5;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len12, len12);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes11),
                                                template_id: _rt::string_lift(bytes12),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e23)
                                    }
                                    3 => {
                                        let e23 = {
                                            let len13 = arg3;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                                            let len14 = arg5;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len14, len14);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes13),
                                                template_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e23)
                                    }
                                    4 => {
                                        let e23 = {
                                            let len15 = arg3;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len15, len15);
                                            let len16 = arg5;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len16, len16);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes15),
                                                template_id: _rt::string_lift(bytes16),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e23)
                                    }
                                    5 => {
                                        let e23 = {
                                            let len17 = arg3;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len17, len17);
                                            let len18 = arg5;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len18, len18);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes17),
                                                template_id: _rt::string_lift(bytes18),
                                            }
                                        };
                                        DerivedTimelineNode::And(e23)
                                    }
                                    6 => {
                                        let e23 = {
                                            let len19 = arg3;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len19, len19);
                                            let len20 = arg5;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len20, len20);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes19),
                                                template_id: _rt::string_lift(bytes20),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e23 = {
                                            let len21 = arg3;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len21, len21);
                                            let len22 = arg5;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len22, len22);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes21),
                                                template_id: _rt::string_lift(bytes22),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e23)
                                    }
                                };

                                v23
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e24)
                        }
                    };
                    let v49 = match arg6 {
                        0 => {
                            let e49 = {
                                let v31 = match arg7 {
                                    0 => {
                                        let e31 = {
                                            let len25 = arg9;
                                            let bytes25 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len25, len25);
                                            let len26 = arg11;
                                            let bytes26 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len26,
                                                len26,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes25),
                                                template_id: _rt::string_lift(bytes26),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e31)
                                    }
                                    1 => {
                                        let e31 = {
                                            let len27 = arg9;
                                            let bytes27 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len27, len27);
                                            let len28 = arg11;
                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len28,
                                                len28,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes27),
                                                template_id: _rt::string_lift(bytes28),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e31)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e31 = {
                                            let len29 = arg9;
                                            let bytes29 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len29, len29);
                                            let len30 = arg11;
                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len30,
                                                len30,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes29),
                                                template_id: _rt::string_lift(bytes30),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e31)
                                    }
                                };

                                v31
                            };
                            TypedTimelineResultWorker::LeafTimeline(e49)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e49 = {
                                let v48 = match arg7 {
                                    0 => {
                                        let e48 = {
                                            let len32 = arg9;
                                            let bytes32 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len32, len32);
                                            let len33 = arg11;
                                            let bytes33 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len33,
                                                len33,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes32),
                                                template_id: _rt::string_lift(bytes33),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e48)
                                    }
                                    1 => {
                                        let e48 = {
                                            let len34 = arg9;
                                            let bytes34 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len34, len34);
                                            let len35 = arg11;
                                            let bytes35 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len35,
                                                len35,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes34),
                                                template_id: _rt::string_lift(bytes35),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e48)
                                    }
                                    2 => {
                                        let e48 = {
                                            let len36 = arg9;
                                            let bytes36 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len36, len36);
                                            let len37 = arg11;
                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len37,
                                                len37,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes36),
                                                template_id: _rt::string_lift(bytes37),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e48)
                                    }
                                    3 => {
                                        let e48 = {
                                            let len38 = arg9;
                                            let bytes38 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len38, len38);
                                            let len39 = arg11;
                                            let bytes39 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len39,
                                                len39,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes38),
                                                template_id: _rt::string_lift(bytes39),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e48)
                                    }
                                    4 => {
                                        let e48 = {
                                            let len40 = arg9;
                                            let bytes40 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len40, len40);
                                            let len41 = arg11;
                                            let bytes41 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len41,
                                                len41,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes40),
                                                template_id: _rt::string_lift(bytes41),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e48)
                                    }
                                    5 => {
                                        let e48 = {
                                            let len42 = arg9;
                                            let bytes42 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len42, len42);
                                            let len43 = arg11;
                                            let bytes43 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len43,
                                                len43,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes42),
                                                template_id: _rt::string_lift(bytes43),
                                            }
                                        };
                                        DerivedTimelineNode::And(e48)
                                    }
                                    6 => {
                                        let e48 = {
                                            let len44 = arg9;
                                            let bytes44 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len44, len44);
                                            let len45 = arg11;
                                            let bytes45 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len45,
                                                len45,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes44),
                                                template_id: _rt::string_lift(bytes45),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e48)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e48 = {
                                            let len46 = arg9;
                                            let bytes46 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len46, len46);
                                            let len47 = arg11;
                                            let bytes47 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len47,
                                                len47,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes46),
                                                template_id: _rt::string_lift(bytes47),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e48)
                                    }
                                };

                                v48
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e49)
                        }
                    };
                    let result50 = T::initialize_or(v24, v49);
                    let ptr51 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result50 {
                        Ok(e) => {
                            *ptr51.add(0).cast::<u8>() = (0i32) as u8;
                            let vec52 = (e.into_bytes()).into_boxed_slice();
                            let ptr52 = vec52.as_ptr().cast::<u8>();
                            let len52 = vec52.len();
                            ::core::mem::forget(vec52);
                            *ptr51.add(8).cast::<usize>() = len52;
                            *ptr51.add(4).cast::<*mut u8>() = ptr52.cast_mut();
                        }
                        Err(e) => {
                            *ptr51.add(0).cast::<u8>() = (1i32) as u8;
                            let vec53 = (e.into_bytes()).into_boxed_slice();
                            let ptr53 = vec53.as_ptr().cast::<u8>();
                            let len53 = vec53.len();
                            ::core::mem::forget(vec53);
                            *ptr51.add(8).cast::<usize>() = len53;
                            *ptr51.add(4).cast::<*mut u8>() = ptr53.cast_mut();
                        }
                    };
                    ptr51
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_or<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_not_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v24 = match arg0 {
                        0 => {
                            let e24 = {
                                let v6 = match arg1 {
                                    0 => {
                                        let e6 = {
                                            let len0 = arg3;
                                            let bytes0 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                                            let len1 = arg5;
                                            let bytes1 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes0),
                                                template_id: _rt::string_lift(bytes1),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e6)
                                    }
                                    1 => {
                                        let e6 = {
                                            let len2 = arg3;
                                            let bytes2 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len2, len2);
                                            let len3 = arg5;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len3, len3);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes2),
                                                template_id: _rt::string_lift(bytes3),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e6 = {
                                            let len4 = arg3;
                                            let bytes4 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len4, len4);
                                            let len5 = arg5;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes4),
                                                template_id: _rt::string_lift(bytes5),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e6)
                                    }
                                };

                                v6
                            };
                            TypedTimelineResultWorker::LeafTimeline(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let v23 = match arg1 {
                                    0 => {
                                        let e23 = {
                                            let len7 = arg3;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len7, len7);
                                            let len8 = arg5;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len8, len8);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes7),
                                                template_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e23)
                                    }
                                    1 => {
                                        let e23 = {
                                            let len9 = arg3;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len9, len9);
                                            let len10 = arg5;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len10, len10);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes9),
                                                template_id: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e23)
                                    }
                                    2 => {
                                        let e23 = {
                                            let len11 = arg3;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len11, len11);
                                            let len12 = arg5;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len12, len12);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes11),
                                                template_id: _rt::string_lift(bytes12),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e23)
                                    }
                                    3 => {
                                        let e23 = {
                                            let len13 = arg3;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                                            let len14 = arg5;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len14, len14);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes13),
                                                template_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e23)
                                    }
                                    4 => {
                                        let e23 = {
                                            let len15 = arg3;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len15, len15);
                                            let len16 = arg5;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len16, len16);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes15),
                                                template_id: _rt::string_lift(bytes16),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e23)
                                    }
                                    5 => {
                                        let e23 = {
                                            let len17 = arg3;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len17, len17);
                                            let len18 = arg5;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len18, len18);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes17),
                                                template_id: _rt::string_lift(bytes18),
                                            }
                                        };
                                        DerivedTimelineNode::And(e23)
                                    }
                                    6 => {
                                        let e23 = {
                                            let len19 = arg3;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len19, len19);
                                            let len20 = arg5;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len20, len20);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes19),
                                                template_id: _rt::string_lift(bytes20),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e23 = {
                                            let len21 = arg3;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len21, len21);
                                            let len22 = arg5;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len22, len22);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes21),
                                                template_id: _rt::string_lift(bytes22),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e23)
                                    }
                                };

                                v23
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e24)
                        }
                    };
                    let result25 = T::initialize_not(v24);
                    let ptr26 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result25 {
                        Ok(e) => {
                            *ptr26.add(0).cast::<u8>() = (0i32) as u8;
                            let vec27 = (e.into_bytes()).into_boxed_slice();
                            let ptr27 = vec27.as_ptr().cast::<u8>();
                            let len27 = vec27.len();
                            ::core::mem::forget(vec27);
                            *ptr26.add(8).cast::<usize>() = len27;
                            *ptr26.add(4).cast::<*mut u8>() = ptr27.cast_mut();
                        }
                        Err(e) => {
                            *ptr26.add(0).cast::<u8>() = (1i32) as u8;
                            let vec28 = (e.into_bytes()).into_boxed_slice();
                            let ptr28 = vec28.as_ptr().cast::<u8>();
                            let len28 = vec28.len();
                            ::core::mem::forget(vec28);
                            *ptr26.add(8).cast::<usize>() = len28;
                            *ptr26.add(4).cast::<*mut u8>() = ptr28.cast_mut();
                        }
                    };
                    ptr26
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_not<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_timeline_result_cabi<T: Guest>(arg0: i64) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get_timeline_result(arg0 as u64);
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::timeline::event_processor::api::TimelineResult{ results:results2, } = e;
                            let vec7 = results2;
                            let len7 = vec7.len();
                            let layout7 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec7.len() * 40, 8);
                            let result7 = if layout7.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout7);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec7.into_iter().enumerate() {
                                let base = result7.add(i * 40);
                                {
                                    let super::super::super::super::timeline::event_processor::api::TimelineResultPoint{ time_period:time_period3, value:value3, } = e;
                                    let super::super::super::super::timeline::event_processor::api::TimePeriod{ t1:t14, t2:t24, } = time_period3;
                                    *base.add(0).cast::<i64>() = _rt::as_i64(t14);
                                    match t24 {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    use super::super::super::super::timeline::event_processor::api::EventValue as V6;
                                    match value3 {
                                        V6::StringValue(e) => {
                                            *base.add(24).cast::<u8>() = (0i32) as u8;
                                            let vec5 = (e.into_bytes()).into_boxed_slice();
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();
                                            ::core::mem::forget(vec5);
                                            *base.add(36).cast::<usize>() = len5;
                                            *base.add(32).cast::<*mut u8>() = ptr5.cast_mut();
                                        }
                                        V6::IntValue(e) => {
                                            *base.add(24).cast::<u8>() = (1i32) as u8;
                                            *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                        }
                                        V6::FloatValue(e) => {
                                            *base.add(24).cast::<u8>() = (2i32) as u8;
                                            *base.add(32).cast::<f64>() = _rt::as_f64(e);
                                        }
                                        V6::BoolValue(e) => {
                                            *base.add(24).cast::<u8>() = (3i32) as u8;
                                            *base.add(32).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            })
                                                as u8;
                                        }
                                    }
                                }
                            }
                            *ptr1.add(8).cast::<usize>() = len7;
                            *ptr1.add(4).cast::<*mut u8>() = result7;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let vec8 = (e.into_bytes()).into_boxed_slice();
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            ::core::mem::forget(vec8);
                            *ptr1.add(8).cast::<usize>() = len8;
                            *ptr1.add(4).cast::<*mut u8>() = ptr8.cast_mut();
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_timeline_result<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l4 = *arg0.add(4).cast::<*mut u8>();
                            let l5 = *arg0.add(8).cast::<usize>();
                            let base6 = l4;
                            let len6 = l5;
                            for i in 0..len6 {
                                let base = base6.add(i * 40);
                                {
                                    let l1 = i32::from(*base.add(24).cast::<u8>());
                                    match l1 {
                                        0 => {
                                            let l2 = *base.add(32).cast::<*mut u8>();
                                            let l3 = *base.add(36).cast::<usize>();
                                            _rt::cabi_dealloc(l2, l3, 1);
                                        }
                                        1 => (),
                                        2 => (),
                                        _ => (),
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base6, len6 * 40, 8);
                        }
                        _ => {
                            let l7 = *arg0.add(4).cast::<*mut u8>();
                            let l8 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l7, l8, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn initialize_equal(
                        child_worker: TypedTimelineResultWorker,
                        event_value: EventValue,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_greater_than(
                        child_worker: TypedTimelineResultWorker,
                        event_value: EventValue,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_greater_than_or_equal_to(
                        child_worker: TypedTimelineResultWorker,
                        event_value: EventValue,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_less_than(
                        child_worker: TypedTimelineResultWorker,
                        event_value: EventValue,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_less_than_or_equal_to(
                        child_worker: TypedTimelineResultWorker,
                        event_value: EventValue,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_and(
                        child_worker1: TypedTimelineResultWorker,
                        child_worker2: TypedTimelineResultWorker,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_or(
                        child_worker1: TypedTimelineResultWorker,
                        child_worker2: TypedTimelineResultWorker,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_not(
                        child_worker: TypedTimelineResultWorker,
                    ) -> Result<_rt::String, _rt::String>;
                    fn get_timeline_result(t1: u64) -> Result<TimelineResult, _rt::String>;
                }
                #[doc(hidden)]

                macro_rules! __export_timeline_timeline_processor_api_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "timeline:timeline-processor/api#initialize-equal"]
    unsafe extern "C" fn export_initialize_equal(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,arg6: i32,arg7: ::core::mem::MaybeUninit::<u64>,arg8: usize,) -> *mut u8 {
      $($path_to_types)*::_export_initialize_equal_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    }
    #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-equal"]
    unsafe extern "C" fn _post_return_initialize_equal(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_initialize_equal::<$ty>(arg0)
    }
    #[export_name = "timeline:timeline-processor/api#initialize-greater-than"]
    unsafe extern "C" fn export_initialize_greater_than(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,arg6: i32,arg7: ::core::mem::MaybeUninit::<u64>,arg8: usize,) -> *mut u8 {
      $($path_to_types)*::_export_initialize_greater_than_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    }
    #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-greater-than"]
    unsafe extern "C" fn _post_return_initialize_greater_than(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_initialize_greater_than::<$ty>(arg0)
    }
    #[export_name = "timeline:timeline-processor/api#initialize-greater-than-or-equal-to"]
    unsafe extern "C" fn export_initialize_greater_than_or_equal_to(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,arg6: i32,arg7: ::core::mem::MaybeUninit::<u64>,arg8: usize,) -> *mut u8 {
      $($path_to_types)*::_export_initialize_greater_than_or_equal_to_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    }
    #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-greater-than-or-equal-to"]
    unsafe extern "C" fn _post_return_initialize_greater_than_or_equal_to(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_initialize_greater_than_or_equal_to::<$ty>(arg0)
    }
    #[export_name = "timeline:timeline-processor/api#initialize-less-than"]
    unsafe extern "C" fn export_initialize_less_than(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,arg6: i32,arg7: ::core::mem::MaybeUninit::<u64>,arg8: usize,) -> *mut u8 {
      $($path_to_types)*::_export_initialize_less_than_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    }
    #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-less-than"]
    unsafe extern "C" fn _post_return_initialize_less_than(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_initialize_less_than::<$ty>(arg0)
    }
    #[export_name = "timeline:timeline-processor/api#initialize-less-than-or-equal-to"]
    unsafe extern "C" fn export_initialize_less_than_or_equal_to(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,arg6: i32,arg7: ::core::mem::MaybeUninit::<u64>,arg8: usize,) -> *mut u8 {
      $($path_to_types)*::_export_initialize_less_than_or_equal_to_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
    }
    #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-less-than-or-equal-to"]
    unsafe extern "C" fn _post_return_initialize_less_than_or_equal_to(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_initialize_less_than_or_equal_to::<$ty>(arg0)
    }
    #[export_name = "timeline:timeline-processor/api#initialize-and"]
    unsafe extern "C" fn export_initialize_and(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,arg6: i32,arg7: i32,arg8: *mut u8,arg9: usize,arg10: *mut u8,arg11: usize,) -> *mut u8 {
      $($path_to_types)*::_export_initialize_and_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    }
    #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-and"]
    unsafe extern "C" fn _post_return_initialize_and(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_initialize_and::<$ty>(arg0)
    }
    #[export_name = "timeline:timeline-processor/api#initialize-or"]
    unsafe extern "C" fn export_initialize_or(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,arg6: i32,arg7: i32,arg8: *mut u8,arg9: usize,arg10: *mut u8,arg11: usize,) -> *mut u8 {
      $($path_to_types)*::_export_initialize_or_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
    }
    #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-or"]
    unsafe extern "C" fn _post_return_initialize_or(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_initialize_or::<$ty>(arg0)
    }
    #[export_name = "timeline:timeline-processor/api#initialize-not"]
    unsafe extern "C" fn export_initialize_not(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,) -> *mut u8 {
      $($path_to_types)*::_export_initialize_not_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5)
    }
    #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-not"]
    unsafe extern "C" fn _post_return_initialize_not(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_initialize_not::<$ty>(arg0)
    }
    #[export_name = "timeline:timeline-processor/api#get-timeline-result"]
    unsafe extern "C" fn export_get_timeline_result(arg0: i64,) -> *mut u8 {
      $($path_to_types)*::_export_get_timeline_result_cabi::<$ty>(arg0)
    }
    #[export_name = "cabi_post_timeline:timeline-processor/api#get-timeline-result"]
    unsafe extern "C" fn _post_return_get_timeline_result(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_get_timeline_result::<$ty>(arg0)
    }
  };);
}
                #[doc(hidden)]
                pub(crate) use __export_timeline_timeline_processor_api_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }

    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }

    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }

    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_timeline_processor_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::timeline::timeline_processor::api::__export_timeline_timeline_processor_api_cabi!($ty with_types_in $($path_to_types_root)*::exports::timeline::timeline_processor::api);
  )
}
#[doc(inline)]
pub(crate) use __export_timeline_processor_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:timeline-processor:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1683] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x8a\x0c\x01A\x02\x01\
A\x06\x01B\x20\x01q\x04\x0cstring-value\x01s\0\x09int-value\x01x\0\x0bfloat-valu\
e\x01u\0\x0abool-value\x01\x7f\0\x04\0\x0bevent-value\x03\0\0\x01o\x02s\x01\x01p\
\x02\x01r\x02\x04timew\x05event\x03\x04\0\x05event\x03\0\x04\x01kw\x01r\x02\x02t\
1w\x02t2\x06\x04\0\x0btime-period\x03\0\x07\x01r\x02\x0btime-period\x08\x05value\
\x01\x04\0\x15timeline-result-point\x03\0\x09\x01p\x0a\x01r\x01\x07results\x0b\x04\
\0\x0ftimeline-result\x03\0\x0c\x01m\x03\x05equal\x0cgreater-than\x09less-than\x04\
\0\x12event-predicate-op\x03\0\x0e\x01r\x03\x08col-names\x05value\x01\x02op\x0f\x04\
\0\x0fevent-predicate\x03\0\x10\x01j\x01s\x01s\x01@\x01\x0eevent-col-names\0\x12\
\x04\0\x1dinitialize-latest-event-state\x01\x13\x01@\x01\x0fevent-predicate\x11\0\
\x12\x04\0\x19initialize-tl-has-existed\x01\x14\x01@\x02\x0fevent-predicate\x11\x04\
timew\0\x12\x04\0\x20initialize-tl-has-existed-within\x01\x15\x01@\x01\x05event\x05\
\0\x12\x04\0\x09add-event\x01\x16\x01j\x01\x0d\x01s\x01@\x01\x02t1w\0\x17\x04\0\x15\
latest-event-to-state\x01\x18\x04\0\x0etl-has-existed\x01\x18\x04\0\x15tl-has-ex\
isted-within\x01\x18\x03\x01\x1ctimeline:event-processor/api\x05\0\x02\x03\0\0\x0b\
event-value\x02\x03\0\0\x0ftimeline-result\x01B\x1b\x02\x03\x02\x01\x01\x04\0\x0b\
event-value\x03\0\0\x02\x03\x02\x01\x02\x04\0\x0ftimeline-result\x03\0\x02\x01r\x02\
\x09worker-ids\x0btemplate-ids\x04\0\x16timeline-result-worker\x03\0\x04\x01q\x03\
\x0etl-has-existed\x01\x05\0\x15tl-has-existed-within\x01\x05\0\x18tl-latest-eve\
nt-to-state\x01\x05\0\x04\0\x12leaf-timeline-node\x03\0\x06\x01q\x08\x08equal-to\
\x01\x05\0\x0cgreater-than\x01\x05\0\x18greater-than-or-equal-to\x01\x05\0\x09le\
ss-than\x01\x05\0\x15less-than-or-equal-to\x01\x05\0\x03and\x01\x05\0\x02or\x01\x05\
\0\x03not\x01\x05\0\x04\0\x15derived-timeline-node\x03\0\x08\x01q\x02\x0dleaf-ti\
meline\x01\x07\0\x10derived-timeline\x01\x09\0\x04\0\x1ctyped-timeline-result-wo\
rker\x03\0\x0a\x01j\x01s\x01s\x01@\x02\x0cchild-worker\x0b\x0bevent-value\x01\0\x0c\
\x04\0\x10initialize-equal\x01\x0d\x04\0\x17initialize-greater-than\x01\x0d\x04\0\
#initialize-greater-than-or-equal-to\x01\x0d\x04\0\x14initialize-less-than\x01\x0d\
\x04\0\x20initialize-less-than-or-equal-to\x01\x0d\x01@\x02\x0dchild-worker1\x0b\
\x0dchild-worker2\x0b\0\x0c\x04\0\x0einitialize-and\x01\x0e\x04\0\x0dinitialize-\
or\x01\x0e\x01@\x01\x0cchild-worker\x0b\0\x0c\x04\0\x0einitialize-not\x01\x0f\x01\
j\x01\x03\x01s\x01@\x01\x02t1w\0\x10\x04\0\x13get-timeline-result\x01\x11\x04\x01\
\x1ftimeline:timeline-processor/api\x05\x03\x04\x01.timeline:timeline-processor/\
timeline-processor\x04\0\x0b\x18\x01\0\x12timeline-processor\x03\0\0\0G\x09produ\
cers\x01\x0cprocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x06\
0.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
