// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod golem {
    #[allow(dead_code)]
    pub mod rpc {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            pub type NodeIndex = i32;
            #[derive(Clone)]
            pub struct Uri {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Uri {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Uri").field("value", &self.value).finish()
                }
            }
            #[derive(Clone)]
            pub enum WitNode {
                RecordValue(_rt::Vec<NodeIndex>),
                VariantValue((u32, Option<NodeIndex>)),
                EnumValue(u32),
                FlagsValue(_rt::Vec<bool>),
                TupleValue(_rt::Vec<NodeIndex>),
                ListValue(_rt::Vec<NodeIndex>),
                OptionValue(Option<NodeIndex>),
                ResultValue(Result<Option<NodeIndex>, Option<NodeIndex>>),
                PrimU8(u8),
                PrimU16(u16),
                PrimU32(u32),
                PrimU64(u64),
                PrimS8(i8),
                PrimS16(i16),
                PrimS32(i32),
                PrimS64(i64),
                PrimFloat32(f32),
                PrimFloat64(f64),
                PrimChar(char),
                PrimBool(bool),
                PrimString(_rt::String),
                Handle((Uri, u64)),
            }
            impl ::core::fmt::Debug for WitNode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        WitNode::RecordValue(e) => {
                            f.debug_tuple("WitNode::RecordValue").field(e).finish()
                        }
                        WitNode::VariantValue(e) => {
                            f.debug_tuple("WitNode::VariantValue").field(e).finish()
                        }
                        WitNode::EnumValue(e) => {
                            f.debug_tuple("WitNode::EnumValue").field(e).finish()
                        }
                        WitNode::FlagsValue(e) => {
                            f.debug_tuple("WitNode::FlagsValue").field(e).finish()
                        }
                        WitNode::TupleValue(e) => {
                            f.debug_tuple("WitNode::TupleValue").field(e).finish()
                        }
                        WitNode::ListValue(e) => {
                            f.debug_tuple("WitNode::ListValue").field(e).finish()
                        }
                        WitNode::OptionValue(e) => {
                            f.debug_tuple("WitNode::OptionValue").field(e).finish()
                        }
                        WitNode::ResultValue(e) => {
                            f.debug_tuple("WitNode::ResultValue").field(e).finish()
                        }
                        WitNode::PrimU8(e) => f.debug_tuple("WitNode::PrimU8").field(e).finish(),
                        WitNode::PrimU16(e) => f.debug_tuple("WitNode::PrimU16").field(e).finish(),
                        WitNode::PrimU32(e) => f.debug_tuple("WitNode::PrimU32").field(e).finish(),
                        WitNode::PrimU64(e) => f.debug_tuple("WitNode::PrimU64").field(e).finish(),
                        WitNode::PrimS8(e) => f.debug_tuple("WitNode::PrimS8").field(e).finish(),
                        WitNode::PrimS16(e) => f.debug_tuple("WitNode::PrimS16").field(e).finish(),
                        WitNode::PrimS32(e) => f.debug_tuple("WitNode::PrimS32").field(e).finish(),
                        WitNode::PrimS64(e) => f.debug_tuple("WitNode::PrimS64").field(e).finish(),
                        WitNode::PrimFloat32(e) => {
                            f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
                        }
                        WitNode::PrimFloat64(e) => {
                            f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
                        }
                        WitNode::PrimChar(e) => {
                            f.debug_tuple("WitNode::PrimChar").field(e).finish()
                        }
                        WitNode::PrimBool(e) => {
                            f.debug_tuple("WitNode::PrimBool").field(e).finish()
                        }
                        WitNode::PrimString(e) => {
                            f.debug_tuple("WitNode::PrimString").field(e).finish()
                        }
                        WitNode::Handle(e) => f.debug_tuple("WitNode::Handle").field(e).finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub struct WitValue {
                pub nodes: _rt::Vec<WitNode>,
            }
            impl ::core::fmt::Debug for WitValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
                }
            }
            #[derive(Clone)]
            pub enum RpcError {
                ProtocolError(_rt::String),
                Denied(_rt::String),
                NotFound(_rt::String),
                RemoteInternalError(_rt::String),
            }
            impl ::core::fmt::Debug for RpcError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        RpcError::ProtocolError(e) => {
                            f.debug_tuple("RpcError::ProtocolError").field(e).finish()
                        }
                        RpcError::Denied(e) => f.debug_tuple("RpcError::Denied").field(e).finish(),
                        RpcError::NotFound(e) => {
                            f.debug_tuple("RpcError::NotFound").field(e).finish()
                        }
                        RpcError::RemoteInternalError(e) => {
                            f.debug_tuple("RpcError::RemoteInternalError").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for RpcError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for RpcError {}

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct WasmRpc {
                handle: _rt::Resource<WasmRpc>,
            }

            impl WasmRpc {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for WasmRpc {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]wasm-rpc"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInvokeResult {
                handle: _rt::Resource<FutureInvokeResult>,
            }

            impl FutureInvokeResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureInvokeResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-invoke-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(location: &Uri) -> Self {
                    unsafe {
                        let Uri { value: value0 } = location;
                        let vec1 = value0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]wasm-rpc"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr1.cast_mut(), len1);
                        WasmRpc::from_handle(ret as u32)
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<WitValue, RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec4.len() * 1,
                                                        1,
                                                    );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list
                                                    .extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke-and-await"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                            ptr13,
                        );
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = {
                                    let l15 = *ptr13.add(4).cast::<*mut u8>();
                                    let l16 = *ptr13.add(8).cast::<usize>();
                                    let base62 = l15;
                                    let len62 = l16;
                                    let mut result62 = _rt::Vec::with_capacity(len62);
                                    for i in 0..len62 {
                                        let base = base62.add(i * 24);
                                        let e62 = {
                                            let l17 = i32::from(*base.add(0).cast::<u8>());
                                            let v61 = match l17 {
                                                0 => {
                                                    let e61 = {
                                                        let l18 = *base.add(8).cast::<*mut u8>();
                                                        let l19 = *base.add(12).cast::<usize>();
                                                        let len20 = l19;

                                                        _rt::Vec::from_raw_parts(
                                                            l18.cast(),
                                                            len20,
                                                            len20,
                                                        )
                                                    };
                                                    WitNode::RecordValue(e61)
                                                }
                                                1 => {
                                                    let e61 =
                                                        {
                                                            let l21 = *base.add(8).cast::<i32>();
                                                            let l22 = i32::from(
                                                                *base.add(12).cast::<u8>(),
                                                            );

                                                            (l21 as u32, match l22 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l23 = *base.add(16).cast::<i32>();

                                            l23
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      })
                                                        };
                                                    WitNode::VariantValue(e61)
                                                }
                                                2 => {
                                                    let e61 = {
                                                        let l24 = *base.add(8).cast::<i32>();

                                                        l24 as u32
                                                    };
                                                    WitNode::EnumValue(e61)
                                                }
                                                3 => {
                                                    let e61 = {
                                                        let l25 = *base.add(8).cast::<*mut u8>();
                                                        let l26 = *base.add(12).cast::<usize>();
                                                        let base28 = l25;
                                                        let len28 = l26;
                                                        let mut result28 =
                                                            _rt::Vec::with_capacity(len28);
                                                        for i in 0..len28 {
                                                            let base = base28.add(i * 1);
                                                            let e28 = {
                                                                let l27 = i32::from(
                                                                    *base.add(0).cast::<u8>(),
                                                                );

                                                                _rt::bool_lift(l27 as u8)
                                                            };
                                                            result28.push(e28);
                                                        }
                                                        _rt::cabi_dealloc(base28, len28 * 1, 1);

                                                        result28
                                                    };
                                                    WitNode::FlagsValue(e61)
                                                }
                                                4 => {
                                                    let e61 = {
                                                        let l29 = *base.add(8).cast::<*mut u8>();
                                                        let l30 = *base.add(12).cast::<usize>();
                                                        let len31 = l30;

                                                        _rt::Vec::from_raw_parts(
                                                            l29.cast(),
                                                            len31,
                                                            len31,
                                                        )
                                                    };
                                                    WitNode::TupleValue(e61)
                                                }
                                                5 => {
                                                    let e61 = {
                                                        let l32 = *base.add(8).cast::<*mut u8>();
                                                        let l33 = *base.add(12).cast::<usize>();
                                                        let len34 = l33;

                                                        _rt::Vec::from_raw_parts(
                                                            l32.cast(),
                                                            len34,
                                                            len34,
                                                        )
                                                    };
                                                    WitNode::ListValue(e61)
                                                }
                                                6 => {
                                                    let e61 = {
                                                        let l35 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        match l35 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l36 =
                                                                        *base.add(12).cast::<i32>();

                                                                    l36
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::OptionValue(e61)
                                                }
                                                7 => {
                                                    let e61 = {
                                                        let l37 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        match l37 {
                                                            0 => {
                                                                let e = {
                                                                    let l38 = i32::from(
                                                                        *base.add(12).cast::<u8>(),
                                                                    );

                                                                    match l38 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l39 = *base.add(16).cast::<i32>();

                                                  l39
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                                                };
                                                                Ok(e)
                                                            }
                                                            1 => {
                                                                let e = {
                                                                    let l40 = i32::from(
                                                                        *base.add(12).cast::<u8>(),
                                                                    );

                                                                    match l40 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l41 = *base.add(16).cast::<i32>();

                                                  l41
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                                                };
                                                                Err(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::ResultValue(e61)
                                                }
                                                8 => {
                                                    let e61 = {
                                                        let l42 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        l42 as u8
                                                    };
                                                    WitNode::PrimU8(e61)
                                                }
                                                9 => {
                                                    let e61 = {
                                                        let l43 =
                                                            i32::from(*base.add(8).cast::<u16>());

                                                        l43 as u16
                                                    };
                                                    WitNode::PrimU16(e61)
                                                }
                                                10 => {
                                                    let e61 = {
                                                        let l44 = *base.add(8).cast::<i32>();

                                                        l44 as u32
                                                    };
                                                    WitNode::PrimU32(e61)
                                                }
                                                11 => {
                                                    let e61 = {
                                                        let l45 = *base.add(8).cast::<i64>();

                                                        l45 as u64
                                                    };
                                                    WitNode::PrimU64(e61)
                                                }
                                                12 => {
                                                    let e61 = {
                                                        let l46 =
                                                            i32::from(*base.add(8).cast::<i8>());

                                                        l46 as i8
                                                    };
                                                    WitNode::PrimS8(e61)
                                                }
                                                13 => {
                                                    let e61 = {
                                                        let l47 =
                                                            i32::from(*base.add(8).cast::<i16>());

                                                        l47 as i16
                                                    };
                                                    WitNode::PrimS16(e61)
                                                }
                                                14 => {
                                                    let e61 = {
                                                        let l48 = *base.add(8).cast::<i32>();

                                                        l48
                                                    };
                                                    WitNode::PrimS32(e61)
                                                }
                                                15 => {
                                                    let e61 = {
                                                        let l49 = *base.add(8).cast::<i64>();

                                                        l49
                                                    };
                                                    WitNode::PrimS64(e61)
                                                }
                                                16 => {
                                                    let e61 = {
                                                        let l50 = *base.add(8).cast::<f32>();

                                                        l50
                                                    };
                                                    WitNode::PrimFloat32(e61)
                                                }
                                                17 => {
                                                    let e61 = {
                                                        let l51 = *base.add(8).cast::<f64>();

                                                        l51
                                                    };
                                                    WitNode::PrimFloat64(e61)
                                                }
                                                18 => {
                                                    let e61 = {
                                                        let l52 = *base.add(8).cast::<i32>();

                                                        _rt::char_lift(l52 as u32)
                                                    };
                                                    WitNode::PrimChar(e61)
                                                }
                                                19 => {
                                                    let e61 = {
                                                        let l53 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        _rt::bool_lift(l53 as u8)
                                                    };
                                                    WitNode::PrimBool(e61)
                                                }
                                                20 => {
                                                    let e61 = {
                                                        let l54 = *base.add(8).cast::<*mut u8>();
                                                        let l55 = *base.add(12).cast::<usize>();
                                                        let len56 = l55;
                                                        let bytes56 = _rt::Vec::from_raw_parts(
                                                            l54.cast(),
                                                            len56,
                                                            len56,
                                                        );

                                                        _rt::string_lift(bytes56)
                                                    };
                                                    WitNode::PrimString(e61)
                                                }
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 21,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e61 = {
                                                        let l57 = *base.add(8).cast::<*mut u8>();
                                                        let l58 = *base.add(12).cast::<usize>();
                                                        let len59 = l58;
                                                        let bytes59 = _rt::Vec::from_raw_parts(
                                                            l57.cast(),
                                                            len59,
                                                            len59,
                                                        );
                                                        let l60 = *base.add(16).cast::<i64>();

                                                        (
                                                            Uri {
                                                                value: _rt::string_lift(bytes59),
                                                            },
                                                            l60 as u64,
                                                        )
                                                    };
                                                    WitNode::Handle(e61)
                                                }
                                            };

                                            v61
                                        };
                                        result62.push(e62);
                                    }
                                    _rt::cabi_dealloc(base62, len62 * 24, 8);

                                    WitValue { nodes: result62 }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l63 = i32::from(*ptr13.add(4).cast::<u8>());
                                    let v76 = match l63 {
                                        0 => {
                                            let e76 = {
                                                let l64 = *ptr13.add(8).cast::<*mut u8>();
                                                let l65 = *ptr13.add(12).cast::<usize>();
                                                let len66 = l65;
                                                let bytes66 = _rt::Vec::from_raw_parts(
                                                    l64.cast(),
                                                    len66,
                                                    len66,
                                                );

                                                _rt::string_lift(bytes66)
                                            };
                                            RpcError::ProtocolError(e76)
                                        }
                                        1 => {
                                            let e76 = {
                                                let l67 = *ptr13.add(8).cast::<*mut u8>();
                                                let l68 = *ptr13.add(12).cast::<usize>();
                                                let len69 = l68;
                                                let bytes69 = _rt::Vec::from_raw_parts(
                                                    l67.cast(),
                                                    len69,
                                                    len69,
                                                );

                                                _rt::string_lift(bytes69)
                                            };
                                            RpcError::Denied(e76)
                                        }
                                        2 => {
                                            let e76 = {
                                                let l70 = *ptr13.add(8).cast::<*mut u8>();
                                                let l71 = *ptr13.add(12).cast::<usize>();
                                                let len72 = l71;
                                                let bytes72 = _rt::Vec::from_raw_parts(
                                                    l70.cast(),
                                                    len72,
                                                    len72,
                                                );

                                                _rt::string_lift(bytes72)
                                            };
                                            RpcError::NotFound(e76)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e76 = {
                                                let l73 = *ptr13.add(8).cast::<*mut u8>();
                                                let l74 = *ptr13.add(12).cast::<usize>();
                                                let len75 = l74;
                                                let bytes75 = _rt::Vec::from_raw_parts(
                                                    l73.cast(),
                                                    len75,
                                                    len75,
                                                );

                                                _rt::string_lift(bytes75)
                                            };
                                            RpcError::RemoteInternalError(e76)
                                        }
                                    };

                                    v76
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<(), RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec4.len() * 1,
                                                        1,
                                                    );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list
                                                    .extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                            ptr13,
                        );
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l15 = i32::from(*ptr13.add(4).cast::<u8>());
                                    let v28 = match l15 {
                                        0 => {
                                            let e28 = {
                                                let l16 = *ptr13.add(8).cast::<*mut u8>();
                                                let l17 = *ptr13.add(12).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );

                                                _rt::string_lift(bytes18)
                                            };
                                            RpcError::ProtocolError(e28)
                                        }
                                        1 => {
                                            let e28 = {
                                                let l19 = *ptr13.add(8).cast::<*mut u8>();
                                                let l20 = *ptr13.add(12).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );

                                                _rt::string_lift(bytes21)
                                            };
                                            RpcError::Denied(e28)
                                        }
                                        2 => {
                                            let e28 = {
                                                let l22 = *ptr13.add(8).cast::<*mut u8>();
                                                let l23 = *ptr13.add(12).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );

                                                _rt::string_lift(bytes24)
                                            };
                                            RpcError::NotFound(e28)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e28 = {
                                                let l25 = *ptr13.add(8).cast::<*mut u8>();
                                                let l26 = *ptr13.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );

                                                _rt::string_lift(bytes27)
                                            };
                                            RpcError::RemoteInternalError(e28)
                                        }
                                    };

                                    v28
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn async_invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> FutureInvokeResult {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec4.len() * 1,
                                                        1,
                                                    );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list
                                                    .extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.async-invoke-and-await"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                        );
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        FutureInvokeResult::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]future-invoke-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<WitValue, RpcError>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 20]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]future-invoke-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let base50 = l3;
                                                let len50 = l4;
                                                let mut result50 = _rt::Vec::with_capacity(len50);
                                                for i in 0..len50 {
                                                    let base = base50.add(i * 24);
                                                    let e50 = {
                                                        let l5 =
                                                            i32::from(*base.add(0).cast::<u8>());
                                                        let v49 = match l5 {
                                                            0 => {
                                                                let e49 = {
                                                                    let l6 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l7 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len8 = l7;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l6.cast(),
                                                                        len8,
                                                                        len8,
                                                                    )
                                                                };
                                                                WitNode::RecordValue(e49)
                                                            }
                                                            1 => {
                                                                let e49 = {
                                                                    let l9 =
                                                                        *base.add(8).cast::<i32>();
                                                                    let l10 = i32::from(
                                                                        *base.add(12).cast::<u8>(),
                                                                    );

                                                                    (l9 as u32, match l10 {
                                                                  0 => None,
                                                                  1 => {
                                                                    let e = {
                                                                      let l11 = *base.add(16).cast::<i32>();

                                                                      l11
                                                                    };
                                                                    Some(e)
                                                                  }
                                                                  _ => _rt::invalid_enum_discriminant(),
                                                                })
                                                                };
                                                                WitNode::VariantValue(e49)
                                                            }
                                                            2 => {
                                                                let e49 = {
                                                                    let l12 =
                                                                        *base.add(8).cast::<i32>();

                                                                    l12 as u32
                                                                };
                                                                WitNode::EnumValue(e49)
                                                            }
                                                            3 => {
                                                                let e49 = {
                                                                    let l13 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l14 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let base16 = l13;
                                                                    let len16 = l14;
                                                                    let mut result16 =
                                                                        _rt::Vec::with_capacity(
                                                                            len16,
                                                                        );
                                                                    for i in 0..len16 {
                                                                        let base =
                                                                            base16.add(i * 1);
                                                                        let e16 = {
                                                                            let l15 = i32::from(
                                                                                *base
                                                                                    .add(0)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            _rt::bool_lift(
                                                                                l15 as u8,
                                                                            )
                                                                        };
                                                                        result16.push(e16);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base16,
                                                                        len16 * 1,
                                                                        1,
                                                                    );

                                                                    result16
                                                                };
                                                                WitNode::FlagsValue(e49)
                                                            }
                                                            4 => {
                                                                let e49 = {
                                                                    let l17 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l18 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len19 = l18;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l17.cast(),
                                                                        len19,
                                                                        len19,
                                                                    )
                                                                };
                                                                WitNode::TupleValue(e49)
                                                            }
                                                            5 => {
                                                                let e49 = {
                                                                    let l20 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l21 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len22 = l21;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l20.cast(),
                                                                        len22,
                                                                        len22,
                                                                    )
                                                                };
                                                                WitNode::ListValue(e49)
                                                            }
                                                            6 => {
                                                                let e49 = {
                                                                    let l23 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    match l23 {
                                                                  0 => None,
                                                                  1 => {
                                                                    let e = {
                                                                      let l24 = *base.add(12).cast::<i32>();

                                                                      l24
                                                                    };
                                                                    Some(e)
                                                                  }
                                                                  _ => _rt::invalid_enum_discriminant(),
                                                                }
                                                                };
                                                                WitNode::OptionValue(e49)
                                                            }
                                                            7 => {
                                                                let e49 = {
                                                                    let l25 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    match l25 {
                                                                  0 => {
                                                                    let e = {
                                                                      let l26 = i32::from(*base.add(12).cast::<u8>());

                                                                      match l26 {
                                                                        0 => None,
                                                                        1 => {
                                                                          let e = {
                                                                            let l27 = *base.add(16).cast::<i32>();

                                                                            l27
                                                                          };
                                                                          Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                      }
                                                                    };
                                                                    Ok(e)
                                                                  }
                                                                  1 => {
                                                                    let e = {
                                                                      let l28 = i32::from(*base.add(12).cast::<u8>());

                                                                      match l28 {
                                                                        0 => None,
                                                                        1 => {
                                                                          let e = {
                                                                            let l29 = *base.add(16).cast::<i32>();

                                                                            l29
                                                                          };
                                                                          Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                      }
                                                                    };
                                                                    Err(e)
                                                                  }
                                                                  _ => _rt::invalid_enum_discriminant(),
                                                                }
                                                                };
                                                                WitNode::ResultValue(e49)
                                                            }
                                                            8 => {
                                                                let e49 = {
                                                                    let l30 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    l30 as u8
                                                                };
                                                                WitNode::PrimU8(e49)
                                                            }
                                                            9 => {
                                                                let e49 = {
                                                                    let l31 = i32::from(
                                                                        *base.add(8).cast::<u16>(),
                                                                    );

                                                                    l31 as u16
                                                                };
                                                                WitNode::PrimU16(e49)
                                                            }
                                                            10 => {
                                                                let e49 = {
                                                                    let l32 =
                                                                        *base.add(8).cast::<i32>();

                                                                    l32 as u32
                                                                };
                                                                WitNode::PrimU32(e49)
                                                            }
                                                            11 => {
                                                                let e49 = {
                                                                    let l33 =
                                                                        *base.add(8).cast::<i64>();

                                                                    l33 as u64
                                                                };
                                                                WitNode::PrimU64(e49)
                                                            }
                                                            12 => {
                                                                let e49 = {
                                                                    let l34 = i32::from(
                                                                        *base.add(8).cast::<i8>(),
                                                                    );

                                                                    l34 as i8
                                                                };
                                                                WitNode::PrimS8(e49)
                                                            }
                                                            13 => {
                                                                let e49 = {
                                                                    let l35 = i32::from(
                                                                        *base.add(8).cast::<i16>(),
                                                                    );

                                                                    l35 as i16
                                                                };
                                                                WitNode::PrimS16(e49)
                                                            }
                                                            14 => {
                                                                let e49 = {
                                                                    let l36 =
                                                                        *base.add(8).cast::<i32>();

                                                                    l36
                                                                };
                                                                WitNode::PrimS32(e49)
                                                            }
                                                            15 => {
                                                                let e49 = {
                                                                    let l37 =
                                                                        *base.add(8).cast::<i64>();

                                                                    l37
                                                                };
                                                                WitNode::PrimS64(e49)
                                                            }
                                                            16 => {
                                                                let e49 = {
                                                                    let l38 =
                                                                        *base.add(8).cast::<f32>();

                                                                    l38
                                                                };
                                                                WitNode::PrimFloat32(e49)
                                                            }
                                                            17 => {
                                                                let e49 = {
                                                                    let l39 =
                                                                        *base.add(8).cast::<f64>();

                                                                    l39
                                                                };
                                                                WitNode::PrimFloat64(e49)
                                                            }
                                                            18 => {
                                                                let e49 = {
                                                                    let l40 =
                                                                        *base.add(8).cast::<i32>();

                                                                    _rt::char_lift(l40 as u32)
                                                                };
                                                                WitNode::PrimChar(e49)
                                                            }
                                                            19 => {
                                                                let e49 = {
                                                                    let l41 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    _rt::bool_lift(l41 as u8)
                                                                };
                                                                WitNode::PrimBool(e49)
                                                            }
                                                            20 => {
                                                                let e49 = {
                                                                    let l42 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l43 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len44 = l43;
                                                                    let bytes44 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l42.cast(),
                                                                            len44,
                                                                            len44,
                                                                        );

                                                                    _rt::string_lift(bytes44)
                                                                };
                                                                WitNode::PrimString(e49)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(
                                                                    n, 21,
                                                                    "invalid enum discriminant"
                                                                );
                                                                let e49 = {
                                                                    let l45 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l46 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len47 = l46;
                                                                    let bytes47 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l45.cast(),
                                                                            len47,
                                                                            len47,
                                                                        );
                                                                    let l48 =
                                                                        *base.add(16).cast::<i64>();

                                                                    (
                                                                        Uri {
                                                                            value: _rt::string_lift(
                                                                                bytes47,
                                                                            ),
                                                                        },
                                                                        l48 as u64,
                                                                    )
                                                                };
                                                                WitNode::Handle(e49)
                                                            }
                                                        };

                                                        v49
                                                    };
                                                    result50.push(e50);
                                                }
                                                _rt::cabi_dealloc(base50, len50 * 24, 8);

                                                WitValue { nodes: result50 }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l51 = i32::from(*ptr0.add(8).cast::<u8>());
                                                let v64 = match l51 {
                                                    0 => {
                                                        let e64 = {
                                                            let l52 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l53 = *ptr0.add(16).cast::<usize>();
                                                            let len54 = l53;
                                                            let bytes54 = _rt::Vec::from_raw_parts(
                                                                l52.cast(),
                                                                len54,
                                                                len54,
                                                            );

                                                            _rt::string_lift(bytes54)
                                                        };
                                                        RpcError::ProtocolError(e64)
                                                    }
                                                    1 => {
                                                        let e64 = {
                                                            let l55 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l56 = *ptr0.add(16).cast::<usize>();
                                                            let len57 = l56;
                                                            let bytes57 = _rt::Vec::from_raw_parts(
                                                                l55.cast(),
                                                                len57,
                                                                len57,
                                                            );

                                                            _rt::string_lift(bytes57)
                                                        };
                                                        RpcError::Denied(e64)
                                                    }
                                                    2 => {
                                                        let e64 = {
                                                            let l58 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l59 = *ptr0.add(16).cast::<usize>();
                                                            let len60 = l59;
                                                            let bytes60 = _rt::Vec::from_raw_parts(
                                                                l58.cast(),
                                                                len60,
                                                                len60,
                                                            );

                                                            _rt::string_lift(bytes60)
                                                        };
                                                        RpcError::NotFound(e64)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(
                                                            n, 3,
                                                            "invalid enum discriminant"
                                                        );
                                                        let e64 = {
                                                            let l61 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l62 = *ptr0.add(16).cast::<usize>();
                                                            let len63 = l62;
                                                            let bytes63 = _rt::Vec::from_raw_parts(
                                                                l61.cast(),
                                                                len63,
                                                                len63,
                                                            );

                                                            _rt::string_lift(bytes63)
                                                        };
                                                        RpcError::RemoteInternalError(e64)
                                                    }
                                                };

                                                v64
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod timeline {
    #[allow(dead_code)]
    pub mod event_processor {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum EventValue {
                StringValue(_rt::String),
                IntValue(i64),
                FloatValue(f64),
                BoolValue(bool),
            }
            impl ::core::fmt::Debug for EventValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        EventValue::StringValue(e) => {
                            f.debug_tuple("EventValue::StringValue").field(e).finish()
                        }
                        EventValue::IntValue(e) => {
                            f.debug_tuple("EventValue::IntValue").field(e).finish()
                        }
                        EventValue::FloatValue(e) => {
                            f.debug_tuple("EventValue::FloatValue").field(e).finish()
                        }
                        EventValue::BoolValue(e) => {
                            f.debug_tuple("EventValue::BoolValue").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct Event {
                pub time: u64,
                pub event: _rt::Vec<(_rt::String, EventValue)>,
            }
            impl ::core::fmt::Debug for Event {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Event")
                        .field("time", &self.time)
                        .field("event", &self.event)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct TimePeriod {
                pub t1: u64,
                pub t2: Option<u64>,
            }
            impl ::core::fmt::Debug for TimePeriod {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TimePeriod")
                        .field("t1", &self.t1)
                        .field("t2", &self.t2)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TimelineResultPoint {
                pub time_period: TimePeriod,
                pub value: EventValue,
            }
            impl ::core::fmt::Debug for TimelineResultPoint {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TimelineResultPoint")
                        .field("time-period", &self.time_period)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TimelineResult {
                pub results: _rt::Vec<TimelineResultPoint>,
            }
            impl ::core::fmt::Debug for TimelineResult {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TimelineResult").field("results", &self.results).finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum EventPredicateOp {
                Equal,
                GreaterThan,
                LessThan,
            }
            impl ::core::fmt::Debug for EventPredicateOp {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        EventPredicateOp::Equal => {
                            f.debug_tuple("EventPredicateOp::Equal").finish()
                        }
                        EventPredicateOp::GreaterThan => {
                            f.debug_tuple("EventPredicateOp::GreaterThan").finish()
                        }
                        EventPredicateOp::LessThan => {
                            f.debug_tuple("EventPredicateOp::LessThan").finish()
                        }
                    }
                }
            }

            impl EventPredicateOp {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> EventPredicateOp {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => EventPredicateOp::Equal,
                        1 => EventPredicateOp::GreaterThan,
                        2 => EventPredicateOp::LessThan,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct EventPredicate {
                pub col_name: _rt::String,
                pub value: EventValue,
                pub op: EventPredicateOp,
            }
            impl ::core::fmt::Debug for EventPredicate {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("EventPredicate")
                        .field("col-name", &self.col_name)
                        .field("value", &self.value)
                        .field("op", &self.op)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_latest_event_state(
                event_col_name: &str,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = event_col_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-latest-event-state"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<*mut u8>();
                                let l4 = *ptr1.add(8).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                _rt::string_lift(bytes5)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = *ptr1.add(4).cast::<*mut u8>();
                                let l7 = *ptr1.add(8).cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                _rt::string_lift(bytes8)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_tl_has_existed(
                event_predicate: &EventPredicate,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let EventPredicate { col_name: col_name0, value: value0, op: op0 } =
                        event_predicate;
                    let vec1 = col_name0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result3_0, result3_1, result3_2) = match value0 {
                        EventValue::StringValue(e) => {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();

                            (
                                0i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr2.cast_mut());
                                    t
                                },
                                len2,
                            )
                        }
                        EventValue::IntValue(e) => {
                            (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                        }
                        EventValue::FloatValue(e) => (
                            2i32,
                            ::core::mem::MaybeUninit::new((_rt::as_f64(e)).to_bits() as i64 as u64),
                            0usize,
                        ),
                        EventValue::BoolValue(e) => (
                            3i32,
                            ::core::mem::MaybeUninit::new(i64::from(match e {
                                true => 1,
                                false => 0,
                            }) as u64),
                            0usize,
                        ),
                    };
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-tl-has-existed"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr1.cast_mut(),
                        len1,
                        result3_0,
                        result3_1,
                        result3_2,
                        op0.clone() as i32,
                        ptr4,
                    );
                    let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                    match l5 {
                        0 => {
                            let e = {
                                let l6 = *ptr4.add(4).cast::<*mut u8>();
                                let l7 = *ptr4.add(8).cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                _rt::string_lift(bytes8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l9 = *ptr4.add(4).cast::<*mut u8>();
                                let l10 = *ptr4.add(8).cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                                _rt::string_lift(bytes11)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_tl_has_existed_within(
                event_predicate: &EventPredicate,
                time: u64,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let EventPredicate { col_name: col_name0, value: value0, op: op0 } =
                        event_predicate;
                    let vec1 = col_name0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result3_0, result3_1, result3_2) = match value0 {
                        EventValue::StringValue(e) => {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();

                            (
                                0i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr2.cast_mut());
                                    t
                                },
                                len2,
                            )
                        }
                        EventValue::IntValue(e) => {
                            (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                        }
                        EventValue::FloatValue(e) => (
                            2i32,
                            ::core::mem::MaybeUninit::new((_rt::as_f64(e)).to_bits() as i64 as u64),
                            0usize,
                        ),
                        EventValue::BoolValue(e) => (
                            3i32,
                            ::core::mem::MaybeUninit::new(i64::from(match e {
                                true => 1,
                                false => 0,
                            }) as u64),
                            0usize,
                        ),
                    };
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-tl-has-existed-within"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: i64,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: i64,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr1.cast_mut(),
                        len1,
                        result3_0,
                        result3_1,
                        result3_2,
                        op0.clone() as i32,
                        _rt::as_i64(&time),
                        ptr4,
                    );
                    let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                    match l5 {
                        0 => {
                            let e = {
                                let l6 = *ptr4.add(4).cast::<*mut u8>();
                                let l7 = *ptr4.add(8).cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                _rt::string_lift(bytes8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l9 = *ptr4.add(4).cast::<*mut u8>();
                                let l10 = *ptr4.add(8).cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                                _rt::string_lift(bytes11)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn add_event(event: &Event) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let Event { time: time0, event: event0 } = event;
                    let vec4 = event0;
                    let len4 = vec4.len();
                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(vec4.len() * 24, 8);
                    let result4 = if layout4.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout4);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec4.into_iter().enumerate() {
                        let base = result4.add(i * 24);
                        {
                            let (t1_0, t1_1) = e;
                            let vec2 = t1_0;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base.add(4).cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                            match t1_1 {
                                EventValue::StringValue(e) => {
                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec3 = e;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    *base.add(20).cast::<usize>() = len3;
                                    *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                EventValue::IntValue(e) => {
                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                    *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                }
                                EventValue::FloatValue(e) => {
                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                    *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                }
                                EventValue::BoolValue(e) => {
                                    *base.add(8).cast::<u8>() = (3i32) as u8;
                                    *base.add(16).cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    })
                                        as u8;
                                }
                            }
                        }
                    }
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "add-event"]
                        fn wit_import(_: i64, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(time0), result4, len4, ptr5);
                    let l6 = i32::from(*ptr5.add(0).cast::<u8>());
                    if layout4.size() != 0 {
                        _rt::alloc::dealloc(result4.cast(), layout4);
                    }
                    match l6 {
                        0 => {
                            let e = {
                                let l7 = *ptr5.add(4).cast::<*mut u8>();
                                let l8 = *ptr5.add(8).cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                _rt::string_lift(bytes9)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l10 = *ptr5.add(4).cast::<*mut u8>();
                                let l11 = *ptr5.add(8).cast::<usize>();
                                let len12 = l11;
                                let bytes12 = _rt::Vec::from_raw_parts(l10.cast(), len12, len12);

                                _rt::string_lift(bytes12)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn latest_event_to_state(t1: u64) -> Result<TimelineResult, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "latest-event-to-state"]
                        fn wit_import(_: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&t1), ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<*mut u8>();
                                let l3 = *ptr0.add(8).cast::<usize>();
                                let base15 = l2;
                                let len15 = l3;
                                let mut result15 = _rt::Vec::with_capacity(len15);
                                for i in 0..len15 {
                                    let base = base15.add(i * 40);
                                    let e15 = {
                                        let l4 = *base.add(0).cast::<i64>();
                                        let l5 = i32::from(*base.add(8).cast::<u8>());
                                        let l7 = i32::from(*base.add(24).cast::<u8>());
                                        let v14 = match l7 {
                                            0 => {
                                                let e14 = {
                                                    let l8 = *base.add(32).cast::<*mut u8>();
                                                    let l9 = *base.add(36).cast::<usize>();
                                                    let len10 = l9;
                                                    let bytes10 = _rt::Vec::from_raw_parts(
                                                        l8.cast(),
                                                        len10,
                                                        len10,
                                                    );

                                                    _rt::string_lift(bytes10)
                                                };
                                                EventValue::StringValue(e14)
                                            }
                                            1 => {
                                                let e14 = {
                                                    let l11 = *base.add(32).cast::<i64>();

                                                    l11
                                                };
                                                EventValue::IntValue(e14)
                                            }
                                            2 => {
                                                let e14 = {
                                                    let l12 = *base.add(32).cast::<f64>();

                                                    l12
                                                };
                                                EventValue::FloatValue(e14)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                let e14 = {
                                                    let l13 = i32::from(*base.add(32).cast::<u8>());

                                                    _rt::bool_lift(l13 as u8)
                                                };
                                                EventValue::BoolValue(e14)
                                            }
                                        };

                                        TimelineResultPoint {
                                            time_period: TimePeriod {
                                                t1: l4 as u64,
                                                t2: match l5 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l6 = *base.add(16).cast::<i64>();

                                                            l6 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            value: v14,
                                        }
                                    };
                                    result15.push(e15);
                                }
                                _rt::cabi_dealloc(base15, len15 * 40, 8);

                                TimelineResult { results: result15 }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l16 = *ptr0.add(4).cast::<*mut u8>();
                                let l17 = *ptr0.add(8).cast::<usize>();
                                let len18 = l17;
                                let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                _rt::string_lift(bytes18)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn tl_has_existed(t1: u64) -> Result<TimelineResult, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "tl-has-existed"]
                        fn wit_import(_: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&t1), ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<*mut u8>();
                                let l3 = *ptr0.add(8).cast::<usize>();
                                let base15 = l2;
                                let len15 = l3;
                                let mut result15 = _rt::Vec::with_capacity(len15);
                                for i in 0..len15 {
                                    let base = base15.add(i * 40);
                                    let e15 = {
                                        let l4 = *base.add(0).cast::<i64>();
                                        let l5 = i32::from(*base.add(8).cast::<u8>());
                                        let l7 = i32::from(*base.add(24).cast::<u8>());
                                        let v14 = match l7 {
                                            0 => {
                                                let e14 = {
                                                    let l8 = *base.add(32).cast::<*mut u8>();
                                                    let l9 = *base.add(36).cast::<usize>();
                                                    let len10 = l9;
                                                    let bytes10 = _rt::Vec::from_raw_parts(
                                                        l8.cast(),
                                                        len10,
                                                        len10,
                                                    );

                                                    _rt::string_lift(bytes10)
                                                };
                                                EventValue::StringValue(e14)
                                            }
                                            1 => {
                                                let e14 = {
                                                    let l11 = *base.add(32).cast::<i64>();

                                                    l11
                                                };
                                                EventValue::IntValue(e14)
                                            }
                                            2 => {
                                                let e14 = {
                                                    let l12 = *base.add(32).cast::<f64>();

                                                    l12
                                                };
                                                EventValue::FloatValue(e14)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                let e14 = {
                                                    let l13 = i32::from(*base.add(32).cast::<u8>());

                                                    _rt::bool_lift(l13 as u8)
                                                };
                                                EventValue::BoolValue(e14)
                                            }
                                        };

                                        TimelineResultPoint {
                                            time_period: TimePeriod {
                                                t1: l4 as u64,
                                                t2: match l5 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l6 = *base.add(16).cast::<i64>();

                                                            l6 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            value: v14,
                                        }
                                    };
                                    result15.push(e15);
                                }
                                _rt::cabi_dealloc(base15, len15 * 40, 8);

                                TimelineResult { results: result15 }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l16 = *ptr0.add(4).cast::<*mut u8>();
                                let l17 = *ptr0.add(8).cast::<usize>();
                                let len18 = l17;
                                let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                _rt::string_lift(bytes18)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn tl_has_existed_within(t1: u64) -> Result<TimelineResult, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "tl-has-existed-within"]
                        fn wit_import(_: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&t1), ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<*mut u8>();
                                let l3 = *ptr0.add(8).cast::<usize>();
                                let base15 = l2;
                                let len15 = l3;
                                let mut result15 = _rt::Vec::with_capacity(len15);
                                for i in 0..len15 {
                                    let base = base15.add(i * 40);
                                    let e15 = {
                                        let l4 = *base.add(0).cast::<i64>();
                                        let l5 = i32::from(*base.add(8).cast::<u8>());
                                        let l7 = i32::from(*base.add(24).cast::<u8>());
                                        let v14 = match l7 {
                                            0 => {
                                                let e14 = {
                                                    let l8 = *base.add(32).cast::<*mut u8>();
                                                    let l9 = *base.add(36).cast::<usize>();
                                                    let len10 = l9;
                                                    let bytes10 = _rt::Vec::from_raw_parts(
                                                        l8.cast(),
                                                        len10,
                                                        len10,
                                                    );

                                                    _rt::string_lift(bytes10)
                                                };
                                                EventValue::StringValue(e14)
                                            }
                                            1 => {
                                                let e14 = {
                                                    let l11 = *base.add(32).cast::<i64>();

                                                    l11
                                                };
                                                EventValue::IntValue(e14)
                                            }
                                            2 => {
                                                let e14 = {
                                                    let l12 = *base.add(32).cast::<f64>();

                                                    l12
                                                };
                                                EventValue::FloatValue(e14)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                let e14 = {
                                                    let l13 = i32::from(*base.add(32).cast::<u8>());

                                                    _rt::bool_lift(l13 as u8)
                                                };
                                                EventValue::BoolValue(e14)
                                            }
                                        };

                                        TimelineResultPoint {
                                            time_period: TimePeriod {
                                                t1: l4 as u64,
                                                t2: match l5 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l6 = *base.add(16).cast::<i64>();

                                                            l6 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            value: v14,
                                        }
                                    };
                                    result15.push(e15);
                                }
                                _rt::cabi_dealloc(base15, len15 * 40, 8);

                                TimelineResult { results: result15 }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l16 = *ptr0.add(4).cast::<*mut u8>();
                                let l17 = *ptr0.add(8).cast::<usize>();
                                let len18 = l17;
                                let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                _rt::string_lift(bytes18)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod event_processor_stub {
        #[allow(dead_code, clippy::all)]
        pub mod stub_event_processor {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type GolemRpcUri = super::super::super::golem::rpc::types::Uri;
            pub type WasiIoPollable = super::super::super::wasi::io::poll::Pollable;
            pub type Event = super::super::super::timeline::event_processor::api::Event;
            pub type TimelineResult =
                super::super::super::timeline::event_processor::api::TimelineResult;
            pub type EventPredicate =
                super::super::super::timeline::event_processor::api::EventPredicate;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInitializeLatestEventStateResult {
                handle: _rt::Resource<FutureInitializeLatestEventStateResult>,
            }

            impl FutureInitializeLatestEventStateResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureInitializeLatestEventStateResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-initialize-latest-event-state-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInitializeTlHasExistedResult {
                handle: _rt::Resource<FutureInitializeTlHasExistedResult>,
            }

            impl FutureInitializeTlHasExistedResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureInitializeTlHasExistedResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-initialize-tl-has-existed-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInitializeTlHasExistedWithinResult {
                handle: _rt::Resource<FutureInitializeTlHasExistedWithinResult>,
            }

            impl FutureInitializeTlHasExistedWithinResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureInitializeTlHasExistedWithinResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-initialize-tl-has-existed-within-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureAddEventResult {
                handle: _rt::Resource<FutureAddEventResult>,
            }

            impl FutureAddEventResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureAddEventResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-add-event-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureLatestEventToStateResult {
                handle: _rt::Resource<FutureLatestEventToStateResult>,
            }

            impl FutureLatestEventToStateResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureLatestEventToStateResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-latest-event-to-state-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureTlHasExistedResult {
                handle: _rt::Resource<FutureTlHasExistedResult>,
            }

            impl FutureTlHasExistedResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureTlHasExistedResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-tl-has-existed-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureTlHasExistedWithinResult {
                handle: _rt::Resource<FutureTlHasExistedWithinResult>,
            }

            impl FutureTlHasExistedWithinResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureTlHasExistedWithinResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-tl-has-existed-within-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Api {
                handle: _rt::Resource<Api>,
            }

            impl Api {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Api {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]api"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl FutureInitializeLatestEventStateResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-latest-event-state-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInitializeLatestEventStateResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<_rt::String, _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-latest-event-state-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                                _rt::string_lift(bytes5)
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureInitializeTlHasExistedResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-tl-has-existed-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInitializeTlHasExistedResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<_rt::String, _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-tl-has-existed-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                                _rt::string_lift(bytes5)
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureInitializeTlHasExistedWithinResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-tl-has-existed-within-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInitializeTlHasExistedWithinResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<_rt::String, _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-tl-has-existed-within-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                                _rt::string_lift(bytes5)
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureAddEventResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-add-event-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureAddEventResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<_rt::String, _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-add-event-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                                _rt::string_lift(bytes5)
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureLatestEventToStateResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-latest-event-to-state-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureLatestEventToStateResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<TimelineResult, _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-latest-event-to-state-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let base16 = l3;
                                                let len16 = l4;
                                                let mut result16 = _rt::Vec::with_capacity(len16);
                                                for i in 0..len16 {
                                                    let base = base16.add(i * 40);
                                                    let e16 = {
                                                        let l5 = *base.add(0).cast::<i64>();
                                                        let l6 =
                                                            i32::from(*base.add(8).cast::<u8>());
                                                        let l8 =
                                                            i32::from(*base.add(24).cast::<u8>());
                                                        use super::super::super::timeline::event_processor::api::EventValue as V15;
                                                        let v15 = match l8 {
                                                            0 => {
                                                                let e15 = {
                                                                    let l9 = *base
                                                                        .add(32)
                                                                        .cast::<*mut u8>();
                                                                    let l10 = *base
                                                                        .add(36)
                                                                        .cast::<usize>();
                                                                    let len11 = l10;
                                                                    let bytes11 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l9.cast(),
                                                                            len11,
                                                                            len11,
                                                                        );

                                                                    _rt::string_lift(bytes11)
                                                                };
                                                                V15::StringValue(e15)
                                                            }
                                                            1 => {
                                                                let e15 = {
                                                                    let l12 =
                                                                        *base.add(32).cast::<i64>();

                                                                    l12
                                                                };
                                                                V15::IntValue(e15)
                                                            }
                                                            2 => {
                                                                let e15 = {
                                                                    let l13 =
                                                                        *base.add(32).cast::<f64>();

                                                                    l13
                                                                };
                                                                V15::FloatValue(e15)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(
                                                                    n, 3,
                                                                    "invalid enum discriminant"
                                                                );
                                                                let e15 = {
                                                                    let l14 = i32::from(
                                                                        *base.add(32).cast::<u8>(),
                                                                    );

                                                                    _rt::bool_lift(l14 as u8)
                                                                };
                                                                V15::BoolValue(e15)
                                                            }
                                                        };

                                                        super::super::super::timeline::event_processor::api::TimelineResultPoint{
                                                            time_period: super::super::super::timeline::event_processor::api::TimePeriod{
                                                              t1: l5 as u64,
                                                              t2: match l6 {
                                                                0 => None,
                                                                1 => {
                                                                  let e = {
                                                                    let l7 = *base.add(16).cast::<i64>();

                                                                    l7 as u64
                                                                  };
                                                                  Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                              },
                                                            },
                                                            value: v15,
                                                          }
                                                    };
                                                    result16.push(e16);
                                                }
                                                _rt::cabi_dealloc(base16, len16 * 40, 8);

                                                super::super::super::timeline::event_processor::api::TimelineResult{
                                                        results: result16,
                                                      }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l17 = *ptr0.add(8).cast::<*mut u8>();
                                                let l18 = *ptr0.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );

                                                _rt::string_lift(bytes19)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureTlHasExistedResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-tl-has-existed-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureTlHasExistedResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<TimelineResult, _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-tl-has-existed-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let base16 = l3;
                                                let len16 = l4;
                                                let mut result16 = _rt::Vec::with_capacity(len16);
                                                for i in 0..len16 {
                                                    let base = base16.add(i * 40);
                                                    let e16 = {
                                                        let l5 = *base.add(0).cast::<i64>();
                                                        let l6 =
                                                            i32::from(*base.add(8).cast::<u8>());
                                                        let l8 =
                                                            i32::from(*base.add(24).cast::<u8>());
                                                        use super::super::super::timeline::event_processor::api::EventValue as V15;
                                                        let v15 = match l8 {
                                                            0 => {
                                                                let e15 = {
                                                                    let l9 = *base
                                                                        .add(32)
                                                                        .cast::<*mut u8>();
                                                                    let l10 = *base
                                                                        .add(36)
                                                                        .cast::<usize>();
                                                                    let len11 = l10;
                                                                    let bytes11 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l9.cast(),
                                                                            len11,
                                                                            len11,
                                                                        );

                                                                    _rt::string_lift(bytes11)
                                                                };
                                                                V15::StringValue(e15)
                                                            }
                                                            1 => {
                                                                let e15 = {
                                                                    let l12 =
                                                                        *base.add(32).cast::<i64>();

                                                                    l12
                                                                };
                                                                V15::IntValue(e15)
                                                            }
                                                            2 => {
                                                                let e15 = {
                                                                    let l13 =
                                                                        *base.add(32).cast::<f64>();

                                                                    l13
                                                                };
                                                                V15::FloatValue(e15)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(
                                                                    n, 3,
                                                                    "invalid enum discriminant"
                                                                );
                                                                let e15 = {
                                                                    let l14 = i32::from(
                                                                        *base.add(32).cast::<u8>(),
                                                                    );

                                                                    _rt::bool_lift(l14 as u8)
                                                                };
                                                                V15::BoolValue(e15)
                                                            }
                                                        };

                                                        super::super::super::timeline::event_processor::api::TimelineResultPoint{
                                                            time_period: super::super::super::timeline::event_processor::api::TimePeriod{
                                                              t1: l5 as u64,
                                                              t2: match l6 {
                                                                0 => None,
                                                                1 => {
                                                                  let e = {
                                                                    let l7 = *base.add(16).cast::<i64>();

                                                                    l7 as u64
                                                                  };
                                                                  Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                              },
                                                            },
                                                            value: v15,
                                                          }
                                                    };
                                                    result16.push(e16);
                                                }
                                                _rt::cabi_dealloc(base16, len16 * 40, 8);

                                                super::super::super::timeline::event_processor::api::TimelineResult{
                                                        results: result16,
                                                      }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l17 = *ptr0.add(8).cast::<*mut u8>();
                                                let l18 = *ptr0.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );

                                                _rt::string_lift(bytes19)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureTlHasExistedWithinResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-tl-has-existed-within-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureTlHasExistedWithinResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<TimelineResult, _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-tl-has-existed-within-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let base16 = l3;
                                                let len16 = l4;
                                                let mut result16 = _rt::Vec::with_capacity(len16);
                                                for i in 0..len16 {
                                                    let base = base16.add(i * 40);
                                                    let e16 = {
                                                        let l5 = *base.add(0).cast::<i64>();
                                                        let l6 =
                                                            i32::from(*base.add(8).cast::<u8>());
                                                        let l8 =
                                                            i32::from(*base.add(24).cast::<u8>());
                                                        use super::super::super::timeline::event_processor::api::EventValue as V15;
                                                        let v15 = match l8 {
                                                            0 => {
                                                                let e15 = {
                                                                    let l9 = *base
                                                                        .add(32)
                                                                        .cast::<*mut u8>();
                                                                    let l10 = *base
                                                                        .add(36)
                                                                        .cast::<usize>();
                                                                    let len11 = l10;
                                                                    let bytes11 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l9.cast(),
                                                                            len11,
                                                                            len11,
                                                                        );

                                                                    _rt::string_lift(bytes11)
                                                                };
                                                                V15::StringValue(e15)
                                                            }
                                                            1 => {
                                                                let e15 = {
                                                                    let l12 =
                                                                        *base.add(32).cast::<i64>();

                                                                    l12
                                                                };
                                                                V15::IntValue(e15)
                                                            }
                                                            2 => {
                                                                let e15 = {
                                                                    let l13 =
                                                                        *base.add(32).cast::<f64>();

                                                                    l13
                                                                };
                                                                V15::FloatValue(e15)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(
                                                                    n, 3,
                                                                    "invalid enum discriminant"
                                                                );
                                                                let e15 = {
                                                                    let l14 = i32::from(
                                                                        *base.add(32).cast::<u8>(),
                                                                    );

                                                                    _rt::bool_lift(l14 as u8)
                                                                };
                                                                V15::BoolValue(e15)
                                                            }
                                                        };

                                                        super::super::super::timeline::event_processor::api::TimelineResultPoint{
                                                            time_period: super::super::super::timeline::event_processor::api::TimePeriod{
                                                              t1: l5 as u64,
                                                              t2: match l6 {
                                                                0 => None,
                                                                1 => {
                                                                  let e = {
                                                                    let l7 = *base.add(16).cast::<i64>();

                                                                    l7 as u64
                                                                  };
                                                                  Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                              },
                                                            },
                                                            value: v15,
                                                          }
                                                    };
                                                    result16.push(e16);
                                                }
                                                _rt::cabi_dealloc(base16, len16 * 40, 8);

                                                super::super::super::timeline::event_processor::api::TimelineResult{
                                                        results: result16,
                                                      }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l17 = *ptr0.add(8).cast::<*mut u8>();
                                                let l18 = *ptr0.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );

                                                _rt::string_lift(bytes19)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(location: &GolemRpcUri) -> Self {
                    unsafe {
                        let super::super::super::golem::rpc::types::Uri { value: value0 } =
                            location;
                        let vec1 = value0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[constructor]api"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr1.cast_mut(), len1);
                        Api::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_latest_event_state(
                    &self,
                    event_col_name: &str,
                ) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let vec0 = event_col_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-latest-event-state"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                    _rt::string_lift(bytes5)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = *ptr1.add(4).cast::<*mut u8>();
                                    let l7 = *ptr1.add(8).cast::<usize>();
                                    let len8 = l7;
                                    let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                    _rt::string_lift(bytes8)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_latest_event_state(
                    &self,
                    event_col_name: &str,
                ) -> FutureInitializeLatestEventStateResult {
                    unsafe {
                        let vec0 = event_col_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.initialize-latest-event-state"]
                            fn wit_import(_: i32, _: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, ptr0.cast_mut(), len0);
                        FutureInitializeLatestEventStateResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_tl_has_existed(
                    &self,
                    event_predicate: &EventPredicate,
                ) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let super::super::super::timeline::event_processor::api::EventPredicate {
                            col_name: col_name0,
                            value: value0,
                            op: op0,
                        } = event_predicate;
                        let vec1 = col_name0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        use super::super::super::timeline::event_processor::api::EventValue as V3;
                        let (result4_0, result4_1, result4_2) = match value0 {
                            V3::StringValue(e) => {
                                let vec2 = e;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();

                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr2.cast_mut());
                                        t
                                    },
                                    len2,
                                )
                            }
                            V3::IntValue(e) => {
                                (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                            }
                            V3::FloatValue(e) => (
                                2i32,
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(e)).to_bits() as i64 as u64
                                ),
                                0usize,
                            ),
                            V3::BoolValue(e) => (
                                3i32,
                                ::core::mem::MaybeUninit::new(i64::from(match e {
                                    true => 1,
                                    false => 0,
                                })
                                    as u64),
                                0usize,
                            ),
                        };
                        let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-tl-has-existed"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            result4_0,
                            result4_1,
                            result4_2,
                            op0.clone() as i32,
                            ptr5,
                        );
                        let l6 = i32::from(*ptr5.add(0).cast::<u8>());
                        match l6 {
                            0 => {
                                let e = {
                                    let l7 = *ptr5.add(4).cast::<*mut u8>();
                                    let l8 = *ptr5.add(8).cast::<usize>();
                                    let len9 = l8;
                                    let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                    _rt::string_lift(bytes9)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l10 = *ptr5.add(4).cast::<*mut u8>();
                                    let l11 = *ptr5.add(8).cast::<usize>();
                                    let len12 = l11;
                                    let bytes12 =
                                        _rt::Vec::from_raw_parts(l10.cast(), len12, len12);

                                    _rt::string_lift(bytes12)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_tl_has_existed(
                    &self,
                    event_predicate: &EventPredicate,
                ) -> FutureInitializeTlHasExistedResult {
                    unsafe {
                        let super::super::super::timeline::event_processor::api::EventPredicate {
                            col_name: col_name0,
                            value: value0,
                            op: op0,
                        } = event_predicate;
                        let vec1 = col_name0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        use super::super::super::timeline::event_processor::api::EventValue as V3;
                        let (result4_0, result4_1, result4_2) = match value0 {
                            V3::StringValue(e) => {
                                let vec2 = e;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();

                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr2.cast_mut());
                                        t
                                    },
                                    len2,
                                )
                            }
                            V3::IntValue(e) => {
                                (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                            }
                            V3::FloatValue(e) => (
                                2i32,
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(e)).to_bits() as i64 as u64
                                ),
                                0usize,
                            ),
                            V3::BoolValue(e) => (
                                3i32,
                                ::core::mem::MaybeUninit::new(i64::from(match e {
                                    true => 1,
                                    false => 0,
                                })
                                    as u64),
                                0usize,
                            ),
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.initialize-tl-has-existed"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: i32,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            result4_0,
                            result4_1,
                            result4_2,
                            op0.clone() as i32,
                        );
                        FutureInitializeTlHasExistedResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_tl_has_existed_within(
                    &self,
                    event_predicate: &EventPredicate,
                    time: u64,
                ) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let super::super::super::timeline::event_processor::api::EventPredicate {
                            col_name: col_name0,
                            value: value0,
                            op: op0,
                        } = event_predicate;
                        let vec1 = col_name0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        use super::super::super::timeline::event_processor::api::EventValue as V3;
                        let (result4_0, result4_1, result4_2) = match value0 {
                            V3::StringValue(e) => {
                                let vec2 = e;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();

                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr2.cast_mut());
                                        t
                                    },
                                    len2,
                                )
                            }
                            V3::IntValue(e) => {
                                (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                            }
                            V3::FloatValue(e) => (
                                2i32,
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(e)).to_bits() as i64 as u64
                                ),
                                0usize,
                            ),
                            V3::BoolValue(e) => (
                                3i32,
                                ::core::mem::MaybeUninit::new(i64::from(match e {
                                    true => 1,
                                    false => 0,
                                })
                                    as u64),
                                0usize,
                            ),
                        };
                        let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-tl-has-existed-within"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: i32,
                                _: i64,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: i64,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            result4_0,
                            result4_1,
                            result4_2,
                            op0.clone() as i32,
                            _rt::as_i64(&time),
                            ptr5,
                        );
                        let l6 = i32::from(*ptr5.add(0).cast::<u8>());
                        match l6 {
                            0 => {
                                let e = {
                                    let l7 = *ptr5.add(4).cast::<*mut u8>();
                                    let l8 = *ptr5.add(8).cast::<usize>();
                                    let len9 = l8;
                                    let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                    _rt::string_lift(bytes9)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l10 = *ptr5.add(4).cast::<*mut u8>();
                                    let l11 = *ptr5.add(8).cast::<usize>();
                                    let len12 = l11;
                                    let bytes12 =
                                        _rt::Vec::from_raw_parts(l10.cast(), len12, len12);

                                    _rt::string_lift(bytes12)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_tl_has_existed_within(
                    &self,
                    event_predicate: &EventPredicate,
                    time: u64,
                ) -> FutureInitializeTlHasExistedWithinResult {
                    unsafe {
                        let super::super::super::timeline::event_processor::api::EventPredicate {
                            col_name: col_name0,
                            value: value0,
                            op: op0,
                        } = event_predicate;
                        let vec1 = col_name0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        use super::super::super::timeline::event_processor::api::EventValue as V3;
                        let (result4_0, result4_1, result4_2) = match value0 {
                            V3::StringValue(e) => {
                                let vec2 = e;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();

                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr2.cast_mut());
                                        t
                                    },
                                    len2,
                                )
                            }
                            V3::IntValue(e) => {
                                (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                            }
                            V3::FloatValue(e) => (
                                2i32,
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(e)).to_bits() as i64 as u64
                                ),
                                0usize,
                            ),
                            V3::BoolValue(e) => (
                                3i32,
                                ::core::mem::MaybeUninit::new(i64::from(match e {
                                    true => 1,
                                    false => 0,
                                })
                                    as u64),
                                0usize,
                            ),
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.initialize-tl-has-existed-within"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: i32,
                                _: i64,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: i64,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            result4_0,
                            result4_1,
                            result4_2,
                            op0.clone() as i32,
                            _rt::as_i64(&time),
                        );
                        FutureInitializeTlHasExistedWithinResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_add_event(
                    &self,
                    event: &Event,
                ) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let super::super::super::timeline::event_processor::api::Event {
                            time: time0,
                            event: event0,
                        } = event;
                        let vec5 = event0;
                        let len5 = vec5.len();
                        let layout5 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec5.len() * 24, 8);
                        let result5 = if layout5.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout5);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec5.into_iter().enumerate() {
                            let base = result5.add(i * 24);
                            {
                                let (t1_0, t1_1) = e;
                                let vec2 = t1_0;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(4).cast::<usize>() = len2;
                                *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                                use super::super::super::timeline::event_processor::api::EventValue as V4;
                                match t1_1 {
                                    V4::StringValue(e) => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                        let vec3 = e;
                                        let ptr3 = vec3.as_ptr().cast::<u8>();
                                        let len3 = vec3.len();
                                        *base.add(20).cast::<usize>() = len3;
                                        *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                    }
                                    V4::IntValue(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V4::FloatValue(e) => {
                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    V4::BoolValue(e) => {
                                        *base.add(8).cast::<u8>() = (3i32) as u8;
                                        *base.add(16).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        })
                                            as u8;
                                    }
                                }
                            }
                        }
                        let ptr6 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-add-event"]
                            fn wit_import(_: i32, _: i64, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(time0), result5, len5, ptr6);
                        let l7 = i32::from(*ptr6.add(0).cast::<u8>());
                        if layout5.size() != 0 {
                            _rt::alloc::dealloc(result5.cast(), layout5);
                        }
                        match l7 {
                            0 => {
                                let e = {
                                    let l8 = *ptr6.add(4).cast::<*mut u8>();
                                    let l9 = *ptr6.add(8).cast::<usize>();
                                    let len10 = l9;
                                    let bytes10 = _rt::Vec::from_raw_parts(l8.cast(), len10, len10);

                                    _rt::string_lift(bytes10)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l11 = *ptr6.add(4).cast::<*mut u8>();
                                    let l12 = *ptr6.add(8).cast::<usize>();
                                    let len13 = l12;
                                    let bytes13 =
                                        _rt::Vec::from_raw_parts(l11.cast(), len13, len13);

                                    _rt::string_lift(bytes13)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_event(&self, event: &Event) -> FutureAddEventResult {
                    unsafe {
                        let super::super::super::timeline::event_processor::api::Event {
                            time: time0,
                            event: event0,
                        } = event;
                        let vec5 = event0;
                        let len5 = vec5.len();
                        let layout5 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec5.len() * 24, 8);
                        let result5 = if layout5.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout5);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec5.into_iter().enumerate() {
                            let base = result5.add(i * 24);
                            {
                                let (t1_0, t1_1) = e;
                                let vec2 = t1_0;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(4).cast::<usize>() = len2;
                                *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                                use super::super::super::timeline::event_processor::api::EventValue as V4;
                                match t1_1 {
                                    V4::StringValue(e) => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                        let vec3 = e;
                                        let ptr3 = vec3.as_ptr().cast::<u8>();
                                        let len3 = vec3.len();
                                        *base.add(20).cast::<usize>() = len3;
                                        *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                    }
                                    V4::IntValue(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V4::FloatValue(e) => {
                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    V4::BoolValue(e) => {
                                        *base.add(8).cast::<u8>() = (3i32) as u8;
                                        *base.add(16).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        })
                                            as u8;
                                    }
                                }
                            }
                        }

                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.add-event"]
                            fn wit_import(_: i32, _: i64, _: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret =
                            wit_import((self).handle() as i32, _rt::as_i64(time0), result5, len5);
                        if layout5.size() != 0 {
                            _rt::alloc::dealloc(result5.cast(), layout5);
                        }
                        FutureAddEventResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_latest_event_to_state(
                    &self,
                    t1: u64,
                ) -> Result<TimelineResult, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-latest-event-to-state"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&t1), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base15 = l2;
                                    let len15 = l3;
                                    let mut result15 = _rt::Vec::with_capacity(len15);
                                    for i in 0..len15 {
                                        let base = base15.add(i * 40);
                                        let e15 = {
                                            let l4 = *base.add(0).cast::<i64>();
                                            let l5 = i32::from(*base.add(8).cast::<u8>());
                                            let l7 = i32::from(*base.add(24).cast::<u8>());
                                            use super::super::super::timeline::event_processor::api::EventValue as V14;
                                            let v14 = match l7 {
                                                0 => {
                                                    let e14 = {
                                                        let l8 = *base.add(32).cast::<*mut u8>();
                                                        let l9 = *base.add(36).cast::<usize>();
                                                        let len10 = l9;
                                                        let bytes10 = _rt::Vec::from_raw_parts(
                                                            l8.cast(),
                                                            len10,
                                                            len10,
                                                        );

                                                        _rt::string_lift(bytes10)
                                                    };
                                                    V14::StringValue(e14)
                                                }
                                                1 => {
                                                    let e14 = {
                                                        let l11 = *base.add(32).cast::<i64>();

                                                        l11
                                                    };
                                                    V14::IntValue(e14)
                                                }
                                                2 => {
                                                    let e14 = {
                                                        let l12 = *base.add(32).cast::<f64>();

                                                        l12
                                                    };
                                                    V14::FloatValue(e14)
                                                }
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 3,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e14 = {
                                                        let l13 =
                                                            i32::from(*base.add(32).cast::<u8>());

                                                        _rt::bool_lift(l13 as u8)
                                                    };
                                                    V14::BoolValue(e14)
                                                }
                                            };

                                            super::super::super::timeline::event_processor::api::TimelineResultPoint{
                                                      time_period: super::super::super::timeline::event_processor::api::TimePeriod{
                                                        t1: l4 as u64,
                                                        t2: match l5 {
                                                          0 => None,
                                                          1 => {
                                                            let e = {
                                                              let l6 = *base.add(16).cast::<i64>();

                                                              l6 as u64
                                                            };
                                                            Some(e)
                                                          }
                                                          _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                      },
                                                      value: v14,
                                                    }
                                        };
                                        result15.push(e15);
                                    }
                                    _rt::cabi_dealloc(base15, len15 * 40, 8);

                                    super::super::super::timeline::event_processor::api::TimelineResult{
                                                  results: result15,
                                                }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l16 = *ptr0.add(4).cast::<*mut u8>();
                                    let l17 = *ptr0.add(8).cast::<usize>();
                                    let len18 = l17;
                                    let bytes18 =
                                        _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                    _rt::string_lift(bytes18)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn latest_event_to_state(&self, t1: u64) -> FutureLatestEventToStateResult {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.latest-event-to-state"]
                            fn wit_import(_: i32, _: i64) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, _rt::as_i64(&t1));
                        FutureLatestEventToStateResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_tl_has_existed(
                    &self,
                    t1: u64,
                ) -> Result<TimelineResult, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-tl-has-existed"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&t1), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base15 = l2;
                                    let len15 = l3;
                                    let mut result15 = _rt::Vec::with_capacity(len15);
                                    for i in 0..len15 {
                                        let base = base15.add(i * 40);
                                        let e15 = {
                                            let l4 = *base.add(0).cast::<i64>();
                                            let l5 = i32::from(*base.add(8).cast::<u8>());
                                            let l7 = i32::from(*base.add(24).cast::<u8>());
                                            use super::super::super::timeline::event_processor::api::EventValue as V14;
                                            let v14 = match l7 {
                                                0 => {
                                                    let e14 = {
                                                        let l8 = *base.add(32).cast::<*mut u8>();
                                                        let l9 = *base.add(36).cast::<usize>();
                                                        let len10 = l9;
                                                        let bytes10 = _rt::Vec::from_raw_parts(
                                                            l8.cast(),
                                                            len10,
                                                            len10,
                                                        );

                                                        _rt::string_lift(bytes10)
                                                    };
                                                    V14::StringValue(e14)
                                                }
                                                1 => {
                                                    let e14 = {
                                                        let l11 = *base.add(32).cast::<i64>();

                                                        l11
                                                    };
                                                    V14::IntValue(e14)
                                                }
                                                2 => {
                                                    let e14 = {
                                                        let l12 = *base.add(32).cast::<f64>();

                                                        l12
                                                    };
                                                    V14::FloatValue(e14)
                                                }
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 3,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e14 = {
                                                        let l13 =
                                                            i32::from(*base.add(32).cast::<u8>());

                                                        _rt::bool_lift(l13 as u8)
                                                    };
                                                    V14::BoolValue(e14)
                                                }
                                            };

                                            super::super::super::timeline::event_processor::api::TimelineResultPoint{
                                                      time_period: super::super::super::timeline::event_processor::api::TimePeriod{
                                                        t1: l4 as u64,
                                                        t2: match l5 {
                                                          0 => None,
                                                          1 => {
                                                            let e = {
                                                              let l6 = *base.add(16).cast::<i64>();

                                                              l6 as u64
                                                            };
                                                            Some(e)
                                                          }
                                                          _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                      },
                                                      value: v14,
                                                    }
                                        };
                                        result15.push(e15);
                                    }
                                    _rt::cabi_dealloc(base15, len15 * 40, 8);

                                    super::super::super::timeline::event_processor::api::TimelineResult{
                                                  results: result15,
                                                }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l16 = *ptr0.add(4).cast::<*mut u8>();
                                    let l17 = *ptr0.add(8).cast::<usize>();
                                    let len18 = l17;
                                    let bytes18 =
                                        _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                    _rt::string_lift(bytes18)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn tl_has_existed(&self, t1: u64) -> FutureTlHasExistedResult {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.tl-has-existed"]
                            fn wit_import(_: i32, _: i64) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, _rt::as_i64(&t1));
                        FutureTlHasExistedResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_tl_has_existed_within(
                    &self,
                    t1: u64,
                ) -> Result<TimelineResult, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-tl-has-existed-within"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&t1), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base15 = l2;
                                    let len15 = l3;
                                    let mut result15 = _rt::Vec::with_capacity(len15);
                                    for i in 0..len15 {
                                        let base = base15.add(i * 40);
                                        let e15 = {
                                            let l4 = *base.add(0).cast::<i64>();
                                            let l5 = i32::from(*base.add(8).cast::<u8>());
                                            let l7 = i32::from(*base.add(24).cast::<u8>());
                                            use super::super::super::timeline::event_processor::api::EventValue as V14;
                                            let v14 = match l7 {
                                                0 => {
                                                    let e14 = {
                                                        let l8 = *base.add(32).cast::<*mut u8>();
                                                        let l9 = *base.add(36).cast::<usize>();
                                                        let len10 = l9;
                                                        let bytes10 = _rt::Vec::from_raw_parts(
                                                            l8.cast(),
                                                            len10,
                                                            len10,
                                                        );

                                                        _rt::string_lift(bytes10)
                                                    };
                                                    V14::StringValue(e14)
                                                }
                                                1 => {
                                                    let e14 = {
                                                        let l11 = *base.add(32).cast::<i64>();

                                                        l11
                                                    };
                                                    V14::IntValue(e14)
                                                }
                                                2 => {
                                                    let e14 = {
                                                        let l12 = *base.add(32).cast::<f64>();

                                                        l12
                                                    };
                                                    V14::FloatValue(e14)
                                                }
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 3,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e14 = {
                                                        let l13 =
                                                            i32::from(*base.add(32).cast::<u8>());

                                                        _rt::bool_lift(l13 as u8)
                                                    };
                                                    V14::BoolValue(e14)
                                                }
                                            };

                                            super::super::super::timeline::event_processor::api::TimelineResultPoint{
                                                      time_period: super::super::super::timeline::event_processor::api::TimePeriod{
                                                        t1: l4 as u64,
                                                        t2: match l5 {
                                                          0 => None,
                                                          1 => {
                                                            let e = {
                                                              let l6 = *base.add(16).cast::<i64>();

                                                              l6 as u64
                                                            };
                                                            Some(e)
                                                          }
                                                          _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                      },
                                                      value: v14,
                                                    }
                                        };
                                        result15.push(e15);
                                    }
                                    _rt::cabi_dealloc(base15, len15 * 40, 8);

                                    super::super::super::timeline::event_processor::api::TimelineResult{
                                                  results: result15,
                                                }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l16 = *ptr0.add(4).cast::<*mut u8>();
                                    let l17 = *ptr0.add(8).cast::<usize>();
                                    let len18 = l17;
                                    let bytes18 =
                                        _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                    _rt::string_lift(bytes18)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn tl_has_existed_within(&self, t1: u64) -> FutureTlHasExistedWithinResult {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:event-processor-stub/stub-event-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.tl-has-existed-within"]
                            fn wit_import(_: i32, _: i64) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, _rt::as_i64(&t1));
                        FutureTlHasExistedWithinResult::from_handle(ret as u32)
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod timeline_processor_stub {
        #[allow(dead_code, clippy::all)]
        pub mod stub_timeline_processor {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type GolemRpcUri = super::super::super::golem::rpc::types::Uri;
            pub type WasiIoPollable = super::super::super::wasi::io::poll::Pollable;
            pub type TimelineResultPoint =
                super::super::super::timeline::event_processor::api::TimelineResultPoint;
            #[derive(Clone)]
            pub enum EventValue {
                StringValue(_rt::String),
                IntValue(i64),
                FloatValue(f64),
                BoolValue(bool),
            }
            impl ::core::fmt::Debug for EventValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        EventValue::StringValue(e) => {
                            f.debug_tuple("EventValue::StringValue").field(e).finish()
                        }
                        EventValue::IntValue(e) => {
                            f.debug_tuple("EventValue::IntValue").field(e).finish()
                        }
                        EventValue::FloatValue(e) => {
                            f.debug_tuple("EventValue::FloatValue").field(e).finish()
                        }
                        EventValue::BoolValue(e) => {
                            f.debug_tuple("EventValue::BoolValue").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct TimelineResult {
                pub results: _rt::Vec<TimelineResultPoint>,
            }
            impl ::core::fmt::Debug for TimelineResult {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TimelineResult").field("results", &self.results).finish()
                }
            }
            #[derive(Clone)]
            pub struct TimelineResultWorker {
                pub worker_id: _rt::String,
                pub template_id: _rt::String,
            }
            impl ::core::fmt::Debug for TimelineResultWorker {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TimelineResultWorker")
                        .field("worker-id", &self.worker_id)
                        .field("template-id", &self.template_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum LeafTimelineNode {
                TlHasExisted(TimelineResultWorker),
                TlHasExistedWithin(TimelineResultWorker),
                TlLatestEventToState(TimelineResultWorker),
            }
            impl ::core::fmt::Debug for LeafTimelineNode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        LeafTimelineNode::TlHasExisted(e) => {
                            f.debug_tuple("LeafTimelineNode::TlHasExisted").field(e).finish()
                        }
                        LeafTimelineNode::TlHasExistedWithin(e) => {
                            f.debug_tuple("LeafTimelineNode::TlHasExistedWithin").field(e).finish()
                        }
                        LeafTimelineNode::TlLatestEventToState(e) => f
                            .debug_tuple("LeafTimelineNode::TlLatestEventToState")
                            .field(e)
                            .finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub enum DerivedTimelineNode {
                EqualTo(TimelineResultWorker),
                GreaterThan(TimelineResultWorker),
                GreaterThanOrEqualTo(TimelineResultWorker),
                LessThan(TimelineResultWorker),
                LessThanOrEqualTo(TimelineResultWorker),
                And(TimelineResultWorker),
                Or(TimelineResultWorker),
                Not(TimelineResultWorker),
            }
            impl ::core::fmt::Debug for DerivedTimelineNode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DerivedTimelineNode::EqualTo(e) => {
                            f.debug_tuple("DerivedTimelineNode::EqualTo").field(e).finish()
                        }
                        DerivedTimelineNode::GreaterThan(e) => {
                            f.debug_tuple("DerivedTimelineNode::GreaterThan").field(e).finish()
                        }
                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => f
                            .debug_tuple("DerivedTimelineNode::GreaterThanOrEqualTo")
                            .field(e)
                            .finish(),
                        DerivedTimelineNode::LessThan(e) => {
                            f.debug_tuple("DerivedTimelineNode::LessThan").field(e).finish()
                        }
                        DerivedTimelineNode::LessThanOrEqualTo(e) => f
                            .debug_tuple("DerivedTimelineNode::LessThanOrEqualTo")
                            .field(e)
                            .finish(),
                        DerivedTimelineNode::And(e) => {
                            f.debug_tuple("DerivedTimelineNode::And").field(e).finish()
                        }
                        DerivedTimelineNode::Or(e) => {
                            f.debug_tuple("DerivedTimelineNode::Or").field(e).finish()
                        }
                        DerivedTimelineNode::Not(e) => {
                            f.debug_tuple("DerivedTimelineNode::Not").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub enum TypedTimelineResultWorker {
                LeafTimeline(LeafTimelineNode),
                DerivedTimeline(DerivedTimelineNode),
            }
            impl ::core::fmt::Debug for TypedTimelineResultWorker {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        TypedTimelineResultWorker::LeafTimeline(e) => f
                            .debug_tuple("TypedTimelineResultWorker::LeafTimeline")
                            .field(e)
                            .finish(),
                        TypedTimelineResultWorker::DerivedTimeline(e) => f
                            .debug_tuple("TypedTimelineResultWorker::DerivedTimeline")
                            .field(e)
                            .finish(),
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInitializeEqualResult {
                handle: _rt::Resource<FutureInitializeEqualResult>,
            }

            impl FutureInitializeEqualResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureInitializeEqualResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-initialize-equal-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInitializeGreaterThanResult {
                handle: _rt::Resource<FutureInitializeGreaterThanResult>,
            }

            impl FutureInitializeGreaterThanResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureInitializeGreaterThanResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-initialize-greater-than-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInitializeGreaterThanOrEqualToResult {
                handle: _rt::Resource<FutureInitializeGreaterThanOrEqualToResult>,
            }

            impl FutureInitializeGreaterThanOrEqualToResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureInitializeGreaterThanOrEqualToResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-initialize-greater-than-or-equal-to-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInitializeLessThanResult {
                handle: _rt::Resource<FutureInitializeLessThanResult>,
            }

            impl FutureInitializeLessThanResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureInitializeLessThanResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-initialize-less-than-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInitializeLessThanOrEqualToResult {
                handle: _rt::Resource<FutureInitializeLessThanOrEqualToResult>,
            }

            impl FutureInitializeLessThanOrEqualToResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureInitializeLessThanOrEqualToResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-initialize-less-than-or-equal-to-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInitializeAndResult {
                handle: _rt::Resource<FutureInitializeAndResult>,
            }

            impl FutureInitializeAndResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureInitializeAndResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-initialize-and-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInitializeOrResult {
                handle: _rt::Resource<FutureInitializeOrResult>,
            }

            impl FutureInitializeOrResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureInitializeOrResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-initialize-or-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInitializeNotResult {
                handle: _rt::Resource<FutureInitializeNotResult>,
            }

            impl FutureInitializeNotResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureInitializeNotResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-initialize-not-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureGetTimelineResultResult {
                handle: _rt::Resource<FutureGetTimelineResultResult>,
            }

            impl FutureGetTimelineResultResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureGetTimelineResultResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-get-timeline-result-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Api {
                handle: _rt::Resource<Api>,
            }

            impl Api {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Api {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]api"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl FutureInitializeEqualResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-equal-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInitializeEqualResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<_rt::String, _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-equal-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                                _rt::string_lift(bytes5)
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureInitializeGreaterThanResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-greater-than-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInitializeGreaterThanResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<_rt::String, _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-greater-than-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                                _rt::string_lift(bytes5)
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureInitializeGreaterThanOrEqualToResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-greater-than-or-equal-to-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInitializeGreaterThanOrEqualToResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<_rt::String, _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-greater-than-or-equal-to-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                                _rt::string_lift(bytes5)
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureInitializeLessThanResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-less-than-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInitializeLessThanResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<_rt::String, _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-less-than-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                                _rt::string_lift(bytes5)
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureInitializeLessThanOrEqualToResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-less-than-or-equal-to-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInitializeLessThanOrEqualToResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<_rt::String, _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-less-than-or-equal-to-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                                _rt::string_lift(bytes5)
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureInitializeAndResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-and-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInitializeAndResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<_rt::String, _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-and-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                                _rt::string_lift(bytes5)
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureInitializeOrResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-or-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInitializeOrResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<_rt::String, _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-or-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                                _rt::string_lift(bytes5)
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureInitializeNotResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-not-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInitializeNotResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<_rt::String, _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-initialize-not-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 =
                                                    _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                                _rt::string_lift(bytes5)
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl FutureGetTimelineResultResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-get-timeline-result-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureGetTimelineResultResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<TimelineResult, _rt::String>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-get-timeline-result-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let base16 = l3;
                                                let len16 = l4;
                                                let mut result16 = _rt::Vec::with_capacity(len16);
                                                for i in 0..len16 {
                                                    let base = base16.add(i * 40);
                                                    let e16 = {
                                                        let l5 = *base.add(0).cast::<i64>();
                                                        let l6 =
                                                            i32::from(*base.add(8).cast::<u8>());
                                                        let l8 =
                                                            i32::from(*base.add(24).cast::<u8>());
                                                        use super::super::super::timeline::event_processor::api::EventValue as V15;
                                                        let v15 = match l8 {
                                                            0 => {
                                                                let e15 = {
                                                                    let l9 = *base
                                                                        .add(32)
                                                                        .cast::<*mut u8>();
                                                                    let l10 = *base
                                                                        .add(36)
                                                                        .cast::<usize>();
                                                                    let len11 = l10;
                                                                    let bytes11 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l9.cast(),
                                                                            len11,
                                                                            len11,
                                                                        );

                                                                    _rt::string_lift(bytes11)
                                                                };
                                                                V15::StringValue(e15)
                                                            }
                                                            1 => {
                                                                let e15 = {
                                                                    let l12 =
                                                                        *base.add(32).cast::<i64>();

                                                                    l12
                                                                };
                                                                V15::IntValue(e15)
                                                            }
                                                            2 => {
                                                                let e15 = {
                                                                    let l13 =
                                                                        *base.add(32).cast::<f64>();

                                                                    l13
                                                                };
                                                                V15::FloatValue(e15)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(
                                                                    n, 3,
                                                                    "invalid enum discriminant"
                                                                );
                                                                let e15 = {
                                                                    let l14 = i32::from(
                                                                        *base.add(32).cast::<u8>(),
                                                                    );

                                                                    _rt::bool_lift(l14 as u8)
                                                                };
                                                                V15::BoolValue(e15)
                                                            }
                                                        };

                                                        super::super::super::timeline::event_processor::api::TimelineResultPoint{
                                                            time_period: super::super::super::timeline::event_processor::api::TimePeriod{
                                                              t1: l5 as u64,
                                                              t2: match l6 {
                                                                0 => None,
                                                                1 => {
                                                                  let e = {
                                                                    let l7 = *base.add(16).cast::<i64>();

                                                                    l7 as u64
                                                                  };
                                                                  Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                              },
                                                            },
                                                            value: v15,
                                                          }
                                                    };
                                                    result16.push(e16);
                                                }
                                                _rt::cabi_dealloc(base16, len16 * 40, 8);

                                                TimelineResult { results: result16 }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l17 = *ptr0.add(8).cast::<*mut u8>();
                                                let l18 = *ptr0.add(12).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );

                                                _rt::string_lift(bytes19)
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(location: &GolemRpcUri) -> Self {
                    unsafe {
                        let super::super::super::golem::rpc::types::Uri { value: value0 } =
                            location;
                        let vec1 = value0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[constructor]api"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr1.cast_mut(), len1);
                        Api::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_equal(
                    &self,
                    child_worker: &TypedTimelineResultWorker,
                    event_value: &EventValue,
                ) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let (
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        ) = match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                        let (result37_0, result37_1, result37_2) = match event_value {
                            EventValue::StringValue(e) => {
                                let vec36 = e;
                                let ptr36 = vec36.as_ptr().cast::<u8>();
                                let len36 = vec36.len();

                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr36.cast_mut());
                                        t
                                    },
                                    len36,
                                )
                            }
                            EventValue::IntValue(e) => {
                                (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                            }
                            EventValue::FloatValue(e) => (
                                2i32,
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(e)).to_bits() as i64 as u64
                                ),
                                0usize,
                            ),
                            EventValue::BoolValue(e) => (
                                3i32,
                                ::core::mem::MaybeUninit::new(i64::from(match e {
                                    true => 1,
                                    false => 0,
                                })
                                    as u64),
                                0usize,
                            ),
                        };
                        let ptr38 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-equal"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                            result37_0,
                            result37_1,
                            result37_2,
                            ptr38,
                        );
                        let l39 = i32::from(*ptr38.add(0).cast::<u8>());
                        match l39 {
                            0 => {
                                let e = {
                                    let l40 = *ptr38.add(4).cast::<*mut u8>();
                                    let l41 = *ptr38.add(8).cast::<usize>();
                                    let len42 = l41;
                                    let bytes42 =
                                        _rt::Vec::from_raw_parts(l40.cast(), len42, len42);

                                    _rt::string_lift(bytes42)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l43 = *ptr38.add(4).cast::<*mut u8>();
                                    let l44 = *ptr38.add(8).cast::<usize>();
                                    let len45 = l44;
                                    let bytes45 =
                                        _rt::Vec::from_raw_parts(l43.cast(), len45, len45);

                                    _rt::string_lift(bytes45)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_equal(
                    &self,
                    child_worker: &TypedTimelineResultWorker,
                    event_value: &EventValue,
                ) -> FutureInitializeEqualResult {
                    unsafe {
                        let (
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        ) = match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                        let (result37_0, result37_1, result37_2) = match event_value {
                            EventValue::StringValue(e) => {
                                let vec36 = e;
                                let ptr36 = vec36.as_ptr().cast::<u8>();
                                let len36 = vec36.len();

                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr36.cast_mut());
                                        t
                                    },
                                    len36,
                                )
                            }
                            EventValue::IntValue(e) => {
                                (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                            }
                            EventValue::FloatValue(e) => (
                                2i32,
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(e)).to_bits() as i64 as u64
                                ),
                                0usize,
                            ),
                            EventValue::BoolValue(e) => (
                                3i32,
                                ::core::mem::MaybeUninit::new(i64::from(match e {
                                    true => 1,
                                    false => 0,
                                })
                                    as u64),
                                0usize,
                            ),
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.initialize-equal"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                            result37_0,
                            result37_1,
                            result37_2,
                        );
                        FutureInitializeEqualResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_greater_than(
                    &self,
                    child_worker: &TypedTimelineResultWorker,
                    event_value: &EventValue,
                ) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let (
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        ) = match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                        let (result37_0, result37_1, result37_2) = match event_value {
                            EventValue::StringValue(e) => {
                                let vec36 = e;
                                let ptr36 = vec36.as_ptr().cast::<u8>();
                                let len36 = vec36.len();

                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr36.cast_mut());
                                        t
                                    },
                                    len36,
                                )
                            }
                            EventValue::IntValue(e) => {
                                (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                            }
                            EventValue::FloatValue(e) => (
                                2i32,
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(e)).to_bits() as i64 as u64
                                ),
                                0usize,
                            ),
                            EventValue::BoolValue(e) => (
                                3i32,
                                ::core::mem::MaybeUninit::new(i64::from(match e {
                                    true => 1,
                                    false => 0,
                                })
                                    as u64),
                                0usize,
                            ),
                        };
                        let ptr38 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-greater-than"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                            result37_0,
                            result37_1,
                            result37_2,
                            ptr38,
                        );
                        let l39 = i32::from(*ptr38.add(0).cast::<u8>());
                        match l39 {
                            0 => {
                                let e = {
                                    let l40 = *ptr38.add(4).cast::<*mut u8>();
                                    let l41 = *ptr38.add(8).cast::<usize>();
                                    let len42 = l41;
                                    let bytes42 =
                                        _rt::Vec::from_raw_parts(l40.cast(), len42, len42);

                                    _rt::string_lift(bytes42)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l43 = *ptr38.add(4).cast::<*mut u8>();
                                    let l44 = *ptr38.add(8).cast::<usize>();
                                    let len45 = l44;
                                    let bytes45 =
                                        _rt::Vec::from_raw_parts(l43.cast(), len45, len45);

                                    _rt::string_lift(bytes45)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_greater_than(
                    &self,
                    child_worker: &TypedTimelineResultWorker,
                    event_value: &EventValue,
                ) -> FutureInitializeGreaterThanResult {
                    unsafe {
                        let (
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        ) = match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                        let (result37_0, result37_1, result37_2) = match event_value {
                            EventValue::StringValue(e) => {
                                let vec36 = e;
                                let ptr36 = vec36.as_ptr().cast::<u8>();
                                let len36 = vec36.len();

                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr36.cast_mut());
                                        t
                                    },
                                    len36,
                                )
                            }
                            EventValue::IntValue(e) => {
                                (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                            }
                            EventValue::FloatValue(e) => (
                                2i32,
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(e)).to_bits() as i64 as u64
                                ),
                                0usize,
                            ),
                            EventValue::BoolValue(e) => (
                                3i32,
                                ::core::mem::MaybeUninit::new(i64::from(match e {
                                    true => 1,
                                    false => 0,
                                })
                                    as u64),
                                0usize,
                            ),
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.initialize-greater-than"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                            result37_0,
                            result37_1,
                            result37_2,
                        );
                        FutureInitializeGreaterThanResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_greater_than_or_equal_to(
                    &self,
                    child_worker: &TypedTimelineResultWorker,
                    event_value: &EventValue,
                ) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let (
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        ) = match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                        let (result37_0, result37_1, result37_2) = match event_value {
                            EventValue::StringValue(e) => {
                                let vec36 = e;
                                let ptr36 = vec36.as_ptr().cast::<u8>();
                                let len36 = vec36.len();

                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr36.cast_mut());
                                        t
                                    },
                                    len36,
                                )
                            }
                            EventValue::IntValue(e) => {
                                (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                            }
                            EventValue::FloatValue(e) => (
                                2i32,
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(e)).to_bits() as i64 as u64
                                ),
                                0usize,
                            ),
                            EventValue::BoolValue(e) => (
                                3i32,
                                ::core::mem::MaybeUninit::new(i64::from(match e {
                                    true => 1,
                                    false => 0,
                                })
                                    as u64),
                                0usize,
                            ),
                        };
                        let ptr38 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-greater-than-or-equal-to"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                            result37_0,
                            result37_1,
                            result37_2,
                            ptr38,
                        );
                        let l39 = i32::from(*ptr38.add(0).cast::<u8>());
                        match l39 {
                            0 => {
                                let e = {
                                    let l40 = *ptr38.add(4).cast::<*mut u8>();
                                    let l41 = *ptr38.add(8).cast::<usize>();
                                    let len42 = l41;
                                    let bytes42 =
                                        _rt::Vec::from_raw_parts(l40.cast(), len42, len42);

                                    _rt::string_lift(bytes42)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l43 = *ptr38.add(4).cast::<*mut u8>();
                                    let l44 = *ptr38.add(8).cast::<usize>();
                                    let len45 = l44;
                                    let bytes45 =
                                        _rt::Vec::from_raw_parts(l43.cast(), len45, len45);

                                    _rt::string_lift(bytes45)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_greater_than_or_equal_to(
                    &self,
                    child_worker: &TypedTimelineResultWorker,
                    event_value: &EventValue,
                ) -> FutureInitializeGreaterThanOrEqualToResult {
                    unsafe {
                        let (
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        ) = match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                        let (result37_0, result37_1, result37_2) = match event_value {
                            EventValue::StringValue(e) => {
                                let vec36 = e;
                                let ptr36 = vec36.as_ptr().cast::<u8>();
                                let len36 = vec36.len();

                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr36.cast_mut());
                                        t
                                    },
                                    len36,
                                )
                            }
                            EventValue::IntValue(e) => {
                                (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                            }
                            EventValue::FloatValue(e) => (
                                2i32,
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(e)).to_bits() as i64 as u64
                                ),
                                0usize,
                            ),
                            EventValue::BoolValue(e) => (
                                3i32,
                                ::core::mem::MaybeUninit::new(i64::from(match e {
                                    true => 1,
                                    false => 0,
                                })
                                    as u64),
                                0usize,
                            ),
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.initialize-greater-than-or-equal-to"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                            result37_0,
                            result37_1,
                            result37_2,
                        );
                        FutureInitializeGreaterThanOrEqualToResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_less_than(
                    &self,
                    child_worker: &TypedTimelineResultWorker,
                    event_value: &EventValue,
                ) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let (
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        ) = match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                        let (result37_0, result37_1, result37_2) = match event_value {
                            EventValue::StringValue(e) => {
                                let vec36 = e;
                                let ptr36 = vec36.as_ptr().cast::<u8>();
                                let len36 = vec36.len();

                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr36.cast_mut());
                                        t
                                    },
                                    len36,
                                )
                            }
                            EventValue::IntValue(e) => {
                                (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                            }
                            EventValue::FloatValue(e) => (
                                2i32,
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(e)).to_bits() as i64 as u64
                                ),
                                0usize,
                            ),
                            EventValue::BoolValue(e) => (
                                3i32,
                                ::core::mem::MaybeUninit::new(i64::from(match e {
                                    true => 1,
                                    false => 0,
                                })
                                    as u64),
                                0usize,
                            ),
                        };
                        let ptr38 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-less-than"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                            result37_0,
                            result37_1,
                            result37_2,
                            ptr38,
                        );
                        let l39 = i32::from(*ptr38.add(0).cast::<u8>());
                        match l39 {
                            0 => {
                                let e = {
                                    let l40 = *ptr38.add(4).cast::<*mut u8>();
                                    let l41 = *ptr38.add(8).cast::<usize>();
                                    let len42 = l41;
                                    let bytes42 =
                                        _rt::Vec::from_raw_parts(l40.cast(), len42, len42);

                                    _rt::string_lift(bytes42)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l43 = *ptr38.add(4).cast::<*mut u8>();
                                    let l44 = *ptr38.add(8).cast::<usize>();
                                    let len45 = l44;
                                    let bytes45 =
                                        _rt::Vec::from_raw_parts(l43.cast(), len45, len45);

                                    _rt::string_lift(bytes45)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_less_than(
                    &self,
                    child_worker: &TypedTimelineResultWorker,
                    event_value: &EventValue,
                ) -> FutureInitializeLessThanResult {
                    unsafe {
                        let (
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        ) = match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                        let (result37_0, result37_1, result37_2) = match event_value {
                            EventValue::StringValue(e) => {
                                let vec36 = e;
                                let ptr36 = vec36.as_ptr().cast::<u8>();
                                let len36 = vec36.len();

                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr36.cast_mut());
                                        t
                                    },
                                    len36,
                                )
                            }
                            EventValue::IntValue(e) => {
                                (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                            }
                            EventValue::FloatValue(e) => (
                                2i32,
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(e)).to_bits() as i64 as u64
                                ),
                                0usize,
                            ),
                            EventValue::BoolValue(e) => (
                                3i32,
                                ::core::mem::MaybeUninit::new(i64::from(match e {
                                    true => 1,
                                    false => 0,
                                })
                                    as u64),
                                0usize,
                            ),
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.initialize-less-than"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                            result37_0,
                            result37_1,
                            result37_2,
                        );
                        FutureInitializeLessThanResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_less_than_or_equal_to(
                    &self,
                    child_worker: &TypedTimelineResultWorker,
                    event_value: &EventValue,
                ) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let (
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        ) = match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                        let (result37_0, result37_1, result37_2) = match event_value {
                            EventValue::StringValue(e) => {
                                let vec36 = e;
                                let ptr36 = vec36.as_ptr().cast::<u8>();
                                let len36 = vec36.len();

                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr36.cast_mut());
                                        t
                                    },
                                    len36,
                                )
                            }
                            EventValue::IntValue(e) => {
                                (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                            }
                            EventValue::FloatValue(e) => (
                                2i32,
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(e)).to_bits() as i64 as u64
                                ),
                                0usize,
                            ),
                            EventValue::BoolValue(e) => (
                                3i32,
                                ::core::mem::MaybeUninit::new(i64::from(match e {
                                    true => 1,
                                    false => 0,
                                })
                                    as u64),
                                0usize,
                            ),
                        };
                        let ptr38 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-less-than-or-equal-to"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                            result37_0,
                            result37_1,
                            result37_2,
                            ptr38,
                        );
                        let l39 = i32::from(*ptr38.add(0).cast::<u8>());
                        match l39 {
                            0 => {
                                let e = {
                                    let l40 = *ptr38.add(4).cast::<*mut u8>();
                                    let l41 = *ptr38.add(8).cast::<usize>();
                                    let len42 = l41;
                                    let bytes42 =
                                        _rt::Vec::from_raw_parts(l40.cast(), len42, len42);

                                    _rt::string_lift(bytes42)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l43 = *ptr38.add(4).cast::<*mut u8>();
                                    let l44 = *ptr38.add(8).cast::<usize>();
                                    let len45 = l44;
                                    let bytes45 =
                                        _rt::Vec::from_raw_parts(l43.cast(), len45, len45);

                                    _rt::string_lift(bytes45)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_less_than_or_equal_to(
                    &self,
                    child_worker: &TypedTimelineResultWorker,
                    event_value: &EventValue,
                ) -> FutureInitializeLessThanOrEqualToResult {
                    unsafe {
                        let (
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        ) = match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                        let (result37_0, result37_1, result37_2) = match event_value {
                            EventValue::StringValue(e) => {
                                let vec36 = e;
                                let ptr36 = vec36.as_ptr().cast::<u8>();
                                let len36 = vec36.len();

                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr36.cast_mut());
                                        t
                                    },
                                    len36,
                                )
                            }
                            EventValue::IntValue(e) => {
                                (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                            }
                            EventValue::FloatValue(e) => (
                                2i32,
                                ::core::mem::MaybeUninit::new(
                                    (_rt::as_f64(e)).to_bits() as i64 as u64
                                ),
                                0usize,
                            ),
                            EventValue::BoolValue(e) => (
                                3i32,
                                ::core::mem::MaybeUninit::new(i64::from(match e {
                                    true => 1,
                                    false => 0,
                                })
                                    as u64),
                                0usize,
                            ),
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.initialize-less-than-or-equal-to"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                            result37_0,
                            result37_1,
                            result37_2,
                        );
                        FutureInitializeLessThanOrEqualToResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_and(
                    &self,
                    child_worker1: &TypedTimelineResultWorker,
                    child_worker2: &TypedTimelineResultWorker,
                ) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let (
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        ) = match child_worker1 {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                        let (
                            result71_0,
                            result71_1,
                            result71_2,
                            result71_3,
                            result71_4,
                            result71_5,
                        ) = match child_worker2 {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result45_0, result45_1, result45_2, result45_3, result45_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id36,
                                                template_id: template_id36,
                                            } = e;
                                            let vec37 = worker_id36;
                                            let ptr37 = vec37.as_ptr().cast::<u8>();
                                            let len37 = vec37.len();
                                            let vec38 = template_id36;
                                            let ptr38 = vec38.as_ptr().cast::<u8>();
                                            let len38 = vec38.len();

                                            (0i32, ptr37.cast_mut(), len37, ptr38.cast_mut(), len38)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id39,
                                                template_id: template_id39,
                                            } = e;
                                            let vec40 = worker_id39;
                                            let ptr40 = vec40.as_ptr().cast::<u8>();
                                            let len40 = vec40.len();
                                            let vec41 = template_id39;
                                            let ptr41 = vec41.as_ptr().cast::<u8>();
                                            let len41 = vec41.len();

                                            (1i32, ptr40.cast_mut(), len40, ptr41.cast_mut(), len41)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id42,
                                                template_id: template_id42,
                                            } = e;
                                            let vec43 = worker_id42;
                                            let ptr43 = vec43.as_ptr().cast::<u8>();
                                            let len43 = vec43.len();
                                            let vec44 = template_id42;
                                            let ptr44 = vec44.as_ptr().cast::<u8>();
                                            let len44 = vec44.len();

                                            (2i32, ptr43.cast_mut(), len43, ptr44.cast_mut(), len44)
                                        }
                                    };

                                (0i32, result45_0, result45_1, result45_2, result45_3, result45_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result70_0, result70_1, result70_2, result70_3, result70_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id46,
                                                template_id: template_id46,
                                            } = e;
                                            let vec47 = worker_id46;
                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                            let len47 = vec47.len();
                                            let vec48 = template_id46;
                                            let ptr48 = vec48.as_ptr().cast::<u8>();
                                            let len48 = vec48.len();

                                            (0i32, ptr47.cast_mut(), len47, ptr48.cast_mut(), len48)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id49,
                                                template_id: template_id49,
                                            } = e;
                                            let vec50 = worker_id49;
                                            let ptr50 = vec50.as_ptr().cast::<u8>();
                                            let len50 = vec50.len();
                                            let vec51 = template_id49;
                                            let ptr51 = vec51.as_ptr().cast::<u8>();
                                            let len51 = vec51.len();

                                            (1i32, ptr50.cast_mut(), len50, ptr51.cast_mut(), len51)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id52,
                                                template_id: template_id52,
                                            } = e;
                                            let vec53 = worker_id52;
                                            let ptr53 = vec53.as_ptr().cast::<u8>();
                                            let len53 = vec53.len();
                                            let vec54 = template_id52;
                                            let ptr54 = vec54.as_ptr().cast::<u8>();
                                            let len54 = vec54.len();

                                            (2i32, ptr53.cast_mut(), len53, ptr54.cast_mut(), len54)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id55,
                                                template_id: template_id55,
                                            } = e;
                                            let vec56 = worker_id55;
                                            let ptr56 = vec56.as_ptr().cast::<u8>();
                                            let len56 = vec56.len();
                                            let vec57 = template_id55;
                                            let ptr57 = vec57.as_ptr().cast::<u8>();
                                            let len57 = vec57.len();

                                            (3i32, ptr56.cast_mut(), len56, ptr57.cast_mut(), len57)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id58,
                                                template_id: template_id58,
                                            } = e;
                                            let vec59 = worker_id58;
                                            let ptr59 = vec59.as_ptr().cast::<u8>();
                                            let len59 = vec59.len();
                                            let vec60 = template_id58;
                                            let ptr60 = vec60.as_ptr().cast::<u8>();
                                            let len60 = vec60.len();

                                            (4i32, ptr59.cast_mut(), len59, ptr60.cast_mut(), len60)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id61,
                                                template_id: template_id61,
                                            } = e;
                                            let vec62 = worker_id61;
                                            let ptr62 = vec62.as_ptr().cast::<u8>();
                                            let len62 = vec62.len();
                                            let vec63 = template_id61;
                                            let ptr63 = vec63.as_ptr().cast::<u8>();
                                            let len63 = vec63.len();

                                            (5i32, ptr62.cast_mut(), len62, ptr63.cast_mut(), len63)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id64,
                                                template_id: template_id64,
                                            } = e;
                                            let vec65 = worker_id64;
                                            let ptr65 = vec65.as_ptr().cast::<u8>();
                                            let len65 = vec65.len();
                                            let vec66 = template_id64;
                                            let ptr66 = vec66.as_ptr().cast::<u8>();
                                            let len66 = vec66.len();

                                            (6i32, ptr65.cast_mut(), len65, ptr66.cast_mut(), len66)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id67,
                                                template_id: template_id67,
                                            } = e;
                                            let vec68 = worker_id67;
                                            let ptr68 = vec68.as_ptr().cast::<u8>();
                                            let len68 = vec68.len();
                                            let vec69 = template_id67;
                                            let ptr69 = vec69.as_ptr().cast::<u8>();
                                            let len69 = vec69.len();

                                            (7i32, ptr68.cast_mut(), len68, ptr69.cast_mut(), len69)
                                        }
                                    };

                                (1i32, result70_0, result70_1, result70_2, result70_3, result70_4)
                            }
                        };
                        let ptr72 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-and"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                            result71_0,
                            result71_1,
                            result71_2,
                            result71_3,
                            result71_4,
                            result71_5,
                            ptr72,
                        );
                        let l73 = i32::from(*ptr72.add(0).cast::<u8>());
                        match l73 {
                            0 => {
                                let e = {
                                    let l74 = *ptr72.add(4).cast::<*mut u8>();
                                    let l75 = *ptr72.add(8).cast::<usize>();
                                    let len76 = l75;
                                    let bytes76 =
                                        _rt::Vec::from_raw_parts(l74.cast(), len76, len76);

                                    _rt::string_lift(bytes76)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l77 = *ptr72.add(4).cast::<*mut u8>();
                                    let l78 = *ptr72.add(8).cast::<usize>();
                                    let len79 = l78;
                                    let bytes79 =
                                        _rt::Vec::from_raw_parts(l77.cast(), len79, len79);

                                    _rt::string_lift(bytes79)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_and(
                    &self,
                    child_worker1: &TypedTimelineResultWorker,
                    child_worker2: &TypedTimelineResultWorker,
                ) -> FutureInitializeAndResult {
                    unsafe {
                        let (
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        ) = match child_worker1 {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                        let (
                            result71_0,
                            result71_1,
                            result71_2,
                            result71_3,
                            result71_4,
                            result71_5,
                        ) = match child_worker2 {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result45_0, result45_1, result45_2, result45_3, result45_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id36,
                                                template_id: template_id36,
                                            } = e;
                                            let vec37 = worker_id36;
                                            let ptr37 = vec37.as_ptr().cast::<u8>();
                                            let len37 = vec37.len();
                                            let vec38 = template_id36;
                                            let ptr38 = vec38.as_ptr().cast::<u8>();
                                            let len38 = vec38.len();

                                            (0i32, ptr37.cast_mut(), len37, ptr38.cast_mut(), len38)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id39,
                                                template_id: template_id39,
                                            } = e;
                                            let vec40 = worker_id39;
                                            let ptr40 = vec40.as_ptr().cast::<u8>();
                                            let len40 = vec40.len();
                                            let vec41 = template_id39;
                                            let ptr41 = vec41.as_ptr().cast::<u8>();
                                            let len41 = vec41.len();

                                            (1i32, ptr40.cast_mut(), len40, ptr41.cast_mut(), len41)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id42,
                                                template_id: template_id42,
                                            } = e;
                                            let vec43 = worker_id42;
                                            let ptr43 = vec43.as_ptr().cast::<u8>();
                                            let len43 = vec43.len();
                                            let vec44 = template_id42;
                                            let ptr44 = vec44.as_ptr().cast::<u8>();
                                            let len44 = vec44.len();

                                            (2i32, ptr43.cast_mut(), len43, ptr44.cast_mut(), len44)
                                        }
                                    };

                                (0i32, result45_0, result45_1, result45_2, result45_3, result45_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result70_0, result70_1, result70_2, result70_3, result70_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id46,
                                                template_id: template_id46,
                                            } = e;
                                            let vec47 = worker_id46;
                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                            let len47 = vec47.len();
                                            let vec48 = template_id46;
                                            let ptr48 = vec48.as_ptr().cast::<u8>();
                                            let len48 = vec48.len();

                                            (0i32, ptr47.cast_mut(), len47, ptr48.cast_mut(), len48)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id49,
                                                template_id: template_id49,
                                            } = e;
                                            let vec50 = worker_id49;
                                            let ptr50 = vec50.as_ptr().cast::<u8>();
                                            let len50 = vec50.len();
                                            let vec51 = template_id49;
                                            let ptr51 = vec51.as_ptr().cast::<u8>();
                                            let len51 = vec51.len();

                                            (1i32, ptr50.cast_mut(), len50, ptr51.cast_mut(), len51)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id52,
                                                template_id: template_id52,
                                            } = e;
                                            let vec53 = worker_id52;
                                            let ptr53 = vec53.as_ptr().cast::<u8>();
                                            let len53 = vec53.len();
                                            let vec54 = template_id52;
                                            let ptr54 = vec54.as_ptr().cast::<u8>();
                                            let len54 = vec54.len();

                                            (2i32, ptr53.cast_mut(), len53, ptr54.cast_mut(), len54)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id55,
                                                template_id: template_id55,
                                            } = e;
                                            let vec56 = worker_id55;
                                            let ptr56 = vec56.as_ptr().cast::<u8>();
                                            let len56 = vec56.len();
                                            let vec57 = template_id55;
                                            let ptr57 = vec57.as_ptr().cast::<u8>();
                                            let len57 = vec57.len();

                                            (3i32, ptr56.cast_mut(), len56, ptr57.cast_mut(), len57)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id58,
                                                template_id: template_id58,
                                            } = e;
                                            let vec59 = worker_id58;
                                            let ptr59 = vec59.as_ptr().cast::<u8>();
                                            let len59 = vec59.len();
                                            let vec60 = template_id58;
                                            let ptr60 = vec60.as_ptr().cast::<u8>();
                                            let len60 = vec60.len();

                                            (4i32, ptr59.cast_mut(), len59, ptr60.cast_mut(), len60)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id61,
                                                template_id: template_id61,
                                            } = e;
                                            let vec62 = worker_id61;
                                            let ptr62 = vec62.as_ptr().cast::<u8>();
                                            let len62 = vec62.len();
                                            let vec63 = template_id61;
                                            let ptr63 = vec63.as_ptr().cast::<u8>();
                                            let len63 = vec63.len();

                                            (5i32, ptr62.cast_mut(), len62, ptr63.cast_mut(), len63)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id64,
                                                template_id: template_id64,
                                            } = e;
                                            let vec65 = worker_id64;
                                            let ptr65 = vec65.as_ptr().cast::<u8>();
                                            let len65 = vec65.len();
                                            let vec66 = template_id64;
                                            let ptr66 = vec66.as_ptr().cast::<u8>();
                                            let len66 = vec66.len();

                                            (6i32, ptr65.cast_mut(), len65, ptr66.cast_mut(), len66)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id67,
                                                template_id: template_id67,
                                            } = e;
                                            let vec68 = worker_id67;
                                            let ptr68 = vec68.as_ptr().cast::<u8>();
                                            let len68 = vec68.len();
                                            let vec69 = template_id67;
                                            let ptr69 = vec69.as_ptr().cast::<u8>();
                                            let len69 = vec69.len();

                                            (7i32, ptr68.cast_mut(), len68, ptr69.cast_mut(), len69)
                                        }
                                    };

                                (1i32, result70_0, result70_1, result70_2, result70_3, result70_4)
                            }
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.initialize-and"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                            result71_0,
                            result71_1,
                            result71_2,
                            result71_3,
                            result71_4,
                            result71_5,
                        );
                        FutureInitializeAndResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_or(
                    &self,
                    child_worker1: &TypedTimelineResultWorker,
                    child_worker2: &TypedTimelineResultWorker,
                ) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let (
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        ) = match child_worker1 {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                        let (
                            result71_0,
                            result71_1,
                            result71_2,
                            result71_3,
                            result71_4,
                            result71_5,
                        ) = match child_worker2 {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result45_0, result45_1, result45_2, result45_3, result45_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id36,
                                                template_id: template_id36,
                                            } = e;
                                            let vec37 = worker_id36;
                                            let ptr37 = vec37.as_ptr().cast::<u8>();
                                            let len37 = vec37.len();
                                            let vec38 = template_id36;
                                            let ptr38 = vec38.as_ptr().cast::<u8>();
                                            let len38 = vec38.len();

                                            (0i32, ptr37.cast_mut(), len37, ptr38.cast_mut(), len38)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id39,
                                                template_id: template_id39,
                                            } = e;
                                            let vec40 = worker_id39;
                                            let ptr40 = vec40.as_ptr().cast::<u8>();
                                            let len40 = vec40.len();
                                            let vec41 = template_id39;
                                            let ptr41 = vec41.as_ptr().cast::<u8>();
                                            let len41 = vec41.len();

                                            (1i32, ptr40.cast_mut(), len40, ptr41.cast_mut(), len41)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id42,
                                                template_id: template_id42,
                                            } = e;
                                            let vec43 = worker_id42;
                                            let ptr43 = vec43.as_ptr().cast::<u8>();
                                            let len43 = vec43.len();
                                            let vec44 = template_id42;
                                            let ptr44 = vec44.as_ptr().cast::<u8>();
                                            let len44 = vec44.len();

                                            (2i32, ptr43.cast_mut(), len43, ptr44.cast_mut(), len44)
                                        }
                                    };

                                (0i32, result45_0, result45_1, result45_2, result45_3, result45_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result70_0, result70_1, result70_2, result70_3, result70_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id46,
                                                template_id: template_id46,
                                            } = e;
                                            let vec47 = worker_id46;
                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                            let len47 = vec47.len();
                                            let vec48 = template_id46;
                                            let ptr48 = vec48.as_ptr().cast::<u8>();
                                            let len48 = vec48.len();

                                            (0i32, ptr47.cast_mut(), len47, ptr48.cast_mut(), len48)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id49,
                                                template_id: template_id49,
                                            } = e;
                                            let vec50 = worker_id49;
                                            let ptr50 = vec50.as_ptr().cast::<u8>();
                                            let len50 = vec50.len();
                                            let vec51 = template_id49;
                                            let ptr51 = vec51.as_ptr().cast::<u8>();
                                            let len51 = vec51.len();

                                            (1i32, ptr50.cast_mut(), len50, ptr51.cast_mut(), len51)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id52,
                                                template_id: template_id52,
                                            } = e;
                                            let vec53 = worker_id52;
                                            let ptr53 = vec53.as_ptr().cast::<u8>();
                                            let len53 = vec53.len();
                                            let vec54 = template_id52;
                                            let ptr54 = vec54.as_ptr().cast::<u8>();
                                            let len54 = vec54.len();

                                            (2i32, ptr53.cast_mut(), len53, ptr54.cast_mut(), len54)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id55,
                                                template_id: template_id55,
                                            } = e;
                                            let vec56 = worker_id55;
                                            let ptr56 = vec56.as_ptr().cast::<u8>();
                                            let len56 = vec56.len();
                                            let vec57 = template_id55;
                                            let ptr57 = vec57.as_ptr().cast::<u8>();
                                            let len57 = vec57.len();

                                            (3i32, ptr56.cast_mut(), len56, ptr57.cast_mut(), len57)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id58,
                                                template_id: template_id58,
                                            } = e;
                                            let vec59 = worker_id58;
                                            let ptr59 = vec59.as_ptr().cast::<u8>();
                                            let len59 = vec59.len();
                                            let vec60 = template_id58;
                                            let ptr60 = vec60.as_ptr().cast::<u8>();
                                            let len60 = vec60.len();

                                            (4i32, ptr59.cast_mut(), len59, ptr60.cast_mut(), len60)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id61,
                                                template_id: template_id61,
                                            } = e;
                                            let vec62 = worker_id61;
                                            let ptr62 = vec62.as_ptr().cast::<u8>();
                                            let len62 = vec62.len();
                                            let vec63 = template_id61;
                                            let ptr63 = vec63.as_ptr().cast::<u8>();
                                            let len63 = vec63.len();

                                            (5i32, ptr62.cast_mut(), len62, ptr63.cast_mut(), len63)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id64,
                                                template_id: template_id64,
                                            } = e;
                                            let vec65 = worker_id64;
                                            let ptr65 = vec65.as_ptr().cast::<u8>();
                                            let len65 = vec65.len();
                                            let vec66 = template_id64;
                                            let ptr66 = vec66.as_ptr().cast::<u8>();
                                            let len66 = vec66.len();

                                            (6i32, ptr65.cast_mut(), len65, ptr66.cast_mut(), len66)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id67,
                                                template_id: template_id67,
                                            } = e;
                                            let vec68 = worker_id67;
                                            let ptr68 = vec68.as_ptr().cast::<u8>();
                                            let len68 = vec68.len();
                                            let vec69 = template_id67;
                                            let ptr69 = vec69.as_ptr().cast::<u8>();
                                            let len69 = vec69.len();

                                            (7i32, ptr68.cast_mut(), len68, ptr69.cast_mut(), len69)
                                        }
                                    };

                                (1i32, result70_0, result70_1, result70_2, result70_3, result70_4)
                            }
                        };
                        let ptr72 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-or"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                            result71_0,
                            result71_1,
                            result71_2,
                            result71_3,
                            result71_4,
                            result71_5,
                            ptr72,
                        );
                        let l73 = i32::from(*ptr72.add(0).cast::<u8>());
                        match l73 {
                            0 => {
                                let e = {
                                    let l74 = *ptr72.add(4).cast::<*mut u8>();
                                    let l75 = *ptr72.add(8).cast::<usize>();
                                    let len76 = l75;
                                    let bytes76 =
                                        _rt::Vec::from_raw_parts(l74.cast(), len76, len76);

                                    _rt::string_lift(bytes76)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l77 = *ptr72.add(4).cast::<*mut u8>();
                                    let l78 = *ptr72.add(8).cast::<usize>();
                                    let len79 = l78;
                                    let bytes79 =
                                        _rt::Vec::from_raw_parts(l77.cast(), len79, len79);

                                    _rt::string_lift(bytes79)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_or(
                    &self,
                    child_worker1: &TypedTimelineResultWorker,
                    child_worker2: &TypedTimelineResultWorker,
                ) -> FutureInitializeOrResult {
                    unsafe {
                        let (
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        ) = match child_worker1 {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                        let (
                            result71_0,
                            result71_1,
                            result71_2,
                            result71_3,
                            result71_4,
                            result71_5,
                        ) = match child_worker2 {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result45_0, result45_1, result45_2, result45_3, result45_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id36,
                                                template_id: template_id36,
                                            } = e;
                                            let vec37 = worker_id36;
                                            let ptr37 = vec37.as_ptr().cast::<u8>();
                                            let len37 = vec37.len();
                                            let vec38 = template_id36;
                                            let ptr38 = vec38.as_ptr().cast::<u8>();
                                            let len38 = vec38.len();

                                            (0i32, ptr37.cast_mut(), len37, ptr38.cast_mut(), len38)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id39,
                                                template_id: template_id39,
                                            } = e;
                                            let vec40 = worker_id39;
                                            let ptr40 = vec40.as_ptr().cast::<u8>();
                                            let len40 = vec40.len();
                                            let vec41 = template_id39;
                                            let ptr41 = vec41.as_ptr().cast::<u8>();
                                            let len41 = vec41.len();

                                            (1i32, ptr40.cast_mut(), len40, ptr41.cast_mut(), len41)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id42,
                                                template_id: template_id42,
                                            } = e;
                                            let vec43 = worker_id42;
                                            let ptr43 = vec43.as_ptr().cast::<u8>();
                                            let len43 = vec43.len();
                                            let vec44 = template_id42;
                                            let ptr44 = vec44.as_ptr().cast::<u8>();
                                            let len44 = vec44.len();

                                            (2i32, ptr43.cast_mut(), len43, ptr44.cast_mut(), len44)
                                        }
                                    };

                                (0i32, result45_0, result45_1, result45_2, result45_3, result45_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result70_0, result70_1, result70_2, result70_3, result70_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id46,
                                                template_id: template_id46,
                                            } = e;
                                            let vec47 = worker_id46;
                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                            let len47 = vec47.len();
                                            let vec48 = template_id46;
                                            let ptr48 = vec48.as_ptr().cast::<u8>();
                                            let len48 = vec48.len();

                                            (0i32, ptr47.cast_mut(), len47, ptr48.cast_mut(), len48)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id49,
                                                template_id: template_id49,
                                            } = e;
                                            let vec50 = worker_id49;
                                            let ptr50 = vec50.as_ptr().cast::<u8>();
                                            let len50 = vec50.len();
                                            let vec51 = template_id49;
                                            let ptr51 = vec51.as_ptr().cast::<u8>();
                                            let len51 = vec51.len();

                                            (1i32, ptr50.cast_mut(), len50, ptr51.cast_mut(), len51)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id52,
                                                template_id: template_id52,
                                            } = e;
                                            let vec53 = worker_id52;
                                            let ptr53 = vec53.as_ptr().cast::<u8>();
                                            let len53 = vec53.len();
                                            let vec54 = template_id52;
                                            let ptr54 = vec54.as_ptr().cast::<u8>();
                                            let len54 = vec54.len();

                                            (2i32, ptr53.cast_mut(), len53, ptr54.cast_mut(), len54)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id55,
                                                template_id: template_id55,
                                            } = e;
                                            let vec56 = worker_id55;
                                            let ptr56 = vec56.as_ptr().cast::<u8>();
                                            let len56 = vec56.len();
                                            let vec57 = template_id55;
                                            let ptr57 = vec57.as_ptr().cast::<u8>();
                                            let len57 = vec57.len();

                                            (3i32, ptr56.cast_mut(), len56, ptr57.cast_mut(), len57)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id58,
                                                template_id: template_id58,
                                            } = e;
                                            let vec59 = worker_id58;
                                            let ptr59 = vec59.as_ptr().cast::<u8>();
                                            let len59 = vec59.len();
                                            let vec60 = template_id58;
                                            let ptr60 = vec60.as_ptr().cast::<u8>();
                                            let len60 = vec60.len();

                                            (4i32, ptr59.cast_mut(), len59, ptr60.cast_mut(), len60)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id61,
                                                template_id: template_id61,
                                            } = e;
                                            let vec62 = worker_id61;
                                            let ptr62 = vec62.as_ptr().cast::<u8>();
                                            let len62 = vec62.len();
                                            let vec63 = template_id61;
                                            let ptr63 = vec63.as_ptr().cast::<u8>();
                                            let len63 = vec63.len();

                                            (5i32, ptr62.cast_mut(), len62, ptr63.cast_mut(), len63)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id64,
                                                template_id: template_id64,
                                            } = e;
                                            let vec65 = worker_id64;
                                            let ptr65 = vec65.as_ptr().cast::<u8>();
                                            let len65 = vec65.len();
                                            let vec66 = template_id64;
                                            let ptr66 = vec66.as_ptr().cast::<u8>();
                                            let len66 = vec66.len();

                                            (6i32, ptr65.cast_mut(), len65, ptr66.cast_mut(), len66)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id67,
                                                template_id: template_id67,
                                            } = e;
                                            let vec68 = worker_id67;
                                            let ptr68 = vec68.as_ptr().cast::<u8>();
                                            let len68 = vec68.len();
                                            let vec69 = template_id67;
                                            let ptr69 = vec69.as_ptr().cast::<u8>();
                                            let len69 = vec69.len();

                                            (7i32, ptr68.cast_mut(), len68, ptr69.cast_mut(), len69)
                                        }
                                    };

                                (1i32, result70_0, result70_1, result70_2, result70_3, result70_4)
                            }
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.initialize-or"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                            result71_0,
                            result71_1,
                            result71_2,
                            result71_3,
                            result71_4,
                            result71_5,
                        );
                        FutureInitializeOrResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_initialize_not(
                    &self,
                    child_worker: &TypedTimelineResultWorker,
                ) -> Result<_rt::String, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let (
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        ) = match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                        let ptr36 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-initialize-not"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                            ptr36,
                        );
                        let l37 = i32::from(*ptr36.add(0).cast::<u8>());
                        match l37 {
                            0 => {
                                let e = {
                                    let l38 = *ptr36.add(4).cast::<*mut u8>();
                                    let l39 = *ptr36.add(8).cast::<usize>();
                                    let len40 = l39;
                                    let bytes40 =
                                        _rt::Vec::from_raw_parts(l38.cast(), len40, len40);

                                    _rt::string_lift(bytes40)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l41 = *ptr36.add(4).cast::<*mut u8>();
                                    let l42 = *ptr36.add(8).cast::<usize>();
                                    let len43 = l42;
                                    let bytes43 =
                                        _rt::Vec::from_raw_parts(l41.cast(), len43, len43);

                                    _rt::string_lift(bytes43)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize_not(
                    &self,
                    child_worker: &TypedTimelineResultWorker,
                ) -> FutureInitializeNotResult {
                    unsafe {
                        let (
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        ) = match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };

                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.initialize-not"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            result35_0,
                            result35_1,
                            result35_2,
                            result35_3,
                            result35_4,
                            result35_5,
                        );
                        FutureInitializeNotResult::from_handle(ret as u32)
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_get_timeline_result(
                    &self,
                    t1: u64,
                ) -> Result<TimelineResult, _rt::String> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.blocking-get-timeline-result"]
                            fn wit_import(_: i32, _: i64, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_i64(&t1), ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let base15 = l2;
                                    let len15 = l3;
                                    let mut result15 = _rt::Vec::with_capacity(len15);
                                    for i in 0..len15 {
                                        let base = base15.add(i * 40);
                                        let e15 = {
                                            let l4 = *base.add(0).cast::<i64>();
                                            let l5 = i32::from(*base.add(8).cast::<u8>());
                                            let l7 = i32::from(*base.add(24).cast::<u8>());
                                            use super::super::super::timeline::event_processor::api::EventValue as V14;
                                            let v14 = match l7 {
                                                0 => {
                                                    let e14 = {
                                                        let l8 = *base.add(32).cast::<*mut u8>();
                                                        let l9 = *base.add(36).cast::<usize>();
                                                        let len10 = l9;
                                                        let bytes10 = _rt::Vec::from_raw_parts(
                                                            l8.cast(),
                                                            len10,
                                                            len10,
                                                        );

                                                        _rt::string_lift(bytes10)
                                                    };
                                                    V14::StringValue(e14)
                                                }
                                                1 => {
                                                    let e14 = {
                                                        let l11 = *base.add(32).cast::<i64>();

                                                        l11
                                                    };
                                                    V14::IntValue(e14)
                                                }
                                                2 => {
                                                    let e14 = {
                                                        let l12 = *base.add(32).cast::<f64>();

                                                        l12
                                                    };
                                                    V14::FloatValue(e14)
                                                }
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 3,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e14 = {
                                                        let l13 =
                                                            i32::from(*base.add(32).cast::<u8>());

                                                        _rt::bool_lift(l13 as u8)
                                                    };
                                                    V14::BoolValue(e14)
                                                }
                                            };

                                            super::super::super::timeline::event_processor::api::TimelineResultPoint{
                                                      time_period: super::super::super::timeline::event_processor::api::TimePeriod{
                                                        t1: l4 as u64,
                                                        t2: match l5 {
                                                          0 => None,
                                                          1 => {
                                                            let e = {
                                                              let l6 = *base.add(16).cast::<i64>();

                                                              l6 as u64
                                                            };
                                                            Some(e)
                                                          }
                                                          _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                      },
                                                      value: v14,
                                                    }
                                        };
                                        result15.push(e15);
                                    }
                                    _rt::cabi_dealloc(base15, len15 * 40, 8);

                                    TimelineResult { results: result15 }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l16 = *ptr0.add(4).cast::<*mut u8>();
                                    let l17 = *ptr0.add(8).cast::<usize>();
                                    let len18 = l17;
                                    let bytes18 =
                                        _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                    _rt::string_lift(bytes18)
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Api {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_timeline_result(&self, t1: u64) -> FutureGetTimelineResultResult {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "timeline:timeline-processor-stub/stub-timeline-processor"
                        )]
                        extern "C" {
                            #[link_name = "[method]api.get-timeline-result"]
                            fn wit_import(_: i32, _: i64) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32, _rt::as_i64(&t1));
                        FutureGetTimelineResultResult::from_handle(ret as u32)
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod wasi {
    #[allow(dead_code)]
    pub mod io {
        #[allow(dead_code, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// `pollable` epresents a single I/O event which may be ready, or not.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }

            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the readiness of a pollable. This function never blocks.
                ///
                /// Returns `true` when the pollable is ready, and `false` otherwise.
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// `block` returns immediately if the pollable is ready, and otherwise
                /// blocks until ready.
                ///
                /// This function is equivalent to calling `poll.poll` on a list
                /// containing only this pollable.
                pub fn block(&self) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import(_: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Poll for completion on a set of pollables.
            ///
            /// This function takes a list of pollables, which identify I/O sources of
            /// interest, and waits until one or more of the events is ready for I/O.
            ///
            /// The result `list<u32>` contains one or more indices of handles in the
            /// argument list that is ready for I/O.
            ///
            /// If the list contains more elements than can be indexed with a `u32`
            /// value, this function traps.
            ///
            /// A timeout can be implemented by adding a pollable from the
            /// wasi-clocks API to the list.
            ///
            /// This function does not return a `result`; polling in itself does not
            /// do any I/O so it doesn't fail. If any of the I/O sources identified by
            /// the pollables has an error, it is indicated by marking the source as
            /// being reaedy for I/O.
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(vec0.len() * 4, 4);
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                    extern "C" {
                        #[link_name = "poll"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(result0, len0, ptr1);
                    let l2 = *ptr1.add(0).cast::<*mut u8>();
                    let l3 = *ptr1.add(4).cast::<usize>();
                    let len4 = l3;
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod timeline {
        #[allow(dead_code)]
        pub mod timeline_processor {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type EventValue =
                    super::super::super::super::timeline::event_processor::api::EventValue;
                pub type TimelineResult =
                    super::super::super::super::timeline::event_processor::api::TimelineResult;
                #[derive(Clone)]
                pub struct TimelineResultWorker {
                    pub worker_id: _rt::String,
                    pub template_id: _rt::String,
                }
                impl ::core::fmt::Debug for TimelineResultWorker {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("TimelineResultWorker")
                            .field("worker-id", &self.worker_id)
                            .field("template-id", &self.template_id)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum LeafTimelineNode {
                    TlHasExisted(TimelineResultWorker),
                    TlHasExistedWithin(TimelineResultWorker),
                    TlLatestEventToState(TimelineResultWorker),
                }
                impl ::core::fmt::Debug for LeafTimelineNode {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            LeafTimelineNode::TlHasExisted(e) => {
                                f.debug_tuple("LeafTimelineNode::TlHasExisted").field(e).finish()
                            }
                            LeafTimelineNode::TlHasExistedWithin(e) => f
                                .debug_tuple("LeafTimelineNode::TlHasExistedWithin")
                                .field(e)
                                .finish(),
                            LeafTimelineNode::TlLatestEventToState(e) => f
                                .debug_tuple("LeafTimelineNode::TlLatestEventToState")
                                .field(e)
                                .finish(),
                        }
                    }
                }
                #[derive(Clone)]
                pub enum DerivedTimelineNode {
                    EqualTo(TimelineResultWorker),
                    GreaterThan(TimelineResultWorker),
                    GreaterThanOrEqualTo(TimelineResultWorker),
                    LessThan(TimelineResultWorker),
                    LessThanOrEqualTo(TimelineResultWorker),
                    And(TimelineResultWorker),
                    Or(TimelineResultWorker),
                    Not(TimelineResultWorker),
                }
                impl ::core::fmt::Debug for DerivedTimelineNode {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            DerivedTimelineNode::EqualTo(e) => {
                                f.debug_tuple("DerivedTimelineNode::EqualTo").field(e).finish()
                            }
                            DerivedTimelineNode::GreaterThan(e) => {
                                f.debug_tuple("DerivedTimelineNode::GreaterThan").field(e).finish()
                            }
                            DerivedTimelineNode::GreaterThanOrEqualTo(e) => f
                                .debug_tuple("DerivedTimelineNode::GreaterThanOrEqualTo")
                                .field(e)
                                .finish(),
                            DerivedTimelineNode::LessThan(e) => {
                                f.debug_tuple("DerivedTimelineNode::LessThan").field(e).finish()
                            }
                            DerivedTimelineNode::LessThanOrEqualTo(e) => f
                                .debug_tuple("DerivedTimelineNode::LessThanOrEqualTo")
                                .field(e)
                                .finish(),
                            DerivedTimelineNode::And(e) => {
                                f.debug_tuple("DerivedTimelineNode::And").field(e).finish()
                            }
                            DerivedTimelineNode::Or(e) => {
                                f.debug_tuple("DerivedTimelineNode::Or").field(e).finish()
                            }
                            DerivedTimelineNode::Not(e) => {
                                f.debug_tuple("DerivedTimelineNode::Not").field(e).finish()
                            }
                        }
                    }
                }
                #[derive(Clone)]
                pub enum TypedTimelineResultWorker {
                    LeafTimeline(LeafTimelineNode),
                    DerivedTimeline(DerivedTimelineNode),
                }
                impl ::core::fmt::Debug for TypedTimelineResultWorker {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            TypedTimelineResultWorker::LeafTimeline(e) => f
                                .debug_tuple("TypedTimelineResultWorker::LeafTimeline")
                                .field(e)
                                .finish(),
                            TypedTimelineResultWorker::DerivedTimeline(e) => f
                                .debug_tuple("TypedTimelineResultWorker::DerivedTimeline")
                                .field(e)
                                .finish(),
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_equal_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: ::core::mem::MaybeUninit<u64>,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v24 = match arg0 {
                        0 => {
                            let e24 = {
                                let v6 = match arg1 {
                                    0 => {
                                        let e6 = {
                                            let len0 = arg3;
                                            let bytes0 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                                            let len1 = arg5;
                                            let bytes1 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes0),
                                                template_id: _rt::string_lift(bytes1),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e6)
                                    }
                                    1 => {
                                        let e6 = {
                                            let len2 = arg3;
                                            let bytes2 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len2, len2);
                                            let len3 = arg5;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len3, len3);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes2),
                                                template_id: _rt::string_lift(bytes3),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e6 = {
                                            let len4 = arg3;
                                            let bytes4 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len4, len4);
                                            let len5 = arg5;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes4),
                                                template_id: _rt::string_lift(bytes5),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e6)
                                    }
                                };

                                v6
                            };
                            TypedTimelineResultWorker::LeafTimeline(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let v23 = match arg1 {
                                    0 => {
                                        let e23 = {
                                            let len7 = arg3;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len7, len7);
                                            let len8 = arg5;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len8, len8);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes7),
                                                template_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e23)
                                    }
                                    1 => {
                                        let e23 = {
                                            let len9 = arg3;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len9, len9);
                                            let len10 = arg5;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len10, len10);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes9),
                                                template_id: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e23)
                                    }
                                    2 => {
                                        let e23 = {
                                            let len11 = arg3;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len11, len11);
                                            let len12 = arg5;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len12, len12);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes11),
                                                template_id: _rt::string_lift(bytes12),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e23)
                                    }
                                    3 => {
                                        let e23 = {
                                            let len13 = arg3;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                                            let len14 = arg5;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len14, len14);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes13),
                                                template_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e23)
                                    }
                                    4 => {
                                        let e23 = {
                                            let len15 = arg3;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len15, len15);
                                            let len16 = arg5;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len16, len16);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes15),
                                                template_id: _rt::string_lift(bytes16),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e23)
                                    }
                                    5 => {
                                        let e23 = {
                                            let len17 = arg3;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len17, len17);
                                            let len18 = arg5;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len18, len18);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes17),
                                                template_id: _rt::string_lift(bytes18),
                                            }
                                        };
                                        DerivedTimelineNode::And(e23)
                                    }
                                    6 => {
                                        let e23 = {
                                            let len19 = arg3;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len19, len19);
                                            let len20 = arg5;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len20, len20);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes19),
                                                template_id: _rt::string_lift(bytes20),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e23 = {
                                            let len21 = arg3;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len21, len21);
                                            let len22 = arg5;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len22, len22);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes21),
                                                template_id: _rt::string_lift(bytes22),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e23)
                                    }
                                };

                                v23
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e24)
                        }
                    };
                    use super::super::super::super::timeline::event_processor::api::EventValue as V26;
                    let v26 = match arg6 {
                        0 => {
                            let e26 = {
                                let len25 = arg8;
                                let bytes25 = _rt::Vec::from_raw_parts(
                                    arg7.as_ptr().cast::<*mut u8>().read().cast(),
                                    len25,
                                    len25,
                                );

                                _rt::string_lift(bytes25)
                            };
                            V26::StringValue(e26)
                        }
                        1 => {
                            let e26 = arg7.assume_init() as i64;
                            V26::IntValue(e26)
                        }
                        2 => {
                            let e26 = f64::from_bits(arg7.assume_init() as i64 as u64);
                            V26::FloatValue(e26)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e26 = _rt::bool_lift(arg7.assume_init() as i64 as i32 as u8);
                            V26::BoolValue(e26)
                        }
                    };
                    let result27 = T::initialize_equal(v24, v26);
                    let ptr28 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result27 {
                        Ok(e) => {
                            *ptr28.add(0).cast::<u8>() = (0i32) as u8;
                            let vec29 = (e.into_bytes()).into_boxed_slice();
                            let ptr29 = vec29.as_ptr().cast::<u8>();
                            let len29 = vec29.len();
                            ::core::mem::forget(vec29);
                            *ptr28.add(8).cast::<usize>() = len29;
                            *ptr28.add(4).cast::<*mut u8>() = ptr29.cast_mut();
                        }
                        Err(e) => {
                            *ptr28.add(0).cast::<u8>() = (1i32) as u8;
                            let vec30 = (e.into_bytes()).into_boxed_slice();
                            let ptr30 = vec30.as_ptr().cast::<u8>();
                            let len30 = vec30.len();
                            ::core::mem::forget(vec30);
                            *ptr28.add(8).cast::<usize>() = len30;
                            *ptr28.add(4).cast::<*mut u8>() = ptr30.cast_mut();
                        }
                    };
                    ptr28
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_equal<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_greater_than_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: ::core::mem::MaybeUninit<u64>,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v24 = match arg0 {
                        0 => {
                            let e24 = {
                                let v6 = match arg1 {
                                    0 => {
                                        let e6 = {
                                            let len0 = arg3;
                                            let bytes0 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                                            let len1 = arg5;
                                            let bytes1 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes0),
                                                template_id: _rt::string_lift(bytes1),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e6)
                                    }
                                    1 => {
                                        let e6 = {
                                            let len2 = arg3;
                                            let bytes2 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len2, len2);
                                            let len3 = arg5;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len3, len3);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes2),
                                                template_id: _rt::string_lift(bytes3),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e6 = {
                                            let len4 = arg3;
                                            let bytes4 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len4, len4);
                                            let len5 = arg5;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes4),
                                                template_id: _rt::string_lift(bytes5),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e6)
                                    }
                                };

                                v6
                            };
                            TypedTimelineResultWorker::LeafTimeline(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let v23 = match arg1 {
                                    0 => {
                                        let e23 = {
                                            let len7 = arg3;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len7, len7);
                                            let len8 = arg5;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len8, len8);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes7),
                                                template_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e23)
                                    }
                                    1 => {
                                        let e23 = {
                                            let len9 = arg3;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len9, len9);
                                            let len10 = arg5;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len10, len10);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes9),
                                                template_id: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e23)
                                    }
                                    2 => {
                                        let e23 = {
                                            let len11 = arg3;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len11, len11);
                                            let len12 = arg5;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len12, len12);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes11),
                                                template_id: _rt::string_lift(bytes12),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e23)
                                    }
                                    3 => {
                                        let e23 = {
                                            let len13 = arg3;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                                            let len14 = arg5;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len14, len14);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes13),
                                                template_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e23)
                                    }
                                    4 => {
                                        let e23 = {
                                            let len15 = arg3;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len15, len15);
                                            let len16 = arg5;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len16, len16);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes15),
                                                template_id: _rt::string_lift(bytes16),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e23)
                                    }
                                    5 => {
                                        let e23 = {
                                            let len17 = arg3;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len17, len17);
                                            let len18 = arg5;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len18, len18);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes17),
                                                template_id: _rt::string_lift(bytes18),
                                            }
                                        };
                                        DerivedTimelineNode::And(e23)
                                    }
                                    6 => {
                                        let e23 = {
                                            let len19 = arg3;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len19, len19);
                                            let len20 = arg5;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len20, len20);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes19),
                                                template_id: _rt::string_lift(bytes20),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e23 = {
                                            let len21 = arg3;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len21, len21);
                                            let len22 = arg5;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len22, len22);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes21),
                                                template_id: _rt::string_lift(bytes22),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e23)
                                    }
                                };

                                v23
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e24)
                        }
                    };
                    use super::super::super::super::timeline::event_processor::api::EventValue as V26;
                    let v26 = match arg6 {
                        0 => {
                            let e26 = {
                                let len25 = arg8;
                                let bytes25 = _rt::Vec::from_raw_parts(
                                    arg7.as_ptr().cast::<*mut u8>().read().cast(),
                                    len25,
                                    len25,
                                );

                                _rt::string_lift(bytes25)
                            };
                            V26::StringValue(e26)
                        }
                        1 => {
                            let e26 = arg7.assume_init() as i64;
                            V26::IntValue(e26)
                        }
                        2 => {
                            let e26 = f64::from_bits(arg7.assume_init() as i64 as u64);
                            V26::FloatValue(e26)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e26 = _rt::bool_lift(arg7.assume_init() as i64 as i32 as u8);
                            V26::BoolValue(e26)
                        }
                    };
                    let result27 = T::initialize_greater_than(v24, v26);
                    let ptr28 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result27 {
                        Ok(e) => {
                            *ptr28.add(0).cast::<u8>() = (0i32) as u8;
                            let vec29 = (e.into_bytes()).into_boxed_slice();
                            let ptr29 = vec29.as_ptr().cast::<u8>();
                            let len29 = vec29.len();
                            ::core::mem::forget(vec29);
                            *ptr28.add(8).cast::<usize>() = len29;
                            *ptr28.add(4).cast::<*mut u8>() = ptr29.cast_mut();
                        }
                        Err(e) => {
                            *ptr28.add(0).cast::<u8>() = (1i32) as u8;
                            let vec30 = (e.into_bytes()).into_boxed_slice();
                            let ptr30 = vec30.as_ptr().cast::<u8>();
                            let len30 = vec30.len();
                            ::core::mem::forget(vec30);
                            *ptr28.add(8).cast::<usize>() = len30;
                            *ptr28.add(4).cast::<*mut u8>() = ptr30.cast_mut();
                        }
                    };
                    ptr28
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_greater_than<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_greater_than_or_equal_to_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: ::core::mem::MaybeUninit<u64>,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v24 = match arg0 {
                        0 => {
                            let e24 = {
                                let v6 = match arg1 {
                                    0 => {
                                        let e6 = {
                                            let len0 = arg3;
                                            let bytes0 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                                            let len1 = arg5;
                                            let bytes1 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes0),
                                                template_id: _rt::string_lift(bytes1),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e6)
                                    }
                                    1 => {
                                        let e6 = {
                                            let len2 = arg3;
                                            let bytes2 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len2, len2);
                                            let len3 = arg5;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len3, len3);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes2),
                                                template_id: _rt::string_lift(bytes3),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e6 = {
                                            let len4 = arg3;
                                            let bytes4 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len4, len4);
                                            let len5 = arg5;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes4),
                                                template_id: _rt::string_lift(bytes5),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e6)
                                    }
                                };

                                v6
                            };
                            TypedTimelineResultWorker::LeafTimeline(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let v23 = match arg1 {
                                    0 => {
                                        let e23 = {
                                            let len7 = arg3;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len7, len7);
                                            let len8 = arg5;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len8, len8);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes7),
                                                template_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e23)
                                    }
                                    1 => {
                                        let e23 = {
                                            let len9 = arg3;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len9, len9);
                                            let len10 = arg5;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len10, len10);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes9),
                                                template_id: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e23)
                                    }
                                    2 => {
                                        let e23 = {
                                            let len11 = arg3;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len11, len11);
                                            let len12 = arg5;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len12, len12);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes11),
                                                template_id: _rt::string_lift(bytes12),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e23)
                                    }
                                    3 => {
                                        let e23 = {
                                            let len13 = arg3;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                                            let len14 = arg5;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len14, len14);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes13),
                                                template_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e23)
                                    }
                                    4 => {
                                        let e23 = {
                                            let len15 = arg3;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len15, len15);
                                            let len16 = arg5;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len16, len16);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes15),
                                                template_id: _rt::string_lift(bytes16),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e23)
                                    }
                                    5 => {
                                        let e23 = {
                                            let len17 = arg3;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len17, len17);
                                            let len18 = arg5;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len18, len18);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes17),
                                                template_id: _rt::string_lift(bytes18),
                                            }
                                        };
                                        DerivedTimelineNode::And(e23)
                                    }
                                    6 => {
                                        let e23 = {
                                            let len19 = arg3;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len19, len19);
                                            let len20 = arg5;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len20, len20);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes19),
                                                template_id: _rt::string_lift(bytes20),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e23 = {
                                            let len21 = arg3;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len21, len21);
                                            let len22 = arg5;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len22, len22);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes21),
                                                template_id: _rt::string_lift(bytes22),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e23)
                                    }
                                };

                                v23
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e24)
                        }
                    };
                    use super::super::super::super::timeline::event_processor::api::EventValue as V26;
                    let v26 = match arg6 {
                        0 => {
                            let e26 = {
                                let len25 = arg8;
                                let bytes25 = _rt::Vec::from_raw_parts(
                                    arg7.as_ptr().cast::<*mut u8>().read().cast(),
                                    len25,
                                    len25,
                                );

                                _rt::string_lift(bytes25)
                            };
                            V26::StringValue(e26)
                        }
                        1 => {
                            let e26 = arg7.assume_init() as i64;
                            V26::IntValue(e26)
                        }
                        2 => {
                            let e26 = f64::from_bits(arg7.assume_init() as i64 as u64);
                            V26::FloatValue(e26)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e26 = _rt::bool_lift(arg7.assume_init() as i64 as i32 as u8);
                            V26::BoolValue(e26)
                        }
                    };
                    let result27 = T::initialize_greater_than_or_equal_to(v24, v26);
                    let ptr28 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result27 {
                        Ok(e) => {
                            *ptr28.add(0).cast::<u8>() = (0i32) as u8;
                            let vec29 = (e.into_bytes()).into_boxed_slice();
                            let ptr29 = vec29.as_ptr().cast::<u8>();
                            let len29 = vec29.len();
                            ::core::mem::forget(vec29);
                            *ptr28.add(8).cast::<usize>() = len29;
                            *ptr28.add(4).cast::<*mut u8>() = ptr29.cast_mut();
                        }
                        Err(e) => {
                            *ptr28.add(0).cast::<u8>() = (1i32) as u8;
                            let vec30 = (e.into_bytes()).into_boxed_slice();
                            let ptr30 = vec30.as_ptr().cast::<u8>();
                            let len30 = vec30.len();
                            ::core::mem::forget(vec30);
                            *ptr28.add(8).cast::<usize>() = len30;
                            *ptr28.add(4).cast::<*mut u8>() = ptr30.cast_mut();
                        }
                    };
                    ptr28
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_greater_than_or_equal_to<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_less_than_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: ::core::mem::MaybeUninit<u64>,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v24 = match arg0 {
                        0 => {
                            let e24 = {
                                let v6 = match arg1 {
                                    0 => {
                                        let e6 = {
                                            let len0 = arg3;
                                            let bytes0 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                                            let len1 = arg5;
                                            let bytes1 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes0),
                                                template_id: _rt::string_lift(bytes1),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e6)
                                    }
                                    1 => {
                                        let e6 = {
                                            let len2 = arg3;
                                            let bytes2 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len2, len2);
                                            let len3 = arg5;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len3, len3);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes2),
                                                template_id: _rt::string_lift(bytes3),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e6 = {
                                            let len4 = arg3;
                                            let bytes4 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len4, len4);
                                            let len5 = arg5;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes4),
                                                template_id: _rt::string_lift(bytes5),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e6)
                                    }
                                };

                                v6
                            };
                            TypedTimelineResultWorker::LeafTimeline(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let v23 = match arg1 {
                                    0 => {
                                        let e23 = {
                                            let len7 = arg3;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len7, len7);
                                            let len8 = arg5;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len8, len8);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes7),
                                                template_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e23)
                                    }
                                    1 => {
                                        let e23 = {
                                            let len9 = arg3;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len9, len9);
                                            let len10 = arg5;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len10, len10);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes9),
                                                template_id: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e23)
                                    }
                                    2 => {
                                        let e23 = {
                                            let len11 = arg3;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len11, len11);
                                            let len12 = arg5;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len12, len12);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes11),
                                                template_id: _rt::string_lift(bytes12),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e23)
                                    }
                                    3 => {
                                        let e23 = {
                                            let len13 = arg3;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                                            let len14 = arg5;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len14, len14);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes13),
                                                template_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e23)
                                    }
                                    4 => {
                                        let e23 = {
                                            let len15 = arg3;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len15, len15);
                                            let len16 = arg5;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len16, len16);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes15),
                                                template_id: _rt::string_lift(bytes16),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e23)
                                    }
                                    5 => {
                                        let e23 = {
                                            let len17 = arg3;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len17, len17);
                                            let len18 = arg5;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len18, len18);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes17),
                                                template_id: _rt::string_lift(bytes18),
                                            }
                                        };
                                        DerivedTimelineNode::And(e23)
                                    }
                                    6 => {
                                        let e23 = {
                                            let len19 = arg3;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len19, len19);
                                            let len20 = arg5;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len20, len20);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes19),
                                                template_id: _rt::string_lift(bytes20),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e23 = {
                                            let len21 = arg3;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len21, len21);
                                            let len22 = arg5;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len22, len22);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes21),
                                                template_id: _rt::string_lift(bytes22),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e23)
                                    }
                                };

                                v23
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e24)
                        }
                    };
                    use super::super::super::super::timeline::event_processor::api::EventValue as V26;
                    let v26 = match arg6 {
                        0 => {
                            let e26 = {
                                let len25 = arg8;
                                let bytes25 = _rt::Vec::from_raw_parts(
                                    arg7.as_ptr().cast::<*mut u8>().read().cast(),
                                    len25,
                                    len25,
                                );

                                _rt::string_lift(bytes25)
                            };
                            V26::StringValue(e26)
                        }
                        1 => {
                            let e26 = arg7.assume_init() as i64;
                            V26::IntValue(e26)
                        }
                        2 => {
                            let e26 = f64::from_bits(arg7.assume_init() as i64 as u64);
                            V26::FloatValue(e26)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e26 = _rt::bool_lift(arg7.assume_init() as i64 as i32 as u8);
                            V26::BoolValue(e26)
                        }
                    };
                    let result27 = T::initialize_less_than(v24, v26);
                    let ptr28 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result27 {
                        Ok(e) => {
                            *ptr28.add(0).cast::<u8>() = (0i32) as u8;
                            let vec29 = (e.into_bytes()).into_boxed_slice();
                            let ptr29 = vec29.as_ptr().cast::<u8>();
                            let len29 = vec29.len();
                            ::core::mem::forget(vec29);
                            *ptr28.add(8).cast::<usize>() = len29;
                            *ptr28.add(4).cast::<*mut u8>() = ptr29.cast_mut();
                        }
                        Err(e) => {
                            *ptr28.add(0).cast::<u8>() = (1i32) as u8;
                            let vec30 = (e.into_bytes()).into_boxed_slice();
                            let ptr30 = vec30.as_ptr().cast::<u8>();
                            let len30 = vec30.len();
                            ::core::mem::forget(vec30);
                            *ptr28.add(8).cast::<usize>() = len30;
                            *ptr28.add(4).cast::<*mut u8>() = ptr30.cast_mut();
                        }
                    };
                    ptr28
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_less_than<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_less_than_or_equal_to_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: ::core::mem::MaybeUninit<u64>,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v24 = match arg0 {
                        0 => {
                            let e24 = {
                                let v6 = match arg1 {
                                    0 => {
                                        let e6 = {
                                            let len0 = arg3;
                                            let bytes0 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                                            let len1 = arg5;
                                            let bytes1 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes0),
                                                template_id: _rt::string_lift(bytes1),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e6)
                                    }
                                    1 => {
                                        let e6 = {
                                            let len2 = arg3;
                                            let bytes2 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len2, len2);
                                            let len3 = arg5;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len3, len3);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes2),
                                                template_id: _rt::string_lift(bytes3),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e6 = {
                                            let len4 = arg3;
                                            let bytes4 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len4, len4);
                                            let len5 = arg5;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes4),
                                                template_id: _rt::string_lift(bytes5),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e6)
                                    }
                                };

                                v6
                            };
                            TypedTimelineResultWorker::LeafTimeline(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let v23 = match arg1 {
                                    0 => {
                                        let e23 = {
                                            let len7 = arg3;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len7, len7);
                                            let len8 = arg5;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len8, len8);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes7),
                                                template_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e23)
                                    }
                                    1 => {
                                        let e23 = {
                                            let len9 = arg3;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len9, len9);
                                            let len10 = arg5;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len10, len10);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes9),
                                                template_id: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e23)
                                    }
                                    2 => {
                                        let e23 = {
                                            let len11 = arg3;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len11, len11);
                                            let len12 = arg5;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len12, len12);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes11),
                                                template_id: _rt::string_lift(bytes12),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e23)
                                    }
                                    3 => {
                                        let e23 = {
                                            let len13 = arg3;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                                            let len14 = arg5;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len14, len14);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes13),
                                                template_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e23)
                                    }
                                    4 => {
                                        let e23 = {
                                            let len15 = arg3;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len15, len15);
                                            let len16 = arg5;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len16, len16);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes15),
                                                template_id: _rt::string_lift(bytes16),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e23)
                                    }
                                    5 => {
                                        let e23 = {
                                            let len17 = arg3;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len17, len17);
                                            let len18 = arg5;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len18, len18);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes17),
                                                template_id: _rt::string_lift(bytes18),
                                            }
                                        };
                                        DerivedTimelineNode::And(e23)
                                    }
                                    6 => {
                                        let e23 = {
                                            let len19 = arg3;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len19, len19);
                                            let len20 = arg5;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len20, len20);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes19),
                                                template_id: _rt::string_lift(bytes20),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e23 = {
                                            let len21 = arg3;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len21, len21);
                                            let len22 = arg5;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len22, len22);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes21),
                                                template_id: _rt::string_lift(bytes22),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e23)
                                    }
                                };

                                v23
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e24)
                        }
                    };
                    use super::super::super::super::timeline::event_processor::api::EventValue as V26;
                    let v26 = match arg6 {
                        0 => {
                            let e26 = {
                                let len25 = arg8;
                                let bytes25 = _rt::Vec::from_raw_parts(
                                    arg7.as_ptr().cast::<*mut u8>().read().cast(),
                                    len25,
                                    len25,
                                );

                                _rt::string_lift(bytes25)
                            };
                            V26::StringValue(e26)
                        }
                        1 => {
                            let e26 = arg7.assume_init() as i64;
                            V26::IntValue(e26)
                        }
                        2 => {
                            let e26 = f64::from_bits(arg7.assume_init() as i64 as u64);
                            V26::FloatValue(e26)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e26 = _rt::bool_lift(arg7.assume_init() as i64 as i32 as u8);
                            V26::BoolValue(e26)
                        }
                    };
                    let result27 = T::initialize_less_than_or_equal_to(v24, v26);
                    let ptr28 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result27 {
                        Ok(e) => {
                            *ptr28.add(0).cast::<u8>() = (0i32) as u8;
                            let vec29 = (e.into_bytes()).into_boxed_slice();
                            let ptr29 = vec29.as_ptr().cast::<u8>();
                            let len29 = vec29.len();
                            ::core::mem::forget(vec29);
                            *ptr28.add(8).cast::<usize>() = len29;
                            *ptr28.add(4).cast::<*mut u8>() = ptr29.cast_mut();
                        }
                        Err(e) => {
                            *ptr28.add(0).cast::<u8>() = (1i32) as u8;
                            let vec30 = (e.into_bytes()).into_boxed_slice();
                            let ptr30 = vec30.as_ptr().cast::<u8>();
                            let len30 = vec30.len();
                            ::core::mem::forget(vec30);
                            *ptr28.add(8).cast::<usize>() = len30;
                            *ptr28.add(4).cast::<*mut u8>() = ptr30.cast_mut();
                        }
                    };
                    ptr28
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_less_than_or_equal_to<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_and_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: i32,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: *mut u8,
                    arg11: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v24 = match arg0 {
                        0 => {
                            let e24 = {
                                let v6 = match arg1 {
                                    0 => {
                                        let e6 = {
                                            let len0 = arg3;
                                            let bytes0 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                                            let len1 = arg5;
                                            let bytes1 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes0),
                                                template_id: _rt::string_lift(bytes1),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e6)
                                    }
                                    1 => {
                                        let e6 = {
                                            let len2 = arg3;
                                            let bytes2 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len2, len2);
                                            let len3 = arg5;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len3, len3);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes2),
                                                template_id: _rt::string_lift(bytes3),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e6 = {
                                            let len4 = arg3;
                                            let bytes4 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len4, len4);
                                            let len5 = arg5;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes4),
                                                template_id: _rt::string_lift(bytes5),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e6)
                                    }
                                };

                                v6
                            };
                            TypedTimelineResultWorker::LeafTimeline(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let v23 = match arg1 {
                                    0 => {
                                        let e23 = {
                                            let len7 = arg3;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len7, len7);
                                            let len8 = arg5;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len8, len8);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes7),
                                                template_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e23)
                                    }
                                    1 => {
                                        let e23 = {
                                            let len9 = arg3;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len9, len9);
                                            let len10 = arg5;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len10, len10);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes9),
                                                template_id: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e23)
                                    }
                                    2 => {
                                        let e23 = {
                                            let len11 = arg3;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len11, len11);
                                            let len12 = arg5;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len12, len12);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes11),
                                                template_id: _rt::string_lift(bytes12),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e23)
                                    }
                                    3 => {
                                        let e23 = {
                                            let len13 = arg3;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                                            let len14 = arg5;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len14, len14);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes13),
                                                template_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e23)
                                    }
                                    4 => {
                                        let e23 = {
                                            let len15 = arg3;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len15, len15);
                                            let len16 = arg5;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len16, len16);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes15),
                                                template_id: _rt::string_lift(bytes16),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e23)
                                    }
                                    5 => {
                                        let e23 = {
                                            let len17 = arg3;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len17, len17);
                                            let len18 = arg5;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len18, len18);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes17),
                                                template_id: _rt::string_lift(bytes18),
                                            }
                                        };
                                        DerivedTimelineNode::And(e23)
                                    }
                                    6 => {
                                        let e23 = {
                                            let len19 = arg3;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len19, len19);
                                            let len20 = arg5;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len20, len20);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes19),
                                                template_id: _rt::string_lift(bytes20),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e23 = {
                                            let len21 = arg3;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len21, len21);
                                            let len22 = arg5;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len22, len22);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes21),
                                                template_id: _rt::string_lift(bytes22),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e23)
                                    }
                                };

                                v23
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e24)
                        }
                    };
                    let v49 = match arg6 {
                        0 => {
                            let e49 = {
                                let v31 = match arg7 {
                                    0 => {
                                        let e31 = {
                                            let len25 = arg9;
                                            let bytes25 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len25, len25);
                                            let len26 = arg11;
                                            let bytes26 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len26,
                                                len26,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes25),
                                                template_id: _rt::string_lift(bytes26),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e31)
                                    }
                                    1 => {
                                        let e31 = {
                                            let len27 = arg9;
                                            let bytes27 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len27, len27);
                                            let len28 = arg11;
                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len28,
                                                len28,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes27),
                                                template_id: _rt::string_lift(bytes28),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e31)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e31 = {
                                            let len29 = arg9;
                                            let bytes29 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len29, len29);
                                            let len30 = arg11;
                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len30,
                                                len30,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes29),
                                                template_id: _rt::string_lift(bytes30),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e31)
                                    }
                                };

                                v31
                            };
                            TypedTimelineResultWorker::LeafTimeline(e49)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e49 = {
                                let v48 = match arg7 {
                                    0 => {
                                        let e48 = {
                                            let len32 = arg9;
                                            let bytes32 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len32, len32);
                                            let len33 = arg11;
                                            let bytes33 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len33,
                                                len33,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes32),
                                                template_id: _rt::string_lift(bytes33),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e48)
                                    }
                                    1 => {
                                        let e48 = {
                                            let len34 = arg9;
                                            let bytes34 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len34, len34);
                                            let len35 = arg11;
                                            let bytes35 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len35,
                                                len35,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes34),
                                                template_id: _rt::string_lift(bytes35),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e48)
                                    }
                                    2 => {
                                        let e48 = {
                                            let len36 = arg9;
                                            let bytes36 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len36, len36);
                                            let len37 = arg11;
                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len37,
                                                len37,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes36),
                                                template_id: _rt::string_lift(bytes37),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e48)
                                    }
                                    3 => {
                                        let e48 = {
                                            let len38 = arg9;
                                            let bytes38 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len38, len38);
                                            let len39 = arg11;
                                            let bytes39 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len39,
                                                len39,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes38),
                                                template_id: _rt::string_lift(bytes39),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e48)
                                    }
                                    4 => {
                                        let e48 = {
                                            let len40 = arg9;
                                            let bytes40 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len40, len40);
                                            let len41 = arg11;
                                            let bytes41 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len41,
                                                len41,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes40),
                                                template_id: _rt::string_lift(bytes41),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e48)
                                    }
                                    5 => {
                                        let e48 = {
                                            let len42 = arg9;
                                            let bytes42 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len42, len42);
                                            let len43 = arg11;
                                            let bytes43 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len43,
                                                len43,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes42),
                                                template_id: _rt::string_lift(bytes43),
                                            }
                                        };
                                        DerivedTimelineNode::And(e48)
                                    }
                                    6 => {
                                        let e48 = {
                                            let len44 = arg9;
                                            let bytes44 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len44, len44);
                                            let len45 = arg11;
                                            let bytes45 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len45,
                                                len45,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes44),
                                                template_id: _rt::string_lift(bytes45),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e48)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e48 = {
                                            let len46 = arg9;
                                            let bytes46 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len46, len46);
                                            let len47 = arg11;
                                            let bytes47 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len47,
                                                len47,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes46),
                                                template_id: _rt::string_lift(bytes47),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e48)
                                    }
                                };

                                v48
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e49)
                        }
                    };
                    let result50 = T::initialize_and(v24, v49);
                    let ptr51 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result50 {
                        Ok(e) => {
                            *ptr51.add(0).cast::<u8>() = (0i32) as u8;
                            let vec52 = (e.into_bytes()).into_boxed_slice();
                            let ptr52 = vec52.as_ptr().cast::<u8>();
                            let len52 = vec52.len();
                            ::core::mem::forget(vec52);
                            *ptr51.add(8).cast::<usize>() = len52;
                            *ptr51.add(4).cast::<*mut u8>() = ptr52.cast_mut();
                        }
                        Err(e) => {
                            *ptr51.add(0).cast::<u8>() = (1i32) as u8;
                            let vec53 = (e.into_bytes()).into_boxed_slice();
                            let ptr53 = vec53.as_ptr().cast::<u8>();
                            let len53 = vec53.len();
                            ::core::mem::forget(vec53);
                            *ptr51.add(8).cast::<usize>() = len53;
                            *ptr51.add(4).cast::<*mut u8>() = ptr53.cast_mut();
                        }
                    };
                    ptr51
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_and<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_or_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: i32,
                    arg8: *mut u8,
                    arg9: usize,
                    arg10: *mut u8,
                    arg11: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v24 = match arg0 {
                        0 => {
                            let e24 = {
                                let v6 = match arg1 {
                                    0 => {
                                        let e6 = {
                                            let len0 = arg3;
                                            let bytes0 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                                            let len1 = arg5;
                                            let bytes1 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes0),
                                                template_id: _rt::string_lift(bytes1),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e6)
                                    }
                                    1 => {
                                        let e6 = {
                                            let len2 = arg3;
                                            let bytes2 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len2, len2);
                                            let len3 = arg5;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len3, len3);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes2),
                                                template_id: _rt::string_lift(bytes3),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e6 = {
                                            let len4 = arg3;
                                            let bytes4 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len4, len4);
                                            let len5 = arg5;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes4),
                                                template_id: _rt::string_lift(bytes5),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e6)
                                    }
                                };

                                v6
                            };
                            TypedTimelineResultWorker::LeafTimeline(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let v23 = match arg1 {
                                    0 => {
                                        let e23 = {
                                            let len7 = arg3;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len7, len7);
                                            let len8 = arg5;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len8, len8);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes7),
                                                template_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e23)
                                    }
                                    1 => {
                                        let e23 = {
                                            let len9 = arg3;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len9, len9);
                                            let len10 = arg5;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len10, len10);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes9),
                                                template_id: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e23)
                                    }
                                    2 => {
                                        let e23 = {
                                            let len11 = arg3;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len11, len11);
                                            let len12 = arg5;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len12, len12);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes11),
                                                template_id: _rt::string_lift(bytes12),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e23)
                                    }
                                    3 => {
                                        let e23 = {
                                            let len13 = arg3;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                                            let len14 = arg5;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len14, len14);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes13),
                                                template_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e23)
                                    }
                                    4 => {
                                        let e23 = {
                                            let len15 = arg3;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len15, len15);
                                            let len16 = arg5;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len16, len16);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes15),
                                                template_id: _rt::string_lift(bytes16),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e23)
                                    }
                                    5 => {
                                        let e23 = {
                                            let len17 = arg3;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len17, len17);
                                            let len18 = arg5;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len18, len18);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes17),
                                                template_id: _rt::string_lift(bytes18),
                                            }
                                        };
                                        DerivedTimelineNode::And(e23)
                                    }
                                    6 => {
                                        let e23 = {
                                            let len19 = arg3;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len19, len19);
                                            let len20 = arg5;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len20, len20);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes19),
                                                template_id: _rt::string_lift(bytes20),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e23 = {
                                            let len21 = arg3;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len21, len21);
                                            let len22 = arg5;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len22, len22);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes21),
                                                template_id: _rt::string_lift(bytes22),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e23)
                                    }
                                };

                                v23
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e24)
                        }
                    };
                    let v49 = match arg6 {
                        0 => {
                            let e49 = {
                                let v31 = match arg7 {
                                    0 => {
                                        let e31 = {
                                            let len25 = arg9;
                                            let bytes25 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len25, len25);
                                            let len26 = arg11;
                                            let bytes26 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len26,
                                                len26,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes25),
                                                template_id: _rt::string_lift(bytes26),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e31)
                                    }
                                    1 => {
                                        let e31 = {
                                            let len27 = arg9;
                                            let bytes27 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len27, len27);
                                            let len28 = arg11;
                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len28,
                                                len28,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes27),
                                                template_id: _rt::string_lift(bytes28),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e31)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e31 = {
                                            let len29 = arg9;
                                            let bytes29 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len29, len29);
                                            let len30 = arg11;
                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len30,
                                                len30,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes29),
                                                template_id: _rt::string_lift(bytes30),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e31)
                                    }
                                };

                                v31
                            };
                            TypedTimelineResultWorker::LeafTimeline(e49)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e49 = {
                                let v48 = match arg7 {
                                    0 => {
                                        let e48 = {
                                            let len32 = arg9;
                                            let bytes32 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len32, len32);
                                            let len33 = arg11;
                                            let bytes33 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len33,
                                                len33,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes32),
                                                template_id: _rt::string_lift(bytes33),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e48)
                                    }
                                    1 => {
                                        let e48 = {
                                            let len34 = arg9;
                                            let bytes34 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len34, len34);
                                            let len35 = arg11;
                                            let bytes35 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len35,
                                                len35,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes34),
                                                template_id: _rt::string_lift(bytes35),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e48)
                                    }
                                    2 => {
                                        let e48 = {
                                            let len36 = arg9;
                                            let bytes36 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len36, len36);
                                            let len37 = arg11;
                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len37,
                                                len37,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes36),
                                                template_id: _rt::string_lift(bytes37),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e48)
                                    }
                                    3 => {
                                        let e48 = {
                                            let len38 = arg9;
                                            let bytes38 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len38, len38);
                                            let len39 = arg11;
                                            let bytes39 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len39,
                                                len39,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes38),
                                                template_id: _rt::string_lift(bytes39),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e48)
                                    }
                                    4 => {
                                        let e48 = {
                                            let len40 = arg9;
                                            let bytes40 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len40, len40);
                                            let len41 = arg11;
                                            let bytes41 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len41,
                                                len41,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes40),
                                                template_id: _rt::string_lift(bytes41),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e48)
                                    }
                                    5 => {
                                        let e48 = {
                                            let len42 = arg9;
                                            let bytes42 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len42, len42);
                                            let len43 = arg11;
                                            let bytes43 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len43,
                                                len43,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes42),
                                                template_id: _rt::string_lift(bytes43),
                                            }
                                        };
                                        DerivedTimelineNode::And(e48)
                                    }
                                    6 => {
                                        let e48 = {
                                            let len44 = arg9;
                                            let bytes44 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len44, len44);
                                            let len45 = arg11;
                                            let bytes45 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len45,
                                                len45,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes44),
                                                template_id: _rt::string_lift(bytes45),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e48)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e48 = {
                                            let len46 = arg9;
                                            let bytes46 =
                                                _rt::Vec::from_raw_parts(arg8.cast(), len46, len46);
                                            let len47 = arg11;
                                            let bytes47 = _rt::Vec::from_raw_parts(
                                                arg10.cast(),
                                                len47,
                                                len47,
                                            );

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes46),
                                                template_id: _rt::string_lift(bytes47),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e48)
                                    }
                                };

                                v48
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e49)
                        }
                    };
                    let result50 = T::initialize_or(v24, v49);
                    let ptr51 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result50 {
                        Ok(e) => {
                            *ptr51.add(0).cast::<u8>() = (0i32) as u8;
                            let vec52 = (e.into_bytes()).into_boxed_slice();
                            let ptr52 = vec52.as_ptr().cast::<u8>();
                            let len52 = vec52.len();
                            ::core::mem::forget(vec52);
                            *ptr51.add(8).cast::<usize>() = len52;
                            *ptr51.add(4).cast::<*mut u8>() = ptr52.cast_mut();
                        }
                        Err(e) => {
                            *ptr51.add(0).cast::<u8>() = (1i32) as u8;
                            let vec53 = (e.into_bytes()).into_boxed_slice();
                            let ptr53 = vec53.as_ptr().cast::<u8>();
                            let len53 = vec53.len();
                            ::core::mem::forget(vec53);
                            *ptr51.add(8).cast::<usize>() = len53;
                            *ptr51.add(4).cast::<*mut u8>() = ptr53.cast_mut();
                        }
                    };
                    ptr51
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_or<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_not_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let v24 = match arg0 {
                        0 => {
                            let e24 = {
                                let v6 = match arg1 {
                                    0 => {
                                        let e6 = {
                                            let len0 = arg3;
                                            let bytes0 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                                            let len1 = arg5;
                                            let bytes1 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len1, len1);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes0),
                                                template_id: _rt::string_lift(bytes1),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExisted(e6)
                                    }
                                    1 => {
                                        let e6 = {
                                            let len2 = arg3;
                                            let bytes2 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len2, len2);
                                            let len3 = arg5;
                                            let bytes3 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len3, len3);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes2),
                                                template_id: _rt::string_lift(bytes3),
                                            }
                                        };
                                        LeafTimelineNode::TlHasExistedWithin(e6)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                        let e6 = {
                                            let len4 = arg3;
                                            let bytes4 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len4, len4);
                                            let len5 = arg5;
                                            let bytes5 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len5, len5);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes4),
                                                template_id: _rt::string_lift(bytes5),
                                            }
                                        };
                                        LeafTimelineNode::TlLatestEventToState(e6)
                                    }
                                };

                                v6
                            };
                            TypedTimelineResultWorker::LeafTimeline(e24)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e24 = {
                                let v23 = match arg1 {
                                    0 => {
                                        let e23 = {
                                            let len7 = arg3;
                                            let bytes7 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len7, len7);
                                            let len8 = arg5;
                                            let bytes8 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len8, len8);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes7),
                                                template_id: _rt::string_lift(bytes8),
                                            }
                                        };
                                        DerivedTimelineNode::EqualTo(e23)
                                    }
                                    1 => {
                                        let e23 = {
                                            let len9 = arg3;
                                            let bytes9 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len9, len9);
                                            let len10 = arg5;
                                            let bytes10 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len10, len10);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes9),
                                                template_id: _rt::string_lift(bytes10),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThan(e23)
                                    }
                                    2 => {
                                        let e23 = {
                                            let len11 = arg3;
                                            let bytes11 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len11, len11);
                                            let len12 = arg5;
                                            let bytes12 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len12, len12);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes11),
                                                template_id: _rt::string_lift(bytes12),
                                            }
                                        };
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e23)
                                    }
                                    3 => {
                                        let e23 = {
                                            let len13 = arg3;
                                            let bytes13 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len13, len13);
                                            let len14 = arg5;
                                            let bytes14 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len14, len14);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes13),
                                                template_id: _rt::string_lift(bytes14),
                                            }
                                        };
                                        DerivedTimelineNode::LessThan(e23)
                                    }
                                    4 => {
                                        let e23 = {
                                            let len15 = arg3;
                                            let bytes15 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len15, len15);
                                            let len16 = arg5;
                                            let bytes16 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len16, len16);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes15),
                                                template_id: _rt::string_lift(bytes16),
                                            }
                                        };
                                        DerivedTimelineNode::LessThanOrEqualTo(e23)
                                    }
                                    5 => {
                                        let e23 = {
                                            let len17 = arg3;
                                            let bytes17 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len17, len17);
                                            let len18 = arg5;
                                            let bytes18 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len18, len18);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes17),
                                                template_id: _rt::string_lift(bytes18),
                                            }
                                        };
                                        DerivedTimelineNode::And(e23)
                                    }
                                    6 => {
                                        let e23 = {
                                            let len19 = arg3;
                                            let bytes19 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len19, len19);
                                            let len20 = arg5;
                                            let bytes20 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len20, len20);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes19),
                                                template_id: _rt::string_lift(bytes20),
                                            }
                                        };
                                        DerivedTimelineNode::Or(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                        let e23 = {
                                            let len21 = arg3;
                                            let bytes21 =
                                                _rt::Vec::from_raw_parts(arg2.cast(), len21, len21);
                                            let len22 = arg5;
                                            let bytes22 =
                                                _rt::Vec::from_raw_parts(arg4.cast(), len22, len22);

                                            TimelineResultWorker {
                                                worker_id: _rt::string_lift(bytes21),
                                                template_id: _rt::string_lift(bytes22),
                                            }
                                        };
                                        DerivedTimelineNode::Not(e23)
                                    }
                                };

                                v23
                            };
                            TypedTimelineResultWorker::DerivedTimeline(e24)
                        }
                    };
                    let result25 = T::initialize_not(v24);
                    let ptr26 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result25 {
                        Ok(e) => {
                            *ptr26.add(0).cast::<u8>() = (0i32) as u8;
                            let vec27 = (e.into_bytes()).into_boxed_slice();
                            let ptr27 = vec27.as_ptr().cast::<u8>();
                            let len27 = vec27.len();
                            ::core::mem::forget(vec27);
                            *ptr26.add(8).cast::<usize>() = len27;
                            *ptr26.add(4).cast::<*mut u8>() = ptr27.cast_mut();
                        }
                        Err(e) => {
                            *ptr26.add(0).cast::<u8>() = (1i32) as u8;
                            let vec28 = (e.into_bytes()).into_boxed_slice();
                            let ptr28 = vec28.as_ptr().cast::<u8>();
                            let len28 = vec28.len();
                            ::core::mem::forget(vec28);
                            *ptr26.add(8).cast::<usize>() = len28;
                            *ptr26.add(4).cast::<*mut u8>() = ptr28.cast_mut();
                        }
                    };
                    ptr26
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_not<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_timeline_result_cabi<T: Guest>(arg0: i64) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get_timeline_result(arg0 as u64);
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::timeline::event_processor::api::TimelineResult{ results:results2, } = e;
                            let vec7 = results2;
                            let len7 = vec7.len();
                            let layout7 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec7.len() * 40, 8);
                            let result7 = if layout7.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout7);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec7.into_iter().enumerate() {
                                let base = result7.add(i * 40);
                                {
                                    let super::super::super::super::timeline::event_processor::api::TimelineResultPoint{ time_period:time_period3, value:value3, } = e;
                                    let super::super::super::super::timeline::event_processor::api::TimePeriod{ t1:t14, t2:t24, } = time_period3;
                                    *base.add(0).cast::<i64>() = _rt::as_i64(t14);
                                    match t24 {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    use super::super::super::super::timeline::event_processor::api::EventValue as V6;
                                    match value3 {
                                        V6::StringValue(e) => {
                                            *base.add(24).cast::<u8>() = (0i32) as u8;
                                            let vec5 = (e.into_bytes()).into_boxed_slice();
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();
                                            ::core::mem::forget(vec5);
                                            *base.add(36).cast::<usize>() = len5;
                                            *base.add(32).cast::<*mut u8>() = ptr5.cast_mut();
                                        }
                                        V6::IntValue(e) => {
                                            *base.add(24).cast::<u8>() = (1i32) as u8;
                                            *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                        }
                                        V6::FloatValue(e) => {
                                            *base.add(24).cast::<u8>() = (2i32) as u8;
                                            *base.add(32).cast::<f64>() = _rt::as_f64(e);
                                        }
                                        V6::BoolValue(e) => {
                                            *base.add(24).cast::<u8>() = (3i32) as u8;
                                            *base.add(32).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            })
                                                as u8;
                                        }
                                    }
                                }
                            }
                            *ptr1.add(8).cast::<usize>() = len7;
                            *ptr1.add(4).cast::<*mut u8>() = result7;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let vec8 = (e.into_bytes()).into_boxed_slice();
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            ::core::mem::forget(vec8);
                            *ptr1.add(8).cast::<usize>() = len8;
                            *ptr1.add(4).cast::<*mut u8>() = ptr8.cast_mut();
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_timeline_result<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l4 = *arg0.add(4).cast::<*mut u8>();
                            let l5 = *arg0.add(8).cast::<usize>();
                            let base6 = l4;
                            let len6 = l5;
                            for i in 0..len6 {
                                let base = base6.add(i * 40);
                                {
                                    let l1 = i32::from(*base.add(24).cast::<u8>());
                                    match l1 {
                                        0 => {
                                            let l2 = *base.add(32).cast::<*mut u8>();
                                            let l3 = *base.add(36).cast::<usize>();
                                            _rt::cabi_dealloc(l2, l3, 1);
                                        }
                                        1 => (),
                                        2 => (),
                                        _ => (),
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base6, len6 * 40, 8);
                        }
                        _ => {
                            let l7 = *arg0.add(4).cast::<*mut u8>();
                            let l8 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l7, l8, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn initialize_equal(
                        child_worker: TypedTimelineResultWorker,
                        event_value: EventValue,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_greater_than(
                        child_worker: TypedTimelineResultWorker,
                        event_value: EventValue,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_greater_than_or_equal_to(
                        child_worker: TypedTimelineResultWorker,
                        event_value: EventValue,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_less_than(
                        child_worker: TypedTimelineResultWorker,
                        event_value: EventValue,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_less_than_or_equal_to(
                        child_worker: TypedTimelineResultWorker,
                        event_value: EventValue,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_and(
                        child_worker1: TypedTimelineResultWorker,
                        child_worker2: TypedTimelineResultWorker,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_or(
                        child_worker1: TypedTimelineResultWorker,
                        child_worker2: TypedTimelineResultWorker,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_not(
                        child_worker: TypedTimelineResultWorker,
                    ) -> Result<_rt::String, _rt::String>;
                    fn get_timeline_result(t1: u64) -> Result<TimelineResult, _rt::String>;
                }
                #[doc(hidden)]

                macro_rules! __export_timeline_timeline_processor_api_cabi{
                      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

                        #[export_name = "timeline:timeline-processor/api#initialize-equal"]
                        unsafe extern "C" fn export_initialize_equal(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,arg6: i32,arg7: ::core::mem::MaybeUninit::<u64>,arg8: usize,) -> *mut u8 {
                          $($path_to_types)*::_export_initialize_equal_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
                        }
                        #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-equal"]
                        unsafe extern "C" fn _post_return_initialize_equal(arg0: *mut u8,) {
                          $($path_to_types)*::__post_return_initialize_equal::<$ty>(arg0)
                        }
                        #[export_name = "timeline:timeline-processor/api#initialize-greater-than"]
                        unsafe extern "C" fn export_initialize_greater_than(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,arg6: i32,arg7: ::core::mem::MaybeUninit::<u64>,arg8: usize,) -> *mut u8 {
                          $($path_to_types)*::_export_initialize_greater_than_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
                        }
                        #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-greater-than"]
                        unsafe extern "C" fn _post_return_initialize_greater_than(arg0: *mut u8,) {
                          $($path_to_types)*::__post_return_initialize_greater_than::<$ty>(arg0)
                        }
                        #[export_name = "timeline:timeline-processor/api#initialize-greater-than-or-equal-to"]
                        unsafe extern "C" fn export_initialize_greater_than_or_equal_to(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,arg6: i32,arg7: ::core::mem::MaybeUninit::<u64>,arg8: usize,) -> *mut u8 {
                          $($path_to_types)*::_export_initialize_greater_than_or_equal_to_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
                        }
                        #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-greater-than-or-equal-to"]
                        unsafe extern "C" fn _post_return_initialize_greater_than_or_equal_to(arg0: *mut u8,) {
                          $($path_to_types)*::__post_return_initialize_greater_than_or_equal_to::<$ty>(arg0)
                        }
                        #[export_name = "timeline:timeline-processor/api#initialize-less-than"]
                        unsafe extern "C" fn export_initialize_less_than(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,arg6: i32,arg7: ::core::mem::MaybeUninit::<u64>,arg8: usize,) -> *mut u8 {
                          $($path_to_types)*::_export_initialize_less_than_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
                        }
                        #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-less-than"]
                        unsafe extern "C" fn _post_return_initialize_less_than(arg0: *mut u8,) {
                          $($path_to_types)*::__post_return_initialize_less_than::<$ty>(arg0)
                        }
                        #[export_name = "timeline:timeline-processor/api#initialize-less-than-or-equal-to"]
                        unsafe extern "C" fn export_initialize_less_than_or_equal_to(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,arg6: i32,arg7: ::core::mem::MaybeUninit::<u64>,arg8: usize,) -> *mut u8 {
                          $($path_to_types)*::_export_initialize_less_than_or_equal_to_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
                        }
                        #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-less-than-or-equal-to"]
                        unsafe extern "C" fn _post_return_initialize_less_than_or_equal_to(arg0: *mut u8,) {
                          $($path_to_types)*::__post_return_initialize_less_than_or_equal_to::<$ty>(arg0)
                        }
                        #[export_name = "timeline:timeline-processor/api#initialize-and"]
                        unsafe extern "C" fn export_initialize_and(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,arg6: i32,arg7: i32,arg8: *mut u8,arg9: usize,arg10: *mut u8,arg11: usize,) -> *mut u8 {
                          $($path_to_types)*::_export_initialize_and_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
                        }
                        #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-and"]
                        unsafe extern "C" fn _post_return_initialize_and(arg0: *mut u8,) {
                          $($path_to_types)*::__post_return_initialize_and::<$ty>(arg0)
                        }
                        #[export_name = "timeline:timeline-processor/api#initialize-or"]
                        unsafe extern "C" fn export_initialize_or(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,arg6: i32,arg7: i32,arg8: *mut u8,arg9: usize,arg10: *mut u8,arg11: usize,) -> *mut u8 {
                          $($path_to_types)*::_export_initialize_or_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
                        }
                        #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-or"]
                        unsafe extern "C" fn _post_return_initialize_or(arg0: *mut u8,) {
                          $($path_to_types)*::__post_return_initialize_or::<$ty>(arg0)
                        }
                        #[export_name = "timeline:timeline-processor/api#initialize-not"]
                        unsafe extern "C" fn export_initialize_not(arg0: i32,arg1: i32,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,) -> *mut u8 {
                          $($path_to_types)*::_export_initialize_not_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5)
                        }
                        #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-not"]
                        unsafe extern "C" fn _post_return_initialize_not(arg0: *mut u8,) {
                          $($path_to_types)*::__post_return_initialize_not::<$ty>(arg0)
                        }
                        #[export_name = "timeline:timeline-processor/api#get-timeline-result"]
                        unsafe extern "C" fn export_get_timeline_result(arg0: i64,) -> *mut u8 {
                          $($path_to_types)*::_export_get_timeline_result_cabi::<$ty>(arg0)
                        }
                        #[export_name = "cabi_post_timeline:timeline-processor/api#get-timeline-result"]
                        unsafe extern "C" fn _post_return_get_timeline_result(arg0: *mut u8,) {
                          $($path_to_types)*::__post_return_get_timeline_result::<$ty>(arg0)
                        }
                      };);
                    }
                #[doc(hidden)]
                pub(crate) use __export_timeline_timeline_processor_api_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self { handle: AtomicU32::new(handle), _marker: marker::PhantomData }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::alloc;
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }

    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }

    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }

    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }

    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn char_lift(val: u32) -> char {
        if cfg!(debug_assertions) {
            core::char::from_u32(val).unwrap()
        } else {
            core::char::from_u32_unchecked(val)
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_timeline_processor_impl {
              ($ty:ident) => (self::export!($ty with_types_in self););
              ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
              $($path_to_types_root)*::exports::timeline::timeline_processor::api::__export_timeline_timeline_processor_api_cabi!($ty with_types_in $($path_to_types_root)*::exports::timeline::timeline_processor::api);
              )
            }
#[doc(inline)]
pub(crate) use __export_timeline_processor_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:timeline-processor:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 8919] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xceD\x01A\x02\x01A\x15\
\x01B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\x04\0\x16[\
method]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[method]pollab\
le.block\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04poll\x01\x06\x03\
\x01\x12wasi:io/poll@0.2.0\x05\0\x02\x03\0\0\x08pollable\x01B*\x02\x03\x02\x01\x01\
\x04\0\x08pollable\x03\0\0\x01z\x04\0\x0anode-index\x03\0\x02\x01r\x01\x05values\
\x04\0\x03uri\x03\0\x04\x01p\x03\x01k\x03\x01o\x02y\x07\x01p\x7f\x01j\x01\x07\x01\
\x07\x01o\x02\x05w\x01q\x16\x0crecord-value\x01\x06\0\x0dvariant-value\x01\x08\0\
\x0aenum-value\x01y\0\x0bflags-value\x01\x09\0\x0btuple-value\x01\x06\0\x0alist-\
value\x01\x06\0\x0coption-value\x01\x07\0\x0cresult-value\x01\x0a\0\x07prim-u8\x01\
}\0\x08prim-u16\x01{\0\x08prim-u32\x01y\0\x08prim-u64\x01w\0\x07prim-s8\x01~\0\x08\
prim-s16\x01|\0\x08prim-s32\x01z\0\x08prim-s64\x01x\0\x0cprim-float32\x01v\0\x0c\
prim-float64\x01u\0\x09prim-char\x01t\0\x09prim-bool\x01\x7f\0\x0bprim-string\x01\
s\0\x06handle\x01\x0b\0\x04\0\x08wit-node\x03\0\x0c\x01p\x0d\x01r\x01\x05nodes\x0e\
\x04\0\x09wit-value\x03\0\x0f\x01q\x04\x0eprotocol-error\x01s\0\x06denied\x01s\0\
\x09not-found\x01s\0\x15remote-internal-error\x01s\0\x04\0\x09rpc-error\x03\0\x11\
\x04\0\x08wasm-rpc\x03\x01\x04\0\x14future-invoke-result\x03\x01\x01i\x13\x01@\x01\
\x08location\x05\0\x15\x04\0\x15[constructor]wasm-rpc\x01\x16\x01h\x13\x01p\x10\x01\
j\x01\x10\x01\x12\x01@\x03\x04self\x17\x0dfunction-names\x0ffunction-params\x18\0\
\x19\x04\0![method]wasm-rpc.invoke-and-await\x01\x1a\x01j\0\x01\x12\x01@\x03\x04\
self\x17\x0dfunction-names\x0ffunction-params\x18\0\x1b\x04\0\x17[method]wasm-rp\
c.invoke\x01\x1c\x01i\x14\x01@\x03\x04self\x17\x0dfunction-names\x0ffunction-par\
ams\x18\0\x1d\x04\0'[method]wasm-rpc.async-invoke-and-await\x01\x1e\x01h\x14\x01\
i\x01\x01@\x01\x04self\x1f\0\x20\x04\0&[method]future-invoke-result.subscribe\x01\
!\x01k\x19\x01@\x01\x04self\x1f\0\"\x04\0\x20[method]future-invoke-result.get\x01\
#\x03\x01\x15golem:rpc/types@0.1.0\x05\x02\x01B\x20\x01q\x04\x0cstring-value\x01\
s\0\x09int-value\x01x\0\x0bfloat-value\x01u\0\x0abool-value\x01\x7f\0\x04\0\x0be\
vent-value\x03\0\0\x01o\x02s\x01\x01p\x02\x01r\x02\x04timew\x05event\x03\x04\0\x05\
event\x03\0\x04\x01kw\x01r\x02\x02t1w\x02t2\x06\x04\0\x0btime-period\x03\0\x07\x01\
r\x02\x0btime-period\x08\x05value\x01\x04\0\x15timeline-result-point\x03\0\x09\x01\
p\x0a\x01r\x01\x07results\x0b\x04\0\x0ftimeline-result\x03\0\x0c\x01m\x03\x05equ\
al\x0cgreater-than\x09less-than\x04\0\x12event-predicate-op\x03\0\x0e\x01r\x03\x08\
col-names\x05value\x01\x02op\x0f\x04\0\x0fevent-predicate\x03\0\x10\x01j\x01s\x01\
s\x01@\x01\x0eevent-col-names\0\x12\x04\0\x1dinitialize-latest-event-state\x01\x13\
\x01@\x01\x0fevent-predicate\x11\0\x12\x04\0\x19initialize-tl-has-existed\x01\x14\
\x01@\x02\x0fevent-predicate\x11\x04timew\0\x12\x04\0\x20initialize-tl-has-exist\
ed-within\x01\x15\x01@\x01\x05event\x05\0\x12\x04\0\x09add-event\x01\x16\x01j\x01\
\x0d\x01s\x01@\x01\x02t1w\0\x17\x04\0\x15latest-event-to-state\x01\x18\x04\0\x0e\
tl-has-existed\x01\x18\x04\0\x15tl-has-existed-within\x01\x18\x03\x01\x1ctimelin\
e:event-processor/api\x05\x03\x02\x03\0\x01\x03uri\x02\x03\0\x02\x0bevent-value\x02\
\x03\0\x02\x05event\x02\x03\0\x02\x0btime-period\x02\x03\0\x02\x15timeline-resul\
t-point\x02\x03\0\x02\x0ftimeline-result\x02\x03\0\x02\x12event-predicate-op\x02\
\x03\0\x02\x0fevent-predicate\x01Bg\x02\x03\x02\x01\x04\x04\0\x0dgolem-rpc-uri\x03\
\0\0\x02\x03\x02\x01\x01\x04\0\x10wasi-io-pollable\x03\0\x02\x02\x03\x02\x01\x05\
\x04\0\x0bevent-value\x03\0\x04\x02\x03\x02\x01\x06\x04\0\x05event\x03\0\x06\x02\
\x03\x02\x01\x07\x04\0\x0btime-period\x03\0\x08\x02\x03\x02\x01\x08\x04\0\x15tim\
eline-result-point\x03\0\x0a\x02\x03\x02\x01\x09\x04\0\x0ftimeline-result\x03\0\x0c\
\x02\x03\x02\x01\x0a\x04\0\x12event-predicate-op\x03\0\x0e\x02\x03\x02\x01\x0b\x04\
\0\x0fevent-predicate\x03\0\x10\x04\0+future-initialize-latest-event-state-resul\
t\x03\x01\x04\0'future-initialize-tl-has-existed-result\x03\x01\x04\0.future-ini\
tialize-tl-has-existed-within-result\x03\x01\x04\0\x17future-add-event-result\x03\
\x01\x04\0#future-latest-event-to-state-result\x03\x01\x04\0\x1cfuture-tl-has-ex\
isted-result\x03\x01\x04\0#future-tl-has-existed-within-result\x03\x01\x04\0\x03\
api\x03\x01\x01h\x12\x01i\x03\x01@\x01\x04self\x1a\0\x1b\x04\0=[method]future-in\
itialize-latest-event-state-result.subscribe\x01\x1c\x01j\x01s\x01s\x01k\x1d\x01\
@\x01\x04self\x1a\0\x1e\x04\07[method]future-initialize-latest-event-state-resul\
t.get\x01\x1f\x01h\x13\x01@\x01\x04self\x20\0\x1b\x04\09[method]future-initializ\
e-tl-has-existed-result.subscribe\x01!\x01@\x01\x04self\x20\0\x1e\x04\03[method]\
future-initialize-tl-has-existed-result.get\x01\"\x01h\x14\x01@\x01\x04self#\0\x1b\
\x04\0@[method]future-initialize-tl-has-existed-within-result.subscribe\x01$\x01\
@\x01\x04self#\0\x1e\x04\0:[method]future-initialize-tl-has-existed-within-resul\
t.get\x01%\x01h\x15\x01@\x01\x04self&\0\x1b\x04\0)[method]future-add-event-resul\
t.subscribe\x01'\x01@\x01\x04self&\0\x1e\x04\0#[method]future-add-event-result.g\
et\x01(\x01h\x16\x01@\x01\x04self)\0\x1b\x04\05[method]future-latest-event-to-st\
ate-result.subscribe\x01*\x01j\x01\x0d\x01s\x01k+\x01@\x01\x04self)\0,\x04\0/[me\
thod]future-latest-event-to-state-result.get\x01-\x01h\x17\x01@\x01\x04self.\0\x1b\
\x04\0.[method]future-tl-has-existed-result.subscribe\x01/\x01@\x01\x04self.\0,\x04\
\0([method]future-tl-has-existed-result.get\x010\x01h\x18\x01@\x01\x04self1\0\x1b\
\x04\05[method]future-tl-has-existed-within-result.subscribe\x012\x01@\x01\x04se\
lf1\0,\x04\0/[method]future-tl-has-existed-within-result.get\x013\x01i\x19\x01@\x01\
\x08location\x01\04\x04\0\x10[constructor]api\x015\x01h\x19\x01@\x02\x04self6\x0e\
event-col-names\0\x1d\x04\02[method]api.blocking-initialize-latest-event-state\x01\
7\x01i\x12\x01@\x02\x04self6\x0eevent-col-names\08\x04\0)[method]api.initialize-\
latest-event-state\x019\x01@\x02\x04self6\x0fevent-predicate\x11\0\x1d\x04\0.[me\
thod]api.blocking-initialize-tl-has-existed\x01:\x01i\x13\x01@\x02\x04self6\x0fe\
vent-predicate\x11\0;\x04\0%[method]api.initialize-tl-has-existed\x01<\x01@\x03\x04\
self6\x0fevent-predicate\x11\x04timew\0\x1d\x04\05[method]api.blocking-initializ\
e-tl-has-existed-within\x01=\x01i\x14\x01@\x03\x04self6\x0fevent-predicate\x11\x04\
timew\0>\x04\0,[method]api.initialize-tl-has-existed-within\x01?\x01@\x02\x04sel\
f6\x05event\x07\0\x1d\x04\0\x1e[method]api.blocking-add-event\x01@\x01i\x15\x01@\
\x02\x04self6\x05event\x07\0\xc1\0\x04\0\x15[method]api.add-event\x01B\x01@\x02\x04\
self6\x02t1w\0+\x04\0*[method]api.blocking-latest-event-to-state\x01C\x01i\x16\x01\
@\x02\x04self6\x02t1w\0\xc4\0\x04\0![method]api.latest-event-to-state\x01E\x04\0\
#[method]api.blocking-tl-has-existed\x01C\x01i\x17\x01@\x02\x04self6\x02t1w\0\xc6\
\0\x04\0\x1a[method]api.tl-has-existed\x01G\x04\0*[method]api.blocking-tl-has-ex\
isted-within\x01C\x01i\x18\x01@\x02\x04self6\x02t1w\0\xc8\0\x04\0![method]api.tl\
-has-existed-within\x01I\x03\x012timeline:event-processor-stub/stub-event-proces\
sor\x05\x0c\x01B{\x02\x03\x02\x01\x04\x04\0\x0dgolem-rpc-uri\x03\0\0\x02\x03\x02\
\x01\x01\x04\0\x10wasi-io-pollable\x03\0\x02\x02\x03\x02\x01\x08\x04\0\x15timeli\
ne-result-point\x03\0\x04\x01q\x04\x0cstring-value\x01s\0\x09int-value\x01x\0\x0b\
float-value\x01u\0\x0abool-value\x01\x7f\0\x04\0\x0bevent-value\x03\0\x06\x01p\x05\
\x01r\x01\x07results\x08\x04\0\x0ftimeline-result\x03\0\x09\x01r\x02\x09worker-i\
ds\x0btemplate-ids\x04\0\x16timeline-result-worker\x03\0\x0b\x01q\x03\x0etl-has-\
existed\x01\x0c\0\x15tl-has-existed-within\x01\x0c\0\x18tl-latest-event-to-state\
\x01\x0c\0\x04\0\x12leaf-timeline-node\x03\0\x0d\x01q\x08\x08equal-to\x01\x0c\0\x0c\
greater-than\x01\x0c\0\x18greater-than-or-equal-to\x01\x0c\0\x09less-than\x01\x0c\
\0\x15less-than-or-equal-to\x01\x0c\0\x03and\x01\x0c\0\x02or\x01\x0c\0\x03not\x01\
\x0c\0\x04\0\x15derived-timeline-node\x03\0\x0f\x01q\x02\x0dleaf-timeline\x01\x0e\
\0\x10derived-timeline\x01\x10\0\x04\0\x1ctyped-timeline-result-worker\x03\0\x11\
\x04\0\x1efuture-initialize-equal-result\x03\x01\x04\0%future-initialize-greater\
-than-result\x03\x01\x04\01future-initialize-greater-than-or-equal-to-result\x03\
\x01\x04\0\"future-initialize-less-than-result\x03\x01\x04\0.future-initialize-l\
ess-than-or-equal-to-result\x03\x01\x04\0\x1cfuture-initialize-and-result\x03\x01\
\x04\0\x1bfuture-initialize-or-result\x03\x01\x04\0\x1cfuture-initialize-not-res\
ult\x03\x01\x04\0!future-get-timeline-result-result\x03\x01\x04\0\x03api\x03\x01\
\x01h\x13\x01i\x03\x01@\x01\x04self\x1d\0\x1e\x04\00[method]future-initialize-eq\
ual-result.subscribe\x01\x1f\x01j\x01s\x01s\x01k\x20\x01@\x01\x04self\x1d\0!\x04\
\0*[method]future-initialize-equal-result.get\x01\"\x01h\x14\x01@\x01\x04self#\0\
\x1e\x04\07[method]future-initialize-greater-than-result.subscribe\x01$\x01@\x01\
\x04self#\0!\x04\01[method]future-initialize-greater-than-result.get\x01%\x01h\x15\
\x01@\x01\x04self&\0\x1e\x04\0C[method]future-initialize-greater-than-or-equal-t\
o-result.subscribe\x01'\x01@\x01\x04self&\0!\x04\0=[method]future-initialize-gre\
ater-than-or-equal-to-result.get\x01(\x01h\x16\x01@\x01\x04self)\0\x1e\x04\04[me\
thod]future-initialize-less-than-result.subscribe\x01*\x01@\x01\x04self)\0!\x04\0\
.[method]future-initialize-less-than-result.get\x01+\x01h\x17\x01@\x01\x04self,\0\
\x1e\x04\0@[method]future-initialize-less-than-or-equal-to-result.subscribe\x01-\
\x01@\x01\x04self,\0!\x04\0:[method]future-initialize-less-than-or-equal-to-resu\
lt.get\x01.\x01h\x18\x01@\x01\x04self/\0\x1e\x04\0.[method]future-initialize-and\
-result.subscribe\x010\x01@\x01\x04self/\0!\x04\0([method]future-initialize-and-\
result.get\x011\x01h\x19\x01@\x01\x04self2\0\x1e\x04\0-[method]future-initialize\
-or-result.subscribe\x013\x01@\x01\x04self2\0!\x04\0'[method]future-initialize-o\
r-result.get\x014\x01h\x1a\x01@\x01\x04self5\0\x1e\x04\0.[method]future-initiali\
ze-not-result.subscribe\x016\x01@\x01\x04self5\0!\x04\0([method]future-initializ\
e-not-result.get\x017\x01h\x1b\x01@\x01\x04self8\0\x1e\x04\03[method]future-get-\
timeline-result-result.subscribe\x019\x01j\x01\x0a\x01s\x01k:\x01@\x01\x04self8\0\
;\x04\0-[method]future-get-timeline-result-result.get\x01<\x01i\x1c\x01@\x01\x08\
location\x01\0=\x04\0\x10[constructor]api\x01>\x01h\x1c\x01@\x03\x04self?\x0cchi\
ld-worker\x12\x0bevent-value\x07\0\x20\x04\0%[method]api.blocking-initialize-equ\
al\x01@\x01i\x13\x01@\x03\x04self?\x0cchild-worker\x12\x0bevent-value\x07\0\xc1\0\
\x04\0\x1c[method]api.initialize-equal\x01B\x04\0,[method]api.blocking-initializ\
e-greater-than\x01@\x01i\x14\x01@\x03\x04self?\x0cchild-worker\x12\x0bevent-valu\
e\x07\0\xc3\0\x04\0#[method]api.initialize-greater-than\x01D\x04\08[method]api.b\
locking-initialize-greater-than-or-equal-to\x01@\x01i\x15\x01@\x03\x04self?\x0cc\
hild-worker\x12\x0bevent-value\x07\0\xc5\0\x04\0/[method]api.initialize-greater-\
than-or-equal-to\x01F\x04\0)[method]api.blocking-initialize-less-than\x01@\x01i\x16\
\x01@\x03\x04self?\x0cchild-worker\x12\x0bevent-value\x07\0\xc7\0\x04\0\x20[meth\
od]api.initialize-less-than\x01H\x04\05[method]api.blocking-initialize-less-than\
-or-equal-to\x01@\x01i\x17\x01@\x03\x04self?\x0cchild-worker\x12\x0bevent-value\x07\
\0\xc9\0\x04\0,[method]api.initialize-less-than-or-equal-to\x01J\x01@\x03\x04sel\
f?\x0dchild-worker1\x12\x0dchild-worker2\x12\0\x20\x04\0#[method]api.blocking-in\
itialize-and\x01K\x01i\x18\x01@\x03\x04self?\x0dchild-worker1\x12\x0dchild-worke\
r2\x12\0\xcc\0\x04\0\x1a[method]api.initialize-and\x01M\x04\0\"[method]api.block\
ing-initialize-or\x01K\x01i\x19\x01@\x03\x04self?\x0dchild-worker1\x12\x0dchild-\
worker2\x12\0\xce\0\x04\0\x19[method]api.initialize-or\x01O\x01@\x02\x04self?\x0c\
child-worker\x12\0\x20\x04\0#[method]api.blocking-initialize-not\x01P\x01i\x1a\x01\
@\x02\x04self?\x0cchild-worker\x12\0\xd1\0\x04\0\x1a[method]api.initialize-not\x01\
R\x01@\x02\x04self?\x02t1w\0:\x04\0([method]api.blocking-get-timeline-result\x01\
S\x01i\x1b\x01@\x02\x04self?\x02t1w\0\xd4\0\x04\0\x1f[method]api.get-timeline-re\
sult\x01U\x03\x018timeline:timeline-processor-stub/stub-timeline-processor\x05\x0d\
\x01B\x1b\x02\x03\x02\x01\x05\x04\0\x0bevent-value\x03\0\0\x02\x03\x02\x01\x09\x04\
\0\x0ftimeline-result\x03\0\x02\x01r\x02\x09worker-ids\x0btemplate-ids\x04\0\x16\
timeline-result-worker\x03\0\x04\x01q\x03\x0etl-has-existed\x01\x05\0\x15tl-has-\
existed-within\x01\x05\0\x18tl-latest-event-to-state\x01\x05\0\x04\0\x12leaf-tim\
eline-node\x03\0\x06\x01q\x08\x08equal-to\x01\x05\0\x0cgreater-than\x01\x05\0\x18\
greater-than-or-equal-to\x01\x05\0\x09less-than\x01\x05\0\x15less-than-or-equal-\
to\x01\x05\0\x03and\x01\x05\0\x02or\x01\x05\0\x03not\x01\x05\0\x04\0\x15derived-\
timeline-node\x03\0\x08\x01q\x02\x0dleaf-timeline\x01\x07\0\x10derived-timeline\x01\
\x09\0\x04\0\x1ctyped-timeline-result-worker\x03\0\x0a\x01j\x01s\x01s\x01@\x02\x0c\
child-worker\x0b\x0bevent-value\x01\0\x0c\x04\0\x10initialize-equal\x01\x0d\x04\0\
\x17initialize-greater-than\x01\x0d\x04\0#initialize-greater-than-or-equal-to\x01\
\x0d\x04\0\x14initialize-less-than\x01\x0d\x04\0\x20initialize-less-than-or-equa\
l-to\x01\x0d\x01@\x02\x0dchild-worker1\x0b\x0dchild-worker2\x0b\0\x0c\x04\0\x0ei\
nitialize-and\x01\x0e\x04\0\x0dinitialize-or\x01\x0e\x01@\x01\x0cchild-worker\x0b\
\0\x0c\x04\0\x0einitialize-not\x01\x0f\x01j\x01\x03\x01s\x01@\x01\x02t1w\0\x10\x04\
\0\x13get-timeline-result\x01\x11\x04\x01\x1ftimeline:timeline-processor/api\x05\
\x0e\x04\x01.timeline:timeline-processor/timeline-processor\x04\0\x0b\x18\x01\0\x12\
timeline-processor\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-compon\
ent\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
