// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod timeline {
  pub mod event_processor {
    
    #[allow(clippy::all)]
    pub mod api {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[derive(Clone)]
      pub enum EventValue{
        StringValue(wit_bindgen::rt::string::String),
        IntValue(i64),
        FloatValue(f64),
        BoolValue(bool),
      }
      impl ::core::fmt::Debug for EventValue {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            EventValue::StringValue(e) => {
              f.debug_tuple("EventValue::StringValue").field(e).finish()
            }
            EventValue::IntValue(e) => {
              f.debug_tuple("EventValue::IntValue").field(e).finish()
            }
            EventValue::FloatValue(e) => {
              f.debug_tuple("EventValue::FloatValue").field(e).finish()
            }
            EventValue::BoolValue(e) => {
              f.debug_tuple("EventValue::BoolValue").field(e).finish()
            }
          }
        }
      }
      #[derive(Clone)]
      pub struct Event {
        pub time: u64,
        pub event: wit_bindgen::rt::vec::Vec::<(wit_bindgen::rt::string::String,EventValue,)>,
      }
      impl ::core::fmt::Debug for Event {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Event").field("time", &self.time).field("event", &self.event).finish()
        }
      }
      #[derive(Clone)]
      pub struct WorkerId {
        pub name: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for WorkerId {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("WorkerId").field("name", &self.name).finish()
        }
      }
      #[repr(C)]
      #[derive(Clone, Copy)]
      pub struct TimePeriod {
        pub t1: u64,
        pub t2: u64,
      }
      impl ::core::fmt::Debug for TimePeriod {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("TimePeriod").field("t1", &self.t1).field("t2", &self.t2).finish()
        }
      }
      #[derive(Clone)]
      pub struct EventStateResult {
        pub time_period: TimePeriod,
        pub value: EventValue,
      }
      impl ::core::fmt::Debug for EventStateResult {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("EventStateResult").field("time-period", &self.time_period).field("value", &self.value).finish()
        }
      }
      #[derive(Clone)]
      pub struct LatestEventToStateResult {
        pub event_col_name: wit_bindgen::rt::string::String,
        pub event_results: wit_bindgen::rt::vec::Vec::<EventStateResult>,
      }
      impl ::core::fmt::Debug for LatestEventToStateResult {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("LatestEventToStateResult").field("event-col-name", &self.event_col_name).field("event-results", &self.event_results).finish()
        }
      }
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, PartialEq)]
      pub enum EventPredicateOp {
        Equal,
        GreaterThan,
        LessThan,
      }
      impl ::core::fmt::Debug for EventPredicateOp {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            EventPredicateOp::Equal => {
              f.debug_tuple("EventPredicateOp::Equal").finish()
            }
            EventPredicateOp::GreaterThan => {
              f.debug_tuple("EventPredicateOp::GreaterThan").finish()
            }
            EventPredicateOp::LessThan => {
              f.debug_tuple("EventPredicateOp::LessThan").finish()
            }
          }
        }
      }
      
      impl EventPredicateOp{
        pub(crate) unsafe fn _lift(val: u8) -> EventPredicateOp{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }
          
          match val {
            0 => EventPredicateOp::Equal,
            1 => EventPredicateOp::GreaterThan,
            2 => EventPredicateOp::LessThan,
            
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      #[derive(Clone)]
      pub struct EventPredicate {
        pub col_name: wit_bindgen::rt::string::String,
        pub value: EventValue,
        pub op: EventPredicateOp,
      }
      impl ::core::fmt::Debug for EventPredicate {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("EventPredicate").field("col-name", &self.col_name).field("value", &self.value).field("op", &self.op).finish()
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn initialize_latest_event_state(worker: &WorkerId,event_col_name: &str,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let WorkerId{ name:name0, } = worker;
          let vec1 = name0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let vec2 = event_col_name;
          let ptr2 = vec2.as_ptr() as i32;
          let len2 = vec2.len() as i32;
          let ptr3 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "timeline:event-processor/api")]
          extern "C" {
            #[link_name = "initialize-latest-event-state"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1, ptr2, len2, ptr3);
          let l4 = i32::from(*((ptr3 + 0) as *const u8));
          match l4 {
            0 => {
              let e = {
                let l5 = *((ptr3 + 4) as *const i32);
                let l6 = *((ptr3 + 8) as *const i32);
                let len7 = l6 as usize;
                let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                
                wit_bindgen::rt::string_lift(bytes7)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l8 = *((ptr3 + 4) as *const i32);
                let l9 = *((ptr3 + 8) as *const i32);
                let len10 = l9 as usize;
                let bytes10 = Vec::from_raw_parts(l8 as *mut _, len10, len10);
                
                wit_bindgen::rt::string_lift(bytes10)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn initialize_tl_has_existed(worker: &WorkerId,event_predicate: &EventPredicate,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let WorkerId{ name:name0, } = worker;
          let vec1 = name0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let EventPredicate{ col_name:col_name2, value:value2, op:op2, } = event_predicate;
          let vec3 = col_name2;
          let ptr3 = vec3.as_ptr() as i32;
          let len3 = vec3.len() as i32;
          let (result5_0,result5_1,result5_2,) = match value2 {
            EventValue::StringValue(e) => {
              let vec4 = e;
              let ptr4 = vec4.as_ptr() as i32;
              let len4 = vec4.len() as i32;
              
              (0i32, i64::from(ptr4), len4)
            },
            EventValue::IntValue(e) => (1i32, wit_bindgen::rt::as_i64(e), 0i32),
            EventValue::FloatValue(e) => (2i32, (wit_bindgen::rt::as_f64(e)).to_bits() as i64, 0i32),
            EventValue::BoolValue(e) => (3i32, i64::from(match e { true => 1, false => 0 }), 0i32),
          };
          let ptr6 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "timeline:event-processor/api")]
          extern "C" {
            #[link_name = "initialize-tl-has-existed"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i64, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i64, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1, ptr3, len3, result5_0, result5_1, result5_2, op2.clone() as i32, ptr6);
          let l7 = i32::from(*((ptr6 + 0) as *const u8));
          match l7 {
            0 => {
              let e = {
                let l8 = *((ptr6 + 4) as *const i32);
                let l9 = *((ptr6 + 8) as *const i32);
                let len10 = l9 as usize;
                let bytes10 = Vec::from_raw_parts(l8 as *mut _, len10, len10);
                
                wit_bindgen::rt::string_lift(bytes10)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l11 = *((ptr6 + 4) as *const i32);
                let l12 = *((ptr6 + 8) as *const i32);
                let len13 = l12 as usize;
                let bytes13 = Vec::from_raw_parts(l11 as *mut _, len13, len13);
                
                wit_bindgen::rt::string_lift(bytes13)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn initialize_tl_has_existed_within(worker: &WorkerId,event_predicate: &EventPredicate,time: u64,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let WorkerId{ name:name0, } = worker;
          let vec1 = name0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let EventPredicate{ col_name:col_name2, value:value2, op:op2, } = event_predicate;
          let vec3 = col_name2;
          let ptr3 = vec3.as_ptr() as i32;
          let len3 = vec3.len() as i32;
          let (result5_0,result5_1,result5_2,) = match value2 {
            EventValue::StringValue(e) => {
              let vec4 = e;
              let ptr4 = vec4.as_ptr() as i32;
              let len4 = vec4.len() as i32;
              
              (0i32, i64::from(ptr4), len4)
            },
            EventValue::IntValue(e) => (1i32, wit_bindgen::rt::as_i64(e), 0i32),
            EventValue::FloatValue(e) => (2i32, (wit_bindgen::rt::as_f64(e)).to_bits() as i64, 0i32),
            EventValue::BoolValue(e) => (3i32, i64::from(match e { true => 1, false => 0 }), 0i32),
          };
          let ptr6 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "timeline:event-processor/api")]
          extern "C" {
            #[link_name = "initialize-tl-has-existed-within"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i64, _: i32, _: i32, _: i64, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i64, _: i32, _: i32, _: i64, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1, ptr3, len3, result5_0, result5_1, result5_2, op2.clone() as i32, wit_bindgen::rt::as_i64(time), ptr6);
          let l7 = i32::from(*((ptr6 + 0) as *const u8));
          match l7 {
            0 => {
              let e = {
                let l8 = *((ptr6 + 4) as *const i32);
                let l9 = *((ptr6 + 8) as *const i32);
                let len10 = l9 as usize;
                let bytes10 = Vec::from_raw_parts(l8 as *mut _, len10, len10);
                
                wit_bindgen::rt::string_lift(bytes10)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l11 = *((ptr6 + 4) as *const i32);
                let l12 = *((ptr6 + 8) as *const i32);
                let len13 = l12 as usize;
                let bytes13 = Vec::from_raw_parts(l11 as *mut _, len13, len13);
                
                wit_bindgen::rt::string_lift(bytes13)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn add_event(event: &Event,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let Event{ time:time0, event:event0, } = event;
          let vec4 = event0;
          let len4 = vec4.len() as i32;
          let layout4 = alloc::Layout::from_size_align_unchecked(vec4.len() * 24, 8);
          let result4 = if layout4.size() != 0
          {
            let ptr = alloc::alloc(layout4);
            if ptr.is_null()
            {
              alloc::handle_alloc_error(layout4);
            }
            ptr
          }else {{
            ::core::ptr::null_mut()
          }};
          for (i, e) in vec4.into_iter().enumerate() {
            let base = result4 as i32 + (i as i32) * 24;
            {
              let (t1_0, t1_1, ) = e;
              let vec2 = t1_0;
              let ptr2 = vec2.as_ptr() as i32;
              let len2 = vec2.len() as i32;
              *((base + 4) as *mut i32) = len2;
              *((base + 0) as *mut i32) = ptr2;
              match t1_1 {
                EventValue::StringValue(e) => {
                  *((base + 8) as *mut u8) = (0i32) as u8;
                  let vec3 = e;
                  let ptr3 = vec3.as_ptr() as i32;
                  let len3 = vec3.len() as i32;
                  *((base + 20) as *mut i32) = len3;
                  *((base + 16) as *mut i32) = ptr3;
                },
                EventValue::IntValue(e) => {
                  *((base + 8) as *mut u8) = (1i32) as u8;
                  *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(e);
                },
                EventValue::FloatValue(e) => {
                  *((base + 8) as *mut u8) = (2i32) as u8;
                  *((base + 16) as *mut f64) = wit_bindgen::rt::as_f64(e);
                },
                EventValue::BoolValue(e) => {
                  *((base + 8) as *mut u8) = (3i32) as u8;
                  *((base + 16) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                },
              }
            }
          }
          let ptr5 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "timeline:event-processor/api")]
          extern "C" {
            #[link_name = "add-event"]
            fn wit_import(_: i64, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i64, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i64(time0), result4 as i32, len4, ptr5);
          let l6 = i32::from(*((ptr5 + 0) as *const u8));
          if layout4.size() != 0 {
            alloc::dealloc(result4, layout4);
          }
          match l6 {
            0 => {
              let e = {
                let l7 = *((ptr5 + 4) as *const i32);
                let l8 = *((ptr5 + 8) as *const i32);
                let len9 = l8 as usize;
                let bytes9 = Vec::from_raw_parts(l7 as *mut _, len9, len9);
                
                wit_bindgen::rt::string_lift(bytes9)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l10 = *((ptr5 + 4) as *const i32);
                let l11 = *((ptr5 + 8) as *const i32);
                let len12 = l11 as usize;
                let bytes12 = Vec::from_raw_parts(l10 as *mut _, len12, len12);
                
                wit_bindgen::rt::string_lift(bytes12)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn latest_event_to_state(t1: u64,) -> Result<LatestEventToStateResult,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 20]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "timeline:event-processor/api")]
          extern "C" {
            #[link_name = "latest-event-to-state"]
            fn wit_import(_: i64, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i64, _: i32, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i64(t1), ptr0);
          let l1 = i32::from(*((ptr0 + 0) as *const u8));
          match l1 {
            0 => {
              let e = {
                let l2 = *((ptr0 + 4) as *const i32);
                let l3 = *((ptr0 + 8) as *const i32);
                let len4 = l3 as usize;
                let bytes4 = Vec::from_raw_parts(l2 as *mut _, len4, len4);
                let l5 = *((ptr0 + 12) as *const i32);
                let l6 = *((ptr0 + 16) as *const i32);
                let base17 = l5;
                let len17 = l6;
                let mut result17 = Vec::with_capacity(len17 as usize);
                for i in 0..len17 {
                  let base = base17 + i * 32;
                  let e17 = {
                    let l7 = *((base + 0) as *const i64);
                    let l8 = *((base + 8) as *const i64);
                    let l9 = i32::from(*((base + 16) as *const u8));
                    let v16 = match l9 {
                      0 => {
                        let e16 = {
                          let l10 = *((base + 24) as *const i32);
                          let l11 = *((base + 28) as *const i32);
                          let len12 = l11 as usize;
                          let bytes12 = Vec::from_raw_parts(l10 as *mut _, len12, len12);
                          
                          wit_bindgen::rt::string_lift(bytes12)
                        };
                        EventValue::StringValue(e16)
                      }
                      1 => {
                        let e16 = {
                          let l13 = *((base + 24) as *const i64);
                          
                          l13
                        };
                        EventValue::IntValue(e16)
                      }
                      2 => {
                        let e16 = {
                          let l14 = *((base + 24) as *const f64);
                          
                          l14
                        };
                        EventValue::FloatValue(e16)
                      }
                      n => {
                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                        let e16 = {
                          let l15 = i32::from(*((base + 24) as *const u8));
                          
                          wit_bindgen::rt::bool_lift(l15 as u8)
                        };
                        EventValue::BoolValue(e16)
                      }
                    };
                    
                    EventStateResult{
                      time_period: TimePeriod{
                        t1: l7 as u64,
                        t2: l8 as u64,
                      },
                      value: v16,
                    }
                  };
                  result17.push(e17);
                }
                wit_bindgen::rt::dealloc(base17, (len17 as usize) * 32, 8);
                
                LatestEventToStateResult{
                  event_col_name: wit_bindgen::rt::string_lift(bytes4),
                  event_results: result17,
                }
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l18 = *((ptr0 + 4) as *const i32);
                let l19 = *((ptr0 + 8) as *const i32);
                let len20 = l19 as usize;
                let bytes20 = Vec::from_raw_parts(l18 as *mut _, len20, len20);
                
                wit_bindgen::rt::string_lift(bytes20)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn tl_has_existed(t1: u64,) -> Result<bool,wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 12]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "timeline:event-processor/api")]
          extern "C" {
            #[link_name = "tl-has-existed"]
            fn wit_import(_: i64, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i64, _: i32, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i64(t1), ptr0);
          let l1 = i32::from(*((ptr0 + 0) as *const u8));
          match l1 {
            0 => {
              let e = {
                let l2 = i32::from(*((ptr0 + 4) as *const u8));
                
                wit_bindgen::rt::bool_lift(l2 as u8)
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l3 = *((ptr0 + 4) as *const i32);
                let l4 = *((ptr0 + 8) as *const i32);
                let len5 = l4 as usize;
                let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);
                
                wit_bindgen::rt::string_lift(bytes5)
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod timeline {
    pub mod timeline_processor {
      
      #[allow(clippy::all)]
      pub mod api {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type EventValue = super::super::super::super::timeline::event_processor::api::EventValue;
        pub type WorkerId = super::super::super::super::timeline::event_processor::api::WorkerId;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "timeline:timeline-processor/api#initialize-equal"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_initialize_equal(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i64,arg6: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            let len1 = arg3 as usize;
            let bytes1 = Vec::from_raw_parts(arg2 as *mut _, len1, len1);
            use super::super::super::super::timeline::event_processor::api::EventValue as V3;
            let v3 = match arg4 {
              0 => {
                let e3 = {
                  let len2 = arg6 as usize;
                  let bytes2 = Vec::from_raw_parts(arg5 as i32 as *mut _, len2, len2);
                  
                  wit_bindgen::rt::string_lift(bytes2)
                };
                V3::StringValue(e3)
              }
              1 => {
                let e3 = arg5;
                V3::IntValue(e3)
              }
              2 => {
                let e3 = f64::from_bits(arg5 as u64);
                V3::FloatValue(e3)
              }
              n => {
                debug_assert_eq!(n, 3, "invalid enum discriminant");
                let e3 = wit_bindgen::rt::bool_lift(arg5 as i32 as u8);
                V3::BoolValue(e3)
              }
            };
            let result4 = <_GuestImpl as Guest>::initialize_equal(super::super::super::super::timeline::event_processor::api::WorkerId{
              name: wit_bindgen::rt::string_lift(bytes0),
            }, super::super::super::super::timeline::event_processor::api::WorkerId{
              name: wit_bindgen::rt::string_lift(bytes1),
            }, v3);
            let ptr5 = _RET_AREA.0.as_mut_ptr() as i32;
            match result4 {
              Ok(e) => { {
                *((ptr5 + 0) as *mut u8) = (0i32) as u8;
                let vec6 = (e.into_bytes()).into_boxed_slice();
                let ptr6 = vec6.as_ptr() as i32;
                let len6 = vec6.len() as i32;
                ::core::mem::forget(vec6);
                *((ptr5 + 8) as *mut i32) = len6;
                *((ptr5 + 4) as *mut i32) = ptr6;
              } },
              Err(e) => { {
                *((ptr5 + 0) as *mut u8) = (1i32) as u8;
                let vec7 = (e.into_bytes()).into_boxed_slice();
                let ptr7 = vec7.as_ptr() as i32;
                let len7 = vec7.len() as i32;
                ::core::mem::forget(vec7);
                *((ptr5 + 8) as *mut i32) = len7;
                *((ptr5 + 4) as *mut i32) = ptr7;
              } },
            };ptr5
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_timeline:timeline-processor/api#initialize-equal"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_initialize_equal(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                },
                _ => {
                  let l3 = *((arg0 + 4) as *const i32);
                  let l4 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                },
              }
            }
          };
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn initialize_equal(child_url: WorkerId,current_worker_id: WorkerId,event_value: EventValue,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:event-processor"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1728] = [3, 0, 15, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 0, 97, 115, 109, 13, 0, 1, 0, 7, 225, 4, 1, 65, 6, 1, 66, 19, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 1, 111, 2, 115, 1, 1, 112, 2, 1, 114, 2, 4, 116, 105, 109, 101, 119, 5, 101, 118, 101, 110, 116, 3, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 4, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 6, 1, 114, 2, 2, 116, 49, 119, 2, 116, 50, 119, 4, 0, 11, 116, 105, 109, 101, 45, 112, 101, 114, 105, 111, 100, 3, 0, 8, 1, 114, 2, 11, 116, 105, 109, 101, 45, 112, 101, 114, 105, 111, 100, 9, 5, 118, 97, 108, 117, 101, 1, 4, 0, 18, 101, 118, 101, 110, 116, 45, 115, 116, 97, 116, 101, 45, 114, 101, 115, 117, 108, 116, 3, 0, 10, 1, 112, 11, 1, 114, 2, 14, 101, 118, 101, 110, 116, 45, 99, 111, 108, 45, 110, 97, 109, 101, 115, 13, 101, 118, 101, 110, 116, 45, 114, 101, 115, 117, 108, 116, 115, 12, 4, 0, 28, 108, 97, 116, 101, 115, 116, 45, 101, 118, 101, 110, 116, 45, 116, 111, 45, 115, 116, 97, 116, 101, 45, 114, 101, 115, 117, 108, 116, 3, 0, 13, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 18, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 111, 112, 3, 0, 15, 1, 114, 3, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 1, 2, 111, 112, 16, 4, 0, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 17, 3, 1, 28, 116, 105, 109, 101, 108, 105, 110, 101, 58, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 97, 112, 105, 5, 0, 2, 3, 0, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 2, 3, 0, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 1, 66, 7, 2, 3, 2, 1, 1, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 2, 3, 2, 1, 2, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 2, 1, 106, 1, 115, 1, 115, 1, 64, 3, 9, 99, 104, 105, 108, 100, 45, 117, 114, 108, 3, 17, 99, 117, 114, 114, 101, 110, 116, 45, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 1, 0, 4, 4, 0, 16, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 101, 113, 117, 97, 108, 1, 5, 4, 1, 31, 116, 105, 109, 101, 108, 105, 110, 101, 58, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 97, 112, 105, 5, 3, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 195, 7, 1, 65, 2, 1, 65, 6, 1, 66, 34, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 1, 111, 2, 115, 1, 1, 112, 2, 1, 114, 2, 4, 116, 105, 109, 101, 119, 5, 101, 118, 101, 110, 116, 3, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 4, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 6, 1, 114, 2, 2, 116, 49, 119, 2, 116, 50, 119, 4, 0, 11, 116, 105, 109, 101, 45, 112, 101, 114, 105, 111, 100, 3, 0, 8, 1, 114, 2, 11, 116, 105, 109, 101, 45, 112, 101, 114, 105, 111, 100, 9, 5, 118, 97, 108, 117, 101, 1, 4, 0, 18, 101, 118, 101, 110, 116, 45, 115, 116, 97, 116, 101, 45, 114, 101, 115, 117, 108, 116, 3, 0, 10, 1, 112, 11, 1, 114, 2, 14, 101, 118, 101, 110, 116, 45, 99, 111, 108, 45, 110, 97, 109, 101, 115, 13, 101, 118, 101, 110, 116, 45, 114, 101, 115, 117, 108, 116, 115, 12, 4, 0, 28, 108, 97, 116, 101, 115, 116, 45, 101, 118, 101, 110, 116, 45, 116, 111, 45, 115, 116, 97, 116, 101, 45, 114, 101, 115, 117, 108, 116, 3, 0, 13, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 18, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 111, 112, 3, 0, 15, 1, 114, 3, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 1, 2, 111, 112, 16, 4, 0, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 17, 1, 106, 1, 115, 1, 115, 1, 64, 2, 6, 119, 111, 114, 107, 101, 114, 7, 14, 101, 118, 101, 110, 116, 45, 99, 111, 108, 45, 110, 97, 109, 101, 115, 0, 19, 4, 0, 29, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 108, 97, 116, 101, 115, 116, 45, 101, 118, 101, 110, 116, 45, 115, 116, 97, 116, 101, 1, 20, 1, 64, 2, 6, 119, 111, 114, 107, 101, 114, 7, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 18, 0, 19, 4, 0, 25, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 21, 1, 64, 3, 6, 119, 111, 114, 107, 101, 114, 7, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 18, 4, 116, 105, 109, 101, 119, 0, 19, 4, 0, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 22, 1, 64, 1, 5, 101, 118, 101, 110, 116, 5, 0, 19, 4, 0, 9, 97, 100, 100, 45, 101, 118, 101, 110, 116, 1, 23, 1, 106, 1, 14, 1, 115, 1, 64, 1, 2, 116, 49, 119, 0, 24, 4, 0, 21, 108, 97, 116, 101, 115, 116, 45, 101, 118, 101, 110, 116, 45, 116, 111, 45, 115, 116, 97, 116, 101, 1, 25, 1, 106, 1, 127, 1, 115, 1, 64, 1, 2, 116, 49, 119, 0, 26, 4, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 27, 3, 1, 28, 116, 105, 109, 101, 108, 105, 110, 101, 58, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 97, 112, 105, 5, 0, 2, 3, 0, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 2, 3, 0, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 1, 66, 7, 2, 3, 2, 1, 1, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 2, 3, 2, 1, 2, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 2, 1, 106, 1, 115, 1, 115, 1, 64, 3, 9, 99, 104, 105, 108, 100, 45, 117, 114, 108, 3, 17, 99, 117, 114, 114, 101, 110, 116, 45, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 1, 0, 4, 4, 0, 16, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 101, 113, 117, 97, 108, 1, 5, 4, 1, 31, 116, 105, 109, 101, 108, 105, 110, 101, 58, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 97, 112, 105, 5, 3, 4, 1, 43, 116, 105, 109, 101, 108, 105, 110, 101, 58, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 4, 0, 11, 21, 1, 0, 15, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
