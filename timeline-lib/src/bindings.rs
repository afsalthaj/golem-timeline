// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod exports {
  pub mod golem {
    pub mod timeline {
      
      #[allow(clippy::all)]
      pub mod api {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type NodeIndex = i32;
        #[repr(u8)]
        #[derive(Clone, Copy, Eq, PartialEq)]
        pub enum TimelinePrimitiveOp {
          GreaterThan,
          GreaterThanEqual,
          LessThan,
          LessThanEqual,
        }
        impl ::core::fmt::Debug for TimelinePrimitiveOp {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              TimelinePrimitiveOp::GreaterThan => {
                f.debug_tuple("TimelinePrimitiveOp::GreaterThan").finish()
              }
              TimelinePrimitiveOp::GreaterThanEqual => {
                f.debug_tuple("TimelinePrimitiveOp::GreaterThanEqual").finish()
              }
              TimelinePrimitiveOp::LessThan => {
                f.debug_tuple("TimelinePrimitiveOp::LessThan").finish()
              }
              TimelinePrimitiveOp::LessThanEqual => {
                f.debug_tuple("TimelinePrimitiveOp::LessThanEqual").finish()
              }
            }
          }
        }
        
        impl TimelinePrimitiveOp{
          pub(crate) unsafe fn _lift(val: u8) -> TimelinePrimitiveOp{
            if !cfg!(debug_assertions) {
              return ::core::mem::transmute(val);
            }
            
            match val {
              0 => TimelinePrimitiveOp::GreaterThan,
              1 => TimelinePrimitiveOp::GreaterThanEqual,
              2 => TimelinePrimitiveOp::LessThan,
              3 => TimelinePrimitiveOp::LessThanEqual,
              
              _ => panic!("invalid enum discriminant"),
            }
          }
        }
        
        #[repr(u8)]
        #[derive(Clone, Copy, Eq, PartialEq)]
        pub enum FilterOp {
          Equal,
          GreaterThan,
          LessThan,
        }
        impl ::core::fmt::Debug for FilterOp {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              FilterOp::Equal => {
                f.debug_tuple("FilterOp::Equal").finish()
              }
              FilterOp::GreaterThan => {
                f.debug_tuple("FilterOp::GreaterThan").finish()
              }
              FilterOp::LessThan => {
                f.debug_tuple("FilterOp::LessThan").finish()
              }
            }
          }
        }
        
        impl FilterOp{
          pub(crate) unsafe fn _lift(val: u8) -> FilterOp{
            if !cfg!(debug_assertions) {
              return ::core::mem::transmute(val);
            }
            
            match val {
              0 => FilterOp::Equal,
              1 => FilterOp::GreaterThan,
              2 => FilterOp::LessThan,
              
              _ => panic!("invalid enum discriminant"),
            }
          }
        }
        
        #[derive(Clone)]
        pub enum EventValue{
          StringValue(wit_bindgen::rt::string::String),
          IntValue(i64),
          FloatValue(f64),
          BoolValue(bool),
        }
        impl ::core::fmt::Debug for EventValue {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              EventValue::StringValue(e) => {
                f.debug_tuple("EventValue::StringValue").field(e).finish()
              }
              EventValue::IntValue(e) => {
                f.debug_tuple("EventValue::IntValue").field(e).finish()
              }
              EventValue::FloatValue(e) => {
                f.debug_tuple("EventValue::FloatValue").field(e).finish()
              }
              EventValue::BoolValue(e) => {
                f.debug_tuple("EventValue::BoolValue").field(e).finish()
              }
            }
          }
        }
        #[derive(Clone)]
        pub struct PrimitiveTimeline {
          pub op: TimelinePrimitiveOp,
          pub timeline: NodeIndex,
          pub value: EventValue,
        }
        impl ::core::fmt::Debug for PrimitiveTimeline {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("PrimitiveTimeline").field("op", &self.op).field("timeline", &self.timeline).field("value", &self.value).finish()
          }
        }
        #[derive(Clone)]
        pub struct EventColumnPredicateInfo {
          pub col_name: wit_bindgen::rt::string::String,
          pub value: EventValue,
        }
        impl ::core::fmt::Debug for EventColumnPredicateInfo {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("EventColumnPredicateInfo").field("col-name", &self.col_name).field("value", &self.value).finish()
          }
        }
        #[derive(Clone)]
        pub struct FilteredTimeline {
          pub filter: FilterOp,
          pub node: NodeIndex,
          pub event_predicate: EventColumnPredicateInfo,
        }
        impl ::core::fmt::Debug for FilteredTimeline {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("FilteredTimeline").field("filter", &self.filter).field("node", &self.node).field("event-predicate", &self.event_predicate).finish()
          }
        }
        #[derive(Clone)]
        pub struct FilteredTimelineWithin {
          pub filtered: FilteredTimeline,
          pub time: u64,
        }
        impl ::core::fmt::Debug for FilteredTimelineWithin {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("FilteredTimelineWithin").field("filtered", &self.filtered).field("time", &self.time).finish()
          }
        }
        #[derive(Clone)]
        pub enum TimelineNode{
          Leaf,
          Primitive(PrimitiveTimeline),
          NotNode(NodeIndex),
          TlHasExisted(FilteredTimeline),
          TlHasExistedWithin(FilteredTimelineWithin),
          TlDurationWhere(FilteredTimeline),
          TlDurationInCurState(FilteredTimeline),
        }
        impl ::core::fmt::Debug for TimelineNode {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              TimelineNode::Leaf => {
                f.debug_tuple("TimelineNode::Leaf").finish()
              }
              TimelineNode::Primitive(e) => {
                f.debug_tuple("TimelineNode::Primitive").field(e).finish()
              }
              TimelineNode::NotNode(e) => {
                f.debug_tuple("TimelineNode::NotNode").field(e).finish()
              }
              TimelineNode::TlHasExisted(e) => {
                f.debug_tuple("TimelineNode::TlHasExisted").field(e).finish()
              }
              TimelineNode::TlHasExistedWithin(e) => {
                f.debug_tuple("TimelineNode::TlHasExistedWithin").field(e).finish()
              }
              TimelineNode::TlDurationWhere(e) => {
                f.debug_tuple("TimelineNode::TlDurationWhere").field(e).finish()
              }
              TimelineNode::TlDurationInCurState(e) => {
                f.debug_tuple("TimelineNode::TlDurationInCurState").field(e).finish()
              }
            }
          }
        }
        #[derive(Clone)]
        pub struct TimelineOp {
          pub nodes: wit_bindgen::rt::vec::Vec::<TimelineNode>,
        }
        impl ::core::fmt::Debug for TimelineOp {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("TimelineOp").field("nodes", &self.nodes).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:timeline/api#get-timelines"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_get_timelines() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::get_timelines();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let vec3 = result0;
            let len3 = vec3.len() as i32;
            let layout3 = alloc::Layout::from_size_align_unchecked(vec3.len() * 8, 4);
            let result3 = if layout3.size() != 0
            {
              let ptr = alloc::alloc(layout3);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout3);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec3.into_iter().enumerate() {
              let base = result3 as i32 + (i as i32) * 8;
              {
                let vec2 = (e.into_bytes()).into_boxed_slice();
                let ptr2 = vec2.as_ptr() as i32;
                let len2 = vec2.len() as i32;
                ::core::mem::forget(vec2);
                *((base + 4) as *mut i32) = len2;
                *((base + 0) as *mut i32) = ptr2;
              }
            }
            *((ptr1 + 4) as *mut i32) = len3;
            *((ptr1 + 0) as *mut i32) = result3 as i32;
            ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_golem:timeline/api#get-timelines"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_get_timelines(arg0: i32,) {
              let l2 = *((arg0 + 0) as *const i32);
              let l3 = *((arg0 + 4) as *const i32);
              let base4 = l2;
              let len4 = l3;
              for i in 0..len4 {
                let base = base4 + i *8;
                {
                  let l0 = *((base + 0) as *const i32);
                  let l1 = *((base + 4) as *const i32);
                  wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
                }
              }
              wit_bindgen::rt::dealloc(base4, (len4 as usize) * 8, 4);
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "golem:timeline/api#initialize-timeline"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_initialize_timeline(arg0: i32,arg1: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let base66 = arg0;
            let len66 = arg1;
            let mut result66 = Vec::with_capacity(len66 as usize);
            for i in 0..len66 {
              let base = base66 + i * 48;
              let e66 = {
                let l0 = i32::from(*((base + 0) as *const u8));
                let v65 = match l0 {
                  0 => {
                    TimelineNode::Leaf
                  }
                  1 => {
                    let e65 = {
                      let l1 = i32::from(*((base + 8) as *const u8));
                      let l2 = *((base + 12) as *const i32);
                      let l3 = i32::from(*((base + 16) as *const u8));
                      let v10 = match l3 {
                        0 => {
                          let e10 = {
                            let l4 = *((base + 24) as *const i32);
                            let l5 = *((base + 28) as *const i32);
                            let len6 = l5 as usize;
                            let bytes6 = Vec::from_raw_parts(l4 as *mut _, len6, len6);
                            
                            wit_bindgen::rt::string_lift(bytes6)
                          };
                          EventValue::StringValue(e10)
                        }
                        1 => {
                          let e10 = {
                            let l7 = *((base + 24) as *const i64);
                            
                            l7
                          };
                          EventValue::IntValue(e10)
                        }
                        2 => {
                          let e10 = {
                            let l8 = *((base + 24) as *const f64);
                            
                            l8
                          };
                          EventValue::FloatValue(e10)
                        }
                        n => {
                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                          let e10 = {
                            let l9 = i32::from(*((base + 24) as *const u8));
                            
                            wit_bindgen::rt::bool_lift(l9 as u8)
                          };
                          EventValue::BoolValue(e10)
                        }
                      };
                      
                      PrimitiveTimeline{
                        op: TimelinePrimitiveOp::_lift(l1 as u8),
                        timeline: l2,
                        value: v10,
                      }
                    };
                    TimelineNode::Primitive(e65)
                  }
                  2 => {
                    let e65 = {
                      let l11 = *((base + 8) as *const i32);
                      
                      l11
                    };
                    TimelineNode::NotNode(e65)
                  }
                  3 => {
                    let e65 = {
                      let l12 = i32::from(*((base + 8) as *const u8));
                      let l13 = *((base + 12) as *const i32);
                      let l14 = *((base + 16) as *const i32);
                      let l15 = *((base + 20) as *const i32);
                      let len16 = l15 as usize;
                      let bytes16 = Vec::from_raw_parts(l14 as *mut _, len16, len16);
                      let l17 = i32::from(*((base + 24) as *const u8));
                      let v24 = match l17 {
                        0 => {
                          let e24 = {
                            let l18 = *((base + 32) as *const i32);
                            let l19 = *((base + 36) as *const i32);
                            let len20 = l19 as usize;
                            let bytes20 = Vec::from_raw_parts(l18 as *mut _, len20, len20);
                            
                            wit_bindgen::rt::string_lift(bytes20)
                          };
                          EventValue::StringValue(e24)
                        }
                        1 => {
                          let e24 = {
                            let l21 = *((base + 32) as *const i64);
                            
                            l21
                          };
                          EventValue::IntValue(e24)
                        }
                        2 => {
                          let e24 = {
                            let l22 = *((base + 32) as *const f64);
                            
                            l22
                          };
                          EventValue::FloatValue(e24)
                        }
                        n => {
                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                          let e24 = {
                            let l23 = i32::from(*((base + 32) as *const u8));
                            
                            wit_bindgen::rt::bool_lift(l23 as u8)
                          };
                          EventValue::BoolValue(e24)
                        }
                      };
                      
                      FilteredTimeline{
                        filter: FilterOp::_lift(l12 as u8),
                        node: l13,
                        event_predicate: EventColumnPredicateInfo{
                          col_name: wit_bindgen::rt::string_lift(bytes16),
                          value: v24,
                        },
                      }
                    };
                    TimelineNode::TlHasExisted(e65)
                  }
                  4 => {
                    let e65 = {
                      let l25 = i32::from(*((base + 8) as *const u8));
                      let l26 = *((base + 12) as *const i32);
                      let l27 = *((base + 16) as *const i32);
                      let l28 = *((base + 20) as *const i32);
                      let len29 = l28 as usize;
                      let bytes29 = Vec::from_raw_parts(l27 as *mut _, len29, len29);
                      let l30 = i32::from(*((base + 24) as *const u8));
                      let v37 = match l30 {
                        0 => {
                          let e37 = {
                            let l31 = *((base + 32) as *const i32);
                            let l32 = *((base + 36) as *const i32);
                            let len33 = l32 as usize;
                            let bytes33 = Vec::from_raw_parts(l31 as *mut _, len33, len33);
                            
                            wit_bindgen::rt::string_lift(bytes33)
                          };
                          EventValue::StringValue(e37)
                        }
                        1 => {
                          let e37 = {
                            let l34 = *((base + 32) as *const i64);
                            
                            l34
                          };
                          EventValue::IntValue(e37)
                        }
                        2 => {
                          let e37 = {
                            let l35 = *((base + 32) as *const f64);
                            
                            l35
                          };
                          EventValue::FloatValue(e37)
                        }
                        n => {
                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                          let e37 = {
                            let l36 = i32::from(*((base + 32) as *const u8));
                            
                            wit_bindgen::rt::bool_lift(l36 as u8)
                          };
                          EventValue::BoolValue(e37)
                        }
                      };
                      let l38 = *((base + 40) as *const i64);
                      
                      FilteredTimelineWithin{
                        filtered: FilteredTimeline{
                          filter: FilterOp::_lift(l25 as u8),
                          node: l26,
                          event_predicate: EventColumnPredicateInfo{
                            col_name: wit_bindgen::rt::string_lift(bytes29),
                            value: v37,
                          },
                        },
                        time: l38 as u64,
                      }
                    };
                    TimelineNode::TlHasExistedWithin(e65)
                  }
                  5 => {
                    let e65 = {
                      let l39 = i32::from(*((base + 8) as *const u8));
                      let l40 = *((base + 12) as *const i32);
                      let l41 = *((base + 16) as *const i32);
                      let l42 = *((base + 20) as *const i32);
                      let len43 = l42 as usize;
                      let bytes43 = Vec::from_raw_parts(l41 as *mut _, len43, len43);
                      let l44 = i32::from(*((base + 24) as *const u8));
                      let v51 = match l44 {
                        0 => {
                          let e51 = {
                            let l45 = *((base + 32) as *const i32);
                            let l46 = *((base + 36) as *const i32);
                            let len47 = l46 as usize;
                            let bytes47 = Vec::from_raw_parts(l45 as *mut _, len47, len47);
                            
                            wit_bindgen::rt::string_lift(bytes47)
                          };
                          EventValue::StringValue(e51)
                        }
                        1 => {
                          let e51 = {
                            let l48 = *((base + 32) as *const i64);
                            
                            l48
                          };
                          EventValue::IntValue(e51)
                        }
                        2 => {
                          let e51 = {
                            let l49 = *((base + 32) as *const f64);
                            
                            l49
                          };
                          EventValue::FloatValue(e51)
                        }
                        n => {
                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                          let e51 = {
                            let l50 = i32::from(*((base + 32) as *const u8));
                            
                            wit_bindgen::rt::bool_lift(l50 as u8)
                          };
                          EventValue::BoolValue(e51)
                        }
                      };
                      
                      FilteredTimeline{
                        filter: FilterOp::_lift(l39 as u8),
                        node: l40,
                        event_predicate: EventColumnPredicateInfo{
                          col_name: wit_bindgen::rt::string_lift(bytes43),
                          value: v51,
                        },
                      }
                    };
                    TimelineNode::TlDurationWhere(e65)
                  }
                  n => {
                    debug_assert_eq!(n, 6, "invalid enum discriminant");
                    let e65 = {
                      let l52 = i32::from(*((base + 8) as *const u8));
                      let l53 = *((base + 12) as *const i32);
                      let l54 = *((base + 16) as *const i32);
                      let l55 = *((base + 20) as *const i32);
                      let len56 = l55 as usize;
                      let bytes56 = Vec::from_raw_parts(l54 as *mut _, len56, len56);
                      let l57 = i32::from(*((base + 24) as *const u8));
                      let v64 = match l57 {
                        0 => {
                          let e64 = {
                            let l58 = *((base + 32) as *const i32);
                            let l59 = *((base + 36) as *const i32);
                            let len60 = l59 as usize;
                            let bytes60 = Vec::from_raw_parts(l58 as *mut _, len60, len60);
                            
                            wit_bindgen::rt::string_lift(bytes60)
                          };
                          EventValue::StringValue(e64)
                        }
                        1 => {
                          let e64 = {
                            let l61 = *((base + 32) as *const i64);
                            
                            l61
                          };
                          EventValue::IntValue(e64)
                        }
                        2 => {
                          let e64 = {
                            let l62 = *((base + 32) as *const f64);
                            
                            l62
                          };
                          EventValue::FloatValue(e64)
                        }
                        n => {
                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                          let e64 = {
                            let l63 = i32::from(*((base + 32) as *const u8));
                            
                            wit_bindgen::rt::bool_lift(l63 as u8)
                          };
                          EventValue::BoolValue(e64)
                        }
                      };
                      
                      FilteredTimeline{
                        filter: FilterOp::_lift(l52 as u8),
                        node: l53,
                        event_predicate: EventColumnPredicateInfo{
                          col_name: wit_bindgen::rt::string_lift(bytes56),
                          value: v64,
                        },
                      }
                    };
                    TimelineNode::TlDurationInCurState(e65)
                  }
                };
                
                v65
              };
              result66.push(e66);
            }
            wit_bindgen::rt::dealloc(base66, (len66 as usize) * 48, 8);
            <_GuestImpl as Guest>::initialize_timeline(TimelineOp{
              nodes: result66,
            });
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn get_timelines() -> wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::string::String>;
          fn initialize_timeline(timeline: TimelineOp,);
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 8]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:golem-timeline"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1693] = [3, 0, 14, 103, 111, 108, 101, 109, 45, 116, 105, 109, 101, 108, 105, 110, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 239, 5, 1, 65, 2, 1, 66, 28, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 0, 1, 109, 4, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 18, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 15, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 4, 0, 21, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 105, 109, 105, 116, 105, 118, 101, 45, 111, 112, 3, 0, 2, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 9, 102, 105, 108, 116, 101, 114, 45, 111, 112, 3, 0, 4, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 6, 1, 114, 3, 2, 111, 112, 3, 8, 116, 105, 109, 101, 108, 105, 110, 101, 1, 5, 118, 97, 108, 117, 101, 7, 4, 0, 18, 112, 114, 105, 109, 105, 116, 105, 118, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 0, 8, 1, 114, 3, 2, 111, 112, 3, 3, 105, 110, 100, 1, 5, 118, 97, 108, 117, 101, 7, 4, 0, 18, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 105, 109, 105, 116, 105, 118, 101, 3, 0, 10, 1, 114, 2, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 7, 4, 0, 27, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 3, 0, 12, 1, 114, 3, 6, 102, 105, 108, 116, 101, 114, 5, 4, 110, 111, 100, 101, 1, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 13, 4, 0, 17, 102, 105, 108, 116, 101, 114, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 0, 14, 1, 114, 2, 8, 102, 105, 108, 116, 101, 114, 101, 100, 15, 4, 116, 105, 109, 101, 119, 4, 0, 24, 102, 105, 108, 116, 101, 114, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 105, 110, 3, 0, 16, 1, 113, 7, 4, 108, 101, 97, 102, 0, 0, 9, 112, 114, 105, 109, 105, 116, 105, 118, 101, 1, 9, 0, 8, 110, 111, 116, 45, 110, 111, 100, 101, 1, 1, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 15, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 17, 0, 17, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 119, 104, 101, 114, 101, 1, 15, 0, 24, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 105, 110, 45, 99, 117, 114, 45, 115, 116, 97, 116, 101, 1, 15, 0, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 18, 1, 112, 19, 1, 114, 1, 5, 110, 111, 100, 101, 115, 20, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 21, 1, 112, 115, 1, 64, 0, 0, 23, 4, 0, 13, 103, 101, 116, 45, 116, 105, 109, 101, 108, 105, 110, 101, 115, 1, 24, 1, 64, 1, 8, 116, 105, 109, 101, 108, 105, 110, 101, 22, 1, 0, 4, 0, 19, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 25, 4, 1, 18, 103, 111, 108, 101, 109, 58, 116, 105, 109, 101, 108, 105, 110, 101, 47, 97, 112, 105, 5, 0, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 148, 6, 1, 65, 2, 1, 65, 2, 1, 66, 28, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 0, 1, 109, 4, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 18, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 15, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 4, 0, 21, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 105, 109, 105, 116, 105, 118, 101, 45, 111, 112, 3, 0, 2, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 9, 102, 105, 108, 116, 101, 114, 45, 111, 112, 3, 0, 4, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 6, 1, 114, 3, 2, 111, 112, 3, 8, 116, 105, 109, 101, 108, 105, 110, 101, 1, 5, 118, 97, 108, 117, 101, 7, 4, 0, 18, 112, 114, 105, 109, 105, 116, 105, 118, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 0, 8, 1, 114, 3, 2, 111, 112, 3, 3, 105, 110, 100, 1, 5, 118, 97, 108, 117, 101, 7, 4, 0, 18, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 105, 109, 105, 116, 105, 118, 101, 3, 0, 10, 1, 114, 2, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 7, 4, 0, 27, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 3, 0, 12, 1, 114, 3, 6, 102, 105, 108, 116, 101, 114, 5, 4, 110, 111, 100, 101, 1, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 13, 4, 0, 17, 102, 105, 108, 116, 101, 114, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 0, 14, 1, 114, 2, 8, 102, 105, 108, 116, 101, 114, 101, 100, 15, 4, 116, 105, 109, 101, 119, 4, 0, 24, 102, 105, 108, 116, 101, 114, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 105, 110, 3, 0, 16, 1, 113, 7, 4, 108, 101, 97, 102, 0, 0, 9, 112, 114, 105, 109, 105, 116, 105, 118, 101, 1, 9, 0, 8, 110, 111, 116, 45, 110, 111, 100, 101, 1, 1, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 15, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 17, 0, 17, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 119, 104, 101, 114, 101, 1, 15, 0, 24, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 105, 110, 45, 99, 117, 114, 45, 115, 116, 97, 116, 101, 1, 15, 0, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 18, 1, 112, 19, 1, 114, 1, 5, 110, 111, 100, 101, 115, 20, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 21, 1, 112, 115, 1, 64, 0, 0, 23, 4, 0, 13, 103, 101, 116, 45, 116, 105, 109, 101, 108, 105, 110, 101, 115, 1, 24, 1, 64, 1, 8, 116, 105, 109, 101, 108, 105, 110, 101, 22, 1, 0, 4, 0, 19, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 25, 4, 1, 18, 103, 111, 108, 101, 109, 58, 116, 105, 109, 101, 108, 105, 110, 101, 47, 97, 112, 105, 5, 0, 4, 1, 29, 103, 111, 108, 101, 109, 58, 116, 105, 109, 101, 108, 105, 110, 101, 47, 103, 111, 108, 101, 109, 45, 116, 105, 109, 101, 108, 105, 110, 101, 4, 0, 11, 20, 1, 0, 14, 103, 111, 108, 101, 109, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
