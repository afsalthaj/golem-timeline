// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod golem {
  pub mod rpc {
    
    #[allow(clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type NodeIndex = i32;
      #[derive(Clone)]
      pub struct Uri {
        pub value: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Uri {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Uri").field("value", &self.value).finish()
        }
      }
      #[derive(Clone)]
      pub enum WitNode{
        RecordValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        VariantValue((u32,Option<NodeIndex>,)),
        EnumValue(u32),
        FlagsValue(wit_bindgen::rt::vec::Vec::<bool>),
        TupleValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        ListValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        OptionValue(Option<NodeIndex>),
        ResultValue(Result<Option<NodeIndex>,Option<NodeIndex>>),
        PrimU8(u8),
        PrimU16(u16),
        PrimU32(u32),
        PrimU64(u64),
        PrimS8(i8),
        PrimS16(i16),
        PrimS32(i32),
        PrimS64(i64),
        PrimFloat32(f32),
        PrimFloat64(f64),
        PrimChar(char),
        PrimBool(bool),
        PrimString(wit_bindgen::rt::string::String),
        Handle((Uri,u64,)),
      }
      impl ::core::fmt::Debug for WitNode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            WitNode::RecordValue(e) => {
              f.debug_tuple("WitNode::RecordValue").field(e).finish()
            }
            WitNode::VariantValue(e) => {
              f.debug_tuple("WitNode::VariantValue").field(e).finish()
            }
            WitNode::EnumValue(e) => {
              f.debug_tuple("WitNode::EnumValue").field(e).finish()
            }
            WitNode::FlagsValue(e) => {
              f.debug_tuple("WitNode::FlagsValue").field(e).finish()
            }
            WitNode::TupleValue(e) => {
              f.debug_tuple("WitNode::TupleValue").field(e).finish()
            }
            WitNode::ListValue(e) => {
              f.debug_tuple("WitNode::ListValue").field(e).finish()
            }
            WitNode::OptionValue(e) => {
              f.debug_tuple("WitNode::OptionValue").field(e).finish()
            }
            WitNode::ResultValue(e) => {
              f.debug_tuple("WitNode::ResultValue").field(e).finish()
            }
            WitNode::PrimU8(e) => {
              f.debug_tuple("WitNode::PrimU8").field(e).finish()
            }
            WitNode::PrimU16(e) => {
              f.debug_tuple("WitNode::PrimU16").field(e).finish()
            }
            WitNode::PrimU32(e) => {
              f.debug_tuple("WitNode::PrimU32").field(e).finish()
            }
            WitNode::PrimU64(e) => {
              f.debug_tuple("WitNode::PrimU64").field(e).finish()
            }
            WitNode::PrimS8(e) => {
              f.debug_tuple("WitNode::PrimS8").field(e).finish()
            }
            WitNode::PrimS16(e) => {
              f.debug_tuple("WitNode::PrimS16").field(e).finish()
            }
            WitNode::PrimS32(e) => {
              f.debug_tuple("WitNode::PrimS32").field(e).finish()
            }
            WitNode::PrimS64(e) => {
              f.debug_tuple("WitNode::PrimS64").field(e).finish()
            }
            WitNode::PrimFloat32(e) => {
              f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
            }
            WitNode::PrimFloat64(e) => {
              f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
            }
            WitNode::PrimChar(e) => {
              f.debug_tuple("WitNode::PrimChar").field(e).finish()
            }
            WitNode::PrimBool(e) => {
              f.debug_tuple("WitNode::PrimBool").field(e).finish()
            }
            WitNode::PrimString(e) => {
              f.debug_tuple("WitNode::PrimString").field(e).finish()
            }
            WitNode::Handle(e) => {
              f.debug_tuple("WitNode::Handle").field(e).finish()
            }
          }
        }
      }
      #[derive(Clone)]
      pub struct WitValue {
        pub nodes: wit_bindgen::rt::vec::Vec::<WitNode>,
      }
      impl ::core::fmt::Debug for WitValue {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
        }
      }
      #[derive(Clone)]
      pub enum RpcError{
        ProtocolError(wit_bindgen::rt::string::String),
        Denied(wit_bindgen::rt::string::String),
        NotFound(wit_bindgen::rt::string::String),
        RemoteInternalError(wit_bindgen::rt::string::String),
      }
      impl ::core::fmt::Debug for RpcError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            RpcError::ProtocolError(e) => {
              f.debug_tuple("RpcError::ProtocolError").field(e).finish()
            }
            RpcError::Denied(e) => {
              f.debug_tuple("RpcError::Denied").field(e).finish()
            }
            RpcError::NotFound(e) => {
              f.debug_tuple("RpcError::NotFound").field(e).finish()
            }
            RpcError::RemoteInternalError(e) => {
              f.debug_tuple("RpcError::RemoteInternalError").field(e).finish()
            }
          }
        }
      }
      impl ::core::fmt::Display for RpcError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{:?}", self)
        }
      }
      
      impl std::error::Error for RpcError {}
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct WasmRpc{
        handle: wit_bindgen::rt::Resource<WasmRpc>,
      }
      
      impl WasmRpc{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for WasmRpc{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
            extern "C" {
              #[link_name = "[resource-drop]wasm-rpc"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl WasmRpc {
        #[allow(unused_unsafe, clippy::all)]
        pub fn new(location: &Uri,) -> Self{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let Uri{ value:value0, } = location;
            let vec1 = value0;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
            extern "C" {
              #[link_name = "[constructor]wasm-rpc"]
              fn wit_import(_: i32, _: i32, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ) -> i32{ unreachable!() }
            let ret = wit_import(ptr1, len1);
            WasmRpc::from_handle(ret as u32)
          }
        }
      }
      impl WasmRpc {
        #[allow(unused_unsafe, clippy::all)]
        pub fn invoke_and_await(&self,function_name: &str,function_params: &[WitValue],) -> Result<WitValue,RpcError>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let mut cleanup_list = Vec::new();
            
            #[repr(align(4))]
            struct RetArea([u8; 16]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = function_name;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let vec12 = function_params;
            let len12 = vec12.len() as i32;
            let layout12 = alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
            let result12 = if layout12.size() != 0
            {
              let ptr = alloc::alloc(layout12);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout12);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec12.into_iter().enumerate() {
              let base = result12 as i32 + (i as i32) * 8;
              {
                let WitValue{ nodes:nodes1, } = e;
                let vec11 = nodes1;
                let len11 = vec11.len() as i32;
                let layout11 = alloc::Layout::from_size_align_unchecked(vec11.len() * 24, 8);
                let result11 = if layout11.size() != 0
                {
                  let ptr = alloc::alloc(layout11);
                  if ptr.is_null()
                  {
                    alloc::handle_alloc_error(layout11);
                  }
                  ptr
                }else {{
                  ::core::ptr::null_mut()
                }};
                for (i, e) in vec11.into_iter().enumerate() {
                  let base = result11 as i32 + (i as i32) * 24;
                  {
                    match e {
                      WitNode::RecordValue(e) => {
                        *((base + 0) as *mut u8) = (0i32) as u8;
                        let vec2 = e;
                        let ptr2 = vec2.as_ptr() as i32;
                        let len2 = vec2.len() as i32;
                        *((base + 12) as *mut i32) = len2;
                        *((base + 8) as *mut i32) = ptr2;
                      },
                      WitNode::VariantValue(e) => {
                        *((base + 0) as *mut u8) = (1i32) as u8;
                        let (t3_0, t3_1, ) = e;
                        *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(t3_0);
                        match t3_1 {
                          Some(e) => {
                            *((base + 12) as *mut u8) = (1i32) as u8;
                            *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                          },
                          None => {
                            {
                              *((base + 12) as *mut u8) = (0i32) as u8;
                            }
                          },
                        };},
                        WitNode::EnumValue(e) => {
                          *((base + 0) as *mut u8) = (2i32) as u8;
                          *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                        },
                        WitNode::FlagsValue(e) => {
                          *((base + 0) as *mut u8) = (3i32) as u8;
                          let vec4 = e;
                          let len4 = vec4.len() as i32;
                          let layout4 = alloc::Layout::from_size_align_unchecked(vec4.len() * 1, 1);
                          let result4 = if layout4.size() != 0
                          {
                            let ptr = alloc::alloc(layout4);
                            if ptr.is_null()
                            {
                              alloc::handle_alloc_error(layout4);
                            }
                            ptr
                          }else {{
                            ::core::ptr::null_mut()
                          }};
                          for (i, e) in vec4.into_iter().enumerate() {
                            let base = result4 as i32 + (i as i32) * 1;
                            {
                              *((base + 0) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                            }
                          }
                          *((base + 12) as *mut i32) = len4;
                          *((base + 8) as *mut i32) = result4 as i32;
                          cleanup_list.extend_from_slice(&[(result4, layout4),]);
                        },
                        WitNode::TupleValue(e) => {
                          *((base + 0) as *mut u8) = (4i32) as u8;
                          let vec5 = e;
                          let ptr5 = vec5.as_ptr() as i32;
                          let len5 = vec5.len() as i32;
                          *((base + 12) as *mut i32) = len5;
                          *((base + 8) as *mut i32) = ptr5;
                        },
                        WitNode::ListValue(e) => {
                          *((base + 0) as *mut u8) = (5i32) as u8;
                          let vec6 = e;
                          let ptr6 = vec6.as_ptr() as i32;
                          let len6 = vec6.len() as i32;
                          *((base + 12) as *mut i32) = len6;
                          *((base + 8) as *mut i32) = ptr6;
                        },
                        WitNode::OptionValue(e) => {
                          *((base + 0) as *mut u8) = (6i32) as u8;
                          match e {
                            Some(e) => {
                              *((base + 8) as *mut u8) = (1i32) as u8;
                              *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                            },
                            None => {
                              {
                                *((base + 8) as *mut u8) = (0i32) as u8;
                              }
                            },
                          };},
                          WitNode::ResultValue(e) => {
                            *((base + 0) as *mut u8) = (7i32) as u8;
                            match e {
                              Ok(e) => { {
                                *((base + 8) as *mut u8) = (0i32) as u8;
                                match e {
                                  Some(e) => {
                                    *((base + 12) as *mut u8) = (1i32) as u8;
                                    *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                  },
                                  None => {
                                    {
                                      *((base + 12) as *mut u8) = (0i32) as u8;
                                    }
                                  },
                                };} },
                                Err(e) => { {
                                  *((base + 8) as *mut u8) = (1i32) as u8;
                                  match e {
                                    Some(e) => {
                                      *((base + 12) as *mut u8) = (1i32) as u8;
                                      *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                    },
                                    None => {
                                      {
                                        *((base + 12) as *mut u8) = (0i32) as u8;
                                      }
                                    },
                                  };} },
                                };},
                                WitNode::PrimU8(e) => {
                                  *((base + 0) as *mut u8) = (8i32) as u8;
                                  *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                },
                                WitNode::PrimU16(e) => {
                                  *((base + 0) as *mut u8) = (9i32) as u8;
                                  *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                },
                                WitNode::PrimU32(e) => {
                                  *((base + 0) as *mut u8) = (10i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimU64(e) => {
                                  *((base + 0) as *mut u8) = (11i32) as u8;
                                  *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                },
                                WitNode::PrimS8(e) => {
                                  *((base + 0) as *mut u8) = (12i32) as u8;
                                  *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                },
                                WitNode::PrimS16(e) => {
                                  *((base + 0) as *mut u8) = (13i32) as u8;
                                  *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                },
                                WitNode::PrimS32(e) => {
                                  *((base + 0) as *mut u8) = (14i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimS64(e) => {
                                  *((base + 0) as *mut u8) = (15i32) as u8;
                                  *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                },
                                WitNode::PrimFloat32(e) => {
                                  *((base + 0) as *mut u8) = (16i32) as u8;
                                  *((base + 8) as *mut f32) = wit_bindgen::rt::as_f32(e);
                                },
                                WitNode::PrimFloat64(e) => {
                                  *((base + 0) as *mut u8) = (17i32) as u8;
                                  *((base + 8) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                },
                                WitNode::PrimChar(e) => {
                                  *((base + 0) as *mut u8) = (18i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimBool(e) => {
                                  *((base + 0) as *mut u8) = (19i32) as u8;
                                  *((base + 8) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                },
                                WitNode::PrimString(e) => {
                                  *((base + 0) as *mut u8) = (20i32) as u8;
                                  let vec7 = e;
                                  let ptr7 = vec7.as_ptr() as i32;
                                  let len7 = vec7.len() as i32;
                                  *((base + 12) as *mut i32) = len7;
                                  *((base + 8) as *mut i32) = ptr7;
                                },
                                WitNode::Handle(e) => {
                                  *((base + 0) as *mut u8) = (21i32) as u8;
                                  let (t8_0, t8_1, ) = e;
                                  let Uri{ value:value9, } = t8_0;
                                  let vec10 = value9;
                                  let ptr10 = vec10.as_ptr() as i32;
                                  let len10 = vec10.len() as i32;
                                  *((base + 12) as *mut i32) = len10;
                                  *((base + 8) as *mut i32) = ptr10;
                                  *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(t8_1);
                                },
                              }
                            }
                          }
                          *((base + 4) as *mut i32) = len11;
                          *((base + 0) as *mut i32) = result11 as i32;
                          cleanup_list.extend_from_slice(&[(result11, layout11),]);
                        }
                      }
                      let ptr13 = ret_area.as_mut_ptr() as i32;
                      #[cfg(target_arch = "wasm32")]
                      #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                      extern "C" {
                        #[link_name = "[method]wasm-rpc.invoke-and-await"]
                        fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                      }
                      
                      #[cfg(not(target_arch = "wasm32"))]
                      fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                      wit_import((self).handle() as i32, ptr0, len0, result12 as i32, len12, ptr13);
                      let l14 = i32::from(*((ptr13 + 0) as *const u8));
                      if layout12.size() != 0 {
                        alloc::dealloc(result12, layout12);
                      }
                      for (ptr, layout) in cleanup_list {
                        
                        if layout.size() != 0 {
                          
                          alloc::dealloc(ptr, layout);
                          
                        }
                        
                      }
                      match l14 {
                        0 => {
                          let e = {
                            let l15 = *((ptr13 + 4) as *const i32);
                            let l16 = *((ptr13 + 8) as *const i32);
                            let base62 = l15;
                            let len62 = l16;
                            let mut result62 = Vec::with_capacity(len62 as usize);
                            for i in 0..len62 {
                              let base = base62 + i * 24;
                              let e62 = {
                                let l17 = i32::from(*((base + 0) as *const u8));
                                let v61 = match l17 {
                                  0 => {
                                    let e61 = {
                                      let l18 = *((base + 8) as *const i32);
                                      let l19 = *((base + 12) as *const i32);
                                      let len20 = l19 as usize;
                                      
                                      Vec::from_raw_parts(l18 as *mut _, len20, len20)
                                    };
                                    WitNode::RecordValue(e61)
                                  }
                                  1 => {
                                    let e61 = {
                                      let l21 = *((base + 8) as *const i32);
                                      let l22 = i32::from(*((base + 12) as *const u8));
                                      
                                      (l21 as u32, match l22 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l23 = *((base + 16) as *const i32);
                                            
                                            l23
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      })
                                    };
                                    WitNode::VariantValue(e61)
                                  }
                                  2 => {
                                    let e61 = {
                                      let l24 = *((base + 8) as *const i32);
                                      
                                      l24 as u32
                                    };
                                    WitNode::EnumValue(e61)
                                  }
                                  3 => {
                                    let e61 = {
                                      let l25 = *((base + 8) as *const i32);
                                      let l26 = *((base + 12) as *const i32);
                                      let base28 = l25;
                                      let len28 = l26;
                                      let mut result28 = Vec::with_capacity(len28 as usize);
                                      for i in 0..len28 {
                                        let base = base28 + i * 1;
                                        let e28 = {
                                          let l27 = i32::from(*((base + 0) as *const u8));
                                          
                                          wit_bindgen::rt::bool_lift(l27 as u8)
                                        };
                                        result28.push(e28);
                                      }
                                      wit_bindgen::rt::dealloc(base28, (len28 as usize) * 1, 1);
                                      
                                      result28
                                    };
                                    WitNode::FlagsValue(e61)
                                  }
                                  4 => {
                                    let e61 = {
                                      let l29 = *((base + 8) as *const i32);
                                      let l30 = *((base + 12) as *const i32);
                                      let len31 = l30 as usize;
                                      
                                      Vec::from_raw_parts(l29 as *mut _, len31, len31)
                                    };
                                    WitNode::TupleValue(e61)
                                  }
                                  5 => {
                                    let e61 = {
                                      let l32 = *((base + 8) as *const i32);
                                      let l33 = *((base + 12) as *const i32);
                                      let len34 = l33 as usize;
                                      
                                      Vec::from_raw_parts(l32 as *mut _, len34, len34)
                                    };
                                    WitNode::ListValue(e61)
                                  }
                                  6 => {
                                    let e61 = {
                                      let l35 = i32::from(*((base + 8) as *const u8));
                                      
                                      match l35 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l36 = *((base + 12) as *const i32);
                                            
                                            l36
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      }
                                    };
                                    WitNode::OptionValue(e61)
                                  }
                                  7 => {
                                    let e61 = {
                                      let l37 = i32::from(*((base + 8) as *const u8));
                                      
                                      match l37 {
                                        0 => {
                                          let e = {
                                            let l38 = i32::from(*((base + 12) as *const u8));
                                            
                                            match l38 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l39 = *((base + 16) as *const i32);
                                                  
                                                  l39
                                                };
                                                Some(e)
                                              }
                                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Ok(e)
                                        }
                                        1 => {
                                          let e = {
                                            let l40 = i32::from(*((base + 12) as *const u8));
                                            
                                            match l40 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l41 = *((base + 16) as *const i32);
                                                  
                                                  l41
                                                };
                                                Some(e)
                                              }
                                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Err(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      }
                                    };
                                    WitNode::ResultValue(e61)
                                  }
                                  8 => {
                                    let e61 = {
                                      let l42 = i32::from(*((base + 8) as *const u8));
                                      
                                      l42 as u8
                                    };
                                    WitNode::PrimU8(e61)
                                  }
                                  9 => {
                                    let e61 = {
                                      let l43 = i32::from(*((base + 8) as *const u16));
                                      
                                      l43 as u16
                                    };
                                    WitNode::PrimU16(e61)
                                  }
                                  10 => {
                                    let e61 = {
                                      let l44 = *((base + 8) as *const i32);
                                      
                                      l44 as u32
                                    };
                                    WitNode::PrimU32(e61)
                                  }
                                  11 => {
                                    let e61 = {
                                      let l45 = *((base + 8) as *const i64);
                                      
                                      l45 as u64
                                    };
                                    WitNode::PrimU64(e61)
                                  }
                                  12 => {
                                    let e61 = {
                                      let l46 = i32::from(*((base + 8) as *const i8));
                                      
                                      l46 as i8
                                    };
                                    WitNode::PrimS8(e61)
                                  }
                                  13 => {
                                    let e61 = {
                                      let l47 = i32::from(*((base + 8) as *const i16));
                                      
                                      l47 as i16
                                    };
                                    WitNode::PrimS16(e61)
                                  }
                                  14 => {
                                    let e61 = {
                                      let l48 = *((base + 8) as *const i32);
                                      
                                      l48
                                    };
                                    WitNode::PrimS32(e61)
                                  }
                                  15 => {
                                    let e61 = {
                                      let l49 = *((base + 8) as *const i64);
                                      
                                      l49
                                    };
                                    WitNode::PrimS64(e61)
                                  }
                                  16 => {
                                    let e61 = {
                                      let l50 = *((base + 8) as *const f32);
                                      
                                      l50
                                    };
                                    WitNode::PrimFloat32(e61)
                                  }
                                  17 => {
                                    let e61 = {
                                      let l51 = *((base + 8) as *const f64);
                                      
                                      l51
                                    };
                                    WitNode::PrimFloat64(e61)
                                  }
                                  18 => {
                                    let e61 = {
                                      let l52 = *((base + 8) as *const i32);
                                      
                                      wit_bindgen::rt::char_lift(l52 as u32)
                                    };
                                    WitNode::PrimChar(e61)
                                  }
                                  19 => {
                                    let e61 = {
                                      let l53 = i32::from(*((base + 8) as *const u8));
                                      
                                      wit_bindgen::rt::bool_lift(l53 as u8)
                                    };
                                    WitNode::PrimBool(e61)
                                  }
                                  20 => {
                                    let e61 = {
                                      let l54 = *((base + 8) as *const i32);
                                      let l55 = *((base + 12) as *const i32);
                                      let len56 = l55 as usize;
                                      let bytes56 = Vec::from_raw_parts(l54 as *mut _, len56, len56);
                                      
                                      wit_bindgen::rt::string_lift(bytes56)
                                    };
                                    WitNode::PrimString(e61)
                                  }
                                  n => {
                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                    let e61 = {
                                      let l57 = *((base + 8) as *const i32);
                                      let l58 = *((base + 12) as *const i32);
                                      let len59 = l58 as usize;
                                      let bytes59 = Vec::from_raw_parts(l57 as *mut _, len59, len59);
                                      let l60 = *((base + 16) as *const i64);
                                      
                                      (Uri{
                                        value: wit_bindgen::rt::string_lift(bytes59),
                                      }, l60 as u64)
                                    };
                                    WitNode::Handle(e61)
                                  }
                                };
                                
                                v61
                              };
                              result62.push(e62);
                            }
                            wit_bindgen::rt::dealloc(base62, (len62 as usize) * 24, 8);
                            
                            WitValue{
                              nodes: result62,
                            }
                          };
                          Ok(e)
                        }
                        1 => {
                          let e = {
                            let l63 = i32::from(*((ptr13 + 4) as *const u8));
                            let v76 = match l63 {
                              0 => {
                                let e76 = {
                                  let l64 = *((ptr13 + 8) as *const i32);
                                  let l65 = *((ptr13 + 12) as *const i32);
                                  let len66 = l65 as usize;
                                  let bytes66 = Vec::from_raw_parts(l64 as *mut _, len66, len66);
                                  
                                  wit_bindgen::rt::string_lift(bytes66)
                                };
                                RpcError::ProtocolError(e76)
                              }
                              1 => {
                                let e76 = {
                                  let l67 = *((ptr13 + 8) as *const i32);
                                  let l68 = *((ptr13 + 12) as *const i32);
                                  let len69 = l68 as usize;
                                  let bytes69 = Vec::from_raw_parts(l67 as *mut _, len69, len69);
                                  
                                  wit_bindgen::rt::string_lift(bytes69)
                                };
                                RpcError::Denied(e76)
                              }
                              2 => {
                                let e76 = {
                                  let l70 = *((ptr13 + 8) as *const i32);
                                  let l71 = *((ptr13 + 12) as *const i32);
                                  let len72 = l71 as usize;
                                  let bytes72 = Vec::from_raw_parts(l70 as *mut _, len72, len72);
                                  
                                  wit_bindgen::rt::string_lift(bytes72)
                                };
                                RpcError::NotFound(e76)
                              }
                              n => {
                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                let e76 = {
                                  let l73 = *((ptr13 + 8) as *const i32);
                                  let l74 = *((ptr13 + 12) as *const i32);
                                  let len75 = l74 as usize;
                                  let bytes75 = Vec::from_raw_parts(l73 as *mut _, len75, len75);
                                  
                                  wit_bindgen::rt::string_lift(bytes75)
                                };
                                RpcError::RemoteInternalError(e76)
                              }
                            };
                            
                            v76
                          };
                          Err(e)
                        }
                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                      }
                    }
                  }
                }
                impl WasmRpc {
                  #[allow(unused_unsafe, clippy::all)]
                  pub fn invoke(&self,function_name: &str,function_params: &[WitValue],) -> Result<(),RpcError>{
                    
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                    unsafe {
                      let mut cleanup_list = Vec::new();
                      
                      #[repr(align(4))]
                      struct RetArea([u8; 16]);
                      let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                      let vec0 = function_name;
                      let ptr0 = vec0.as_ptr() as i32;
                      let len0 = vec0.len() as i32;
                      let vec12 = function_params;
                      let len12 = vec12.len() as i32;
                      let layout12 = alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                      let result12 = if layout12.size() != 0
                      {
                        let ptr = alloc::alloc(layout12);
                        if ptr.is_null()
                        {
                          alloc::handle_alloc_error(layout12);
                        }
                        ptr
                      }else {{
                        ::core::ptr::null_mut()
                      }};
                      for (i, e) in vec12.into_iter().enumerate() {
                        let base = result12 as i32 + (i as i32) * 8;
                        {
                          let WitValue{ nodes:nodes1, } = e;
                          let vec11 = nodes1;
                          let len11 = vec11.len() as i32;
                          let layout11 = alloc::Layout::from_size_align_unchecked(vec11.len() * 24, 8);
                          let result11 = if layout11.size() != 0
                          {
                            let ptr = alloc::alloc(layout11);
                            if ptr.is_null()
                            {
                              alloc::handle_alloc_error(layout11);
                            }
                            ptr
                          }else {{
                            ::core::ptr::null_mut()
                          }};
                          for (i, e) in vec11.into_iter().enumerate() {
                            let base = result11 as i32 + (i as i32) * 24;
                            {
                              match e {
                                WitNode::RecordValue(e) => {
                                  *((base + 0) as *mut u8) = (0i32) as u8;
                                  let vec2 = e;
                                  let ptr2 = vec2.as_ptr() as i32;
                                  let len2 = vec2.len() as i32;
                                  *((base + 12) as *mut i32) = len2;
                                  *((base + 8) as *mut i32) = ptr2;
                                },
                                WitNode::VariantValue(e) => {
                                  *((base + 0) as *mut u8) = (1i32) as u8;
                                  let (t3_0, t3_1, ) = e;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(t3_0);
                                  match t3_1 {
                                    Some(e) => {
                                      *((base + 12) as *mut u8) = (1i32) as u8;
                                      *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                    },
                                    None => {
                                      {
                                        *((base + 12) as *mut u8) = (0i32) as u8;
                                      }
                                    },
                                  };},
                                  WitNode::EnumValue(e) => {
                                    *((base + 0) as *mut u8) = (2i32) as u8;
                                    *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                  },
                                  WitNode::FlagsValue(e) => {
                                    *((base + 0) as *mut u8) = (3i32) as u8;
                                    let vec4 = e;
                                    let len4 = vec4.len() as i32;
                                    let layout4 = alloc::Layout::from_size_align_unchecked(vec4.len() * 1, 1);
                                    let result4 = if layout4.size() != 0
                                    {
                                      let ptr = alloc::alloc(layout4);
                                      if ptr.is_null()
                                      {
                                        alloc::handle_alloc_error(layout4);
                                      }
                                      ptr
                                    }else {{
                                      ::core::ptr::null_mut()
                                    }};
                                    for (i, e) in vec4.into_iter().enumerate() {
                                      let base = result4 as i32 + (i as i32) * 1;
                                      {
                                        *((base + 0) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                      }
                                    }
                                    *((base + 12) as *mut i32) = len4;
                                    *((base + 8) as *mut i32) = result4 as i32;
                                    cleanup_list.extend_from_slice(&[(result4, layout4),]);
                                  },
                                  WitNode::TupleValue(e) => {
                                    *((base + 0) as *mut u8) = (4i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr() as i32;
                                    let len5 = vec5.len() as i32;
                                    *((base + 12) as *mut i32) = len5;
                                    *((base + 8) as *mut i32) = ptr5;
                                  },
                                  WitNode::ListValue(e) => {
                                    *((base + 0) as *mut u8) = (5i32) as u8;
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr() as i32;
                                    let len6 = vec6.len() as i32;
                                    *((base + 12) as *mut i32) = len6;
                                    *((base + 8) as *mut i32) = ptr6;
                                  },
                                  WitNode::OptionValue(e) => {
                                    *((base + 0) as *mut u8) = (6i32) as u8;
                                    match e {
                                      Some(e) => {
                                        *((base + 8) as *mut u8) = (1i32) as u8;
                                        *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                      },
                                      None => {
                                        {
                                          *((base + 8) as *mut u8) = (0i32) as u8;
                                        }
                                      },
                                    };},
                                    WitNode::ResultValue(e) => {
                                      *((base + 0) as *mut u8) = (7i32) as u8;
                                      match e {
                                        Ok(e) => { {
                                          *((base + 8) as *mut u8) = (0i32) as u8;
                                          match e {
                                            Some(e) => {
                                              *((base + 12) as *mut u8) = (1i32) as u8;
                                              *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                            },
                                            None => {
                                              {
                                                *((base + 12) as *mut u8) = (0i32) as u8;
                                              }
                                            },
                                          };} },
                                          Err(e) => { {
                                            *((base + 8) as *mut u8) = (1i32) as u8;
                                            match e {
                                              Some(e) => {
                                                *((base + 12) as *mut u8) = (1i32) as u8;
                                                *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                              },
                                              None => {
                                                {
                                                  *((base + 12) as *mut u8) = (0i32) as u8;
                                                }
                                              },
                                            };} },
                                          };},
                                          WitNode::PrimU8(e) => {
                                            *((base + 0) as *mut u8) = (8i32) as u8;
                                            *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                          },
                                          WitNode::PrimU16(e) => {
                                            *((base + 0) as *mut u8) = (9i32) as u8;
                                            *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                          },
                                          WitNode::PrimU32(e) => {
                                            *((base + 0) as *mut u8) = (10i32) as u8;
                                            *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                          },
                                          WitNode::PrimU64(e) => {
                                            *((base + 0) as *mut u8) = (11i32) as u8;
                                            *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                          },
                                          WitNode::PrimS8(e) => {
                                            *((base + 0) as *mut u8) = (12i32) as u8;
                                            *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                          },
                                          WitNode::PrimS16(e) => {
                                            *((base + 0) as *mut u8) = (13i32) as u8;
                                            *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                          },
                                          WitNode::PrimS32(e) => {
                                            *((base + 0) as *mut u8) = (14i32) as u8;
                                            *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                          },
                                          WitNode::PrimS64(e) => {
                                            *((base + 0) as *mut u8) = (15i32) as u8;
                                            *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                          },
                                          WitNode::PrimFloat32(e) => {
                                            *((base + 0) as *mut u8) = (16i32) as u8;
                                            *((base + 8) as *mut f32) = wit_bindgen::rt::as_f32(e);
                                          },
                                          WitNode::PrimFloat64(e) => {
                                            *((base + 0) as *mut u8) = (17i32) as u8;
                                            *((base + 8) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                          },
                                          WitNode::PrimChar(e) => {
                                            *((base + 0) as *mut u8) = (18i32) as u8;
                                            *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                          },
                                          WitNode::PrimBool(e) => {
                                            *((base + 0) as *mut u8) = (19i32) as u8;
                                            *((base + 8) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                          },
                                          WitNode::PrimString(e) => {
                                            *((base + 0) as *mut u8) = (20i32) as u8;
                                            let vec7 = e;
                                            let ptr7 = vec7.as_ptr() as i32;
                                            let len7 = vec7.len() as i32;
                                            *((base + 12) as *mut i32) = len7;
                                            *((base + 8) as *mut i32) = ptr7;
                                          },
                                          WitNode::Handle(e) => {
                                            *((base + 0) as *mut u8) = (21i32) as u8;
                                            let (t8_0, t8_1, ) = e;
                                            let Uri{ value:value9, } = t8_0;
                                            let vec10 = value9;
                                            let ptr10 = vec10.as_ptr() as i32;
                                            let len10 = vec10.len() as i32;
                                            *((base + 12) as *mut i32) = len10;
                                            *((base + 8) as *mut i32) = ptr10;
                                            *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(t8_1);
                                          },
                                        }
                                      }
                                    }
                                    *((base + 4) as *mut i32) = len11;
                                    *((base + 0) as *mut i32) = result11 as i32;
                                    cleanup_list.extend_from_slice(&[(result11, layout11),]);
                                  }
                                }
                                let ptr13 = ret_area.as_mut_ptr() as i32;
                                #[cfg(target_arch = "wasm32")]
                                #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                                extern "C" {
                                  #[link_name = "[method]wasm-rpc.invoke"]
                                  fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                                }
                                
                                #[cfg(not(target_arch = "wasm32"))]
                                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                                wit_import((self).handle() as i32, ptr0, len0, result12 as i32, len12, ptr13);
                                let l14 = i32::from(*((ptr13 + 0) as *const u8));
                                if layout12.size() != 0 {
                                  alloc::dealloc(result12, layout12);
                                }
                                for (ptr, layout) in cleanup_list {
                                  
                                  if layout.size() != 0 {
                                    
                                    alloc::dealloc(ptr, layout);
                                    
                                  }
                                  
                                }
                                match l14 {
                                  0 => {
                                    let e = ();
                                    Ok(e)
                                  }
                                  1 => {
                                    let e = {
                                      let l15 = i32::from(*((ptr13 + 4) as *const u8));
                                      let v28 = match l15 {
                                        0 => {
                                          let e28 = {
                                            let l16 = *((ptr13 + 8) as *const i32);
                                            let l17 = *((ptr13 + 12) as *const i32);
                                            let len18 = l17 as usize;
                                            let bytes18 = Vec::from_raw_parts(l16 as *mut _, len18, len18);
                                            
                                            wit_bindgen::rt::string_lift(bytes18)
                                          };
                                          RpcError::ProtocolError(e28)
                                        }
                                        1 => {
                                          let e28 = {
                                            let l19 = *((ptr13 + 8) as *const i32);
                                            let l20 = *((ptr13 + 12) as *const i32);
                                            let len21 = l20 as usize;
                                            let bytes21 = Vec::from_raw_parts(l19 as *mut _, len21, len21);
                                            
                                            wit_bindgen::rt::string_lift(bytes21)
                                          };
                                          RpcError::Denied(e28)
                                        }
                                        2 => {
                                          let e28 = {
                                            let l22 = *((ptr13 + 8) as *const i32);
                                            let l23 = *((ptr13 + 12) as *const i32);
                                            let len24 = l23 as usize;
                                            let bytes24 = Vec::from_raw_parts(l22 as *mut _, len24, len24);
                                            
                                            wit_bindgen::rt::string_lift(bytes24)
                                          };
                                          RpcError::NotFound(e28)
                                        }
                                        n => {
                                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                                          let e28 = {
                                            let l25 = *((ptr13 + 8) as *const i32);
                                            let l26 = *((ptr13 + 12) as *const i32);
                                            let len27 = l26 as usize;
                                            let bytes27 = Vec::from_raw_parts(l25 as *mut _, len27, len27);
                                            
                                            wit_bindgen::rt::string_lift(bytes27)
                                          };
                                          RpcError::RemoteInternalError(e28)
                                        }
                                      };
                                      
                                      v28
                                    };
                                    Err(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                }
                              }
                            }
                          }
                          
                        }
                        
                      }
                    }
                    pub mod timeline {
                      pub mod core {
                        
                        #[allow(clippy::all)]
                        pub mod api {
                          #[used]
                          #[doc(hidden)]
                          #[cfg(target_arch = "wasm32")]
                          static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
                          pub type EventValue = super::super::super::timeline::event_processor::api::EventValue;
                          pub type EventPredicate = super::super::super::timeline::event_processor::api::EventPredicate;
                          pub type TypedTimelineResultWorker = super::super::super::timeline::timeline_processor::api::TypedTimelineResultWorker;
                          pub type NodeIndex = i32;
                          /// A user can provide a prefix to each worker
                          /// however it is the engine to decide the exact worker-id which
                          /// will be prefixed by worker-id-prefix
                          /// In future, we can allow users to simply use prefix
                          /// to aggregate workers (to reduce number of workers)
                          #[derive(Clone)]
                          pub struct Server {
                            pub worker_id_prefix: wit_bindgen::rt::string::String,
                            pub template_id: wit_bindgen::rt::string::String,
                          }
                          impl ::core::fmt::Debug for Server {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("Server").field("worker-id-prefix", &self.worker_id_prefix).field("template-id", &self.template_id).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct ServerWithEventColumnName {
                            pub server: Option<Server>,
                            pub event_column_name: wit_bindgen::rt::string::String,
                          }
                          impl ::core::fmt::Debug for ServerWithEventColumnName {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("ServerWithEventColumnName").field("server", &self.server).field("event-column-name", &self.event_column_name).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct BiTimelineWithServer {
                            pub server: Option<Server>,
                            pub left: NodeIndex,
                            pub right: NodeIndex,
                          }
                          impl ::core::fmt::Debug for BiTimelineWithServer {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("BiTimelineWithServer").field("server", &self.server).field("left", &self.left).field("right", &self.right).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct TimelineWithServer {
                            pub server: Option<Server>,
                            pub timeline: NodeIndex,
                          }
                          impl ::core::fmt::Debug for TimelineWithServer {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("TimelineWithServer").field("server", &self.server).field("timeline", &self.timeline).finish()
                            }
                          }
                          /// Comparators used to compare a timeline with a constant
                          #[repr(u8)]
                          #[derive(Clone, Copy, Eq, PartialEq)]
                          pub enum TimelineConstantComparator {
                            EqualTo,
                            GreaterThan,
                            GreaterThanEqual,
                            LessThan,
                            LessThanEqual,
                          }
                          impl ::core::fmt::Debug for TimelineConstantComparator {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              match self {
                                TimelineConstantComparator::EqualTo => {
                                  f.debug_tuple("TimelineConstantComparator::EqualTo").finish()
                                }
                                TimelineConstantComparator::GreaterThan => {
                                  f.debug_tuple("TimelineConstantComparator::GreaterThan").finish()
                                }
                                TimelineConstantComparator::GreaterThanEqual => {
                                  f.debug_tuple("TimelineConstantComparator::GreaterThanEqual").finish()
                                }
                                TimelineConstantComparator::LessThan => {
                                  f.debug_tuple("TimelineConstantComparator::LessThan").finish()
                                }
                                TimelineConstantComparator::LessThanEqual => {
                                  f.debug_tuple("TimelineConstantComparator::LessThanEqual").finish()
                                }
                              }
                            }
                          }
                          
                          impl TimelineConstantComparator{
                            pub(crate) unsafe fn _lift(val: u8) -> TimelineConstantComparator{
                              if !cfg!(debug_assertions) {
                                return ::core::mem::transmute(val);
                              }
                              
                              match val {
                                0 => TimelineConstantComparator::EqualTo,
                                1 => TimelineConstantComparator::GreaterThan,
                                2 => TimelineConstantComparator::GreaterThanEqual,
                                3 => TimelineConstantComparator::LessThan,
                                4 => TimelineConstantComparator::LessThanEqual,
                                
                                _ => panic!("invalid enum discriminant"),
                              }
                            }
                          }
                          
                          /// A  timeline-constant-compared corresponds to classic timeline operations
                          /// in the paper
                          /// A primitive timeline is also maintained in a separate worker/server
                          #[derive(Clone)]
                          pub struct TimelineConstantCompared {
                            pub op: TimelineConstantComparator,
                            pub timeline: NodeIndex,
                            pub value: EventValue,
                            pub server: Option<Server>,
                          }
                          impl ::core::fmt::Debug for TimelineConstantCompared {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("TimelineConstantCompared").field("op", &self.op).field("timeline", &self.timeline).field("value", &self.value).field("server", &self.server).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct TimelineNegated {
                            pub timeline: NodeIndex,
                            pub server: Option<Server>,
                          }
                          impl ::core::fmt::Debug for TimelineNegated {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("TimelineNegated").field("timeline", &self.timeline).field("server", &self.server).finish()
                            }
                          }
                          /// A filtered timeline is operation on state dynamic timelines
                          /// applied with an event filter
                          /// TLHasExistedWithIn(col("userAction" ) == "seek")
                          /// seek and col("userAction) is event-predicate
                          /// and == is filter-op
                          /// A filtered timeline is also maintained in a separate worker/server
                          #[derive(Clone)]
                          pub struct ServerWithEventPredicate {
                            pub event_predicate: EventPredicate,
                            pub server: Option<Server>,
                          }
                          impl ::core::fmt::Debug for ServerWithEventPredicate {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("ServerWithEventPredicate").field("event-predicate", &self.event_predicate).field("server", &self.server).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct ServerWithEventPredicateWithin {
                            pub filtered: ServerWithEventPredicate,
                            pub time: u64,
                          }
                          impl ::core::fmt::Debug for ServerWithEventPredicateWithin {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("ServerWithEventPredicateWithin").field("filtered", &self.filtered).field("time", &self.time).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub enum TimelineNode{
                            TlLatestEventToState(ServerWithEventColumnName),
                            TlHasExisted(ServerWithEventPredicate),
                            TlHasExistedWithin(ServerWithEventPredicateWithin),
                            TimelineComparison(TimelineConstantCompared),
                            TimelineNegation(TimelineNegated),
                            TlDurationWhere(TimelineWithServer),
                            TlDurationInCurState(TimelineWithServer),
                            TlAnd(BiTimelineWithServer),
                            TlOr(BiTimelineWithServer),
                          }
                          impl ::core::fmt::Debug for TimelineNode {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              match self {
                                TimelineNode::TlLatestEventToState(e) => {
                                  f.debug_tuple("TimelineNode::TlLatestEventToState").field(e).finish()
                                }
                                TimelineNode::TlHasExisted(e) => {
                                  f.debug_tuple("TimelineNode::TlHasExisted").field(e).finish()
                                }
                                TimelineNode::TlHasExistedWithin(e) => {
                                  f.debug_tuple("TimelineNode::TlHasExistedWithin").field(e).finish()
                                }
                                TimelineNode::TimelineComparison(e) => {
                                  f.debug_tuple("TimelineNode::TimelineComparison").field(e).finish()
                                }
                                TimelineNode::TimelineNegation(e) => {
                                  f.debug_tuple("TimelineNode::TimelineNegation").field(e).finish()
                                }
                                TimelineNode::TlDurationWhere(e) => {
                                  f.debug_tuple("TimelineNode::TlDurationWhere").field(e).finish()
                                }
                                TimelineNode::TlDurationInCurState(e) => {
                                  f.debug_tuple("TimelineNode::TlDurationInCurState").field(e).finish()
                                }
                                TimelineNode::TlAnd(e) => {
                                  f.debug_tuple("TimelineNode::TlAnd").field(e).finish()
                                }
                                TimelineNode::TlOr(e) => {
                                  f.debug_tuple("TimelineNode::TlOr").field(e).finish()
                                }
                              }
                            }
                          }
                          #[derive(Clone)]
                          pub struct TimelineOp {
                            pub nodes: wit_bindgen::rt::vec::Vec::<TimelineNode>,
                          }
                          impl ::core::fmt::Debug for TimelineOp {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("TimelineOp").field("nodes", &self.nodes).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct WorkerDetails {
                            pub event_processor_workers: wit_bindgen::rt::vec::Vec::<TypedTimelineResultWorker>,
                            pub result_worker: TypedTimelineResultWorker,
                          }
                          impl ::core::fmt::Debug for WorkerDetails {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("WorkerDetails").field("event-processor-workers", &self.event_processor_workers).field("result-worker", &self.result_worker).finish()
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn initialize_timeline(timeline: &TimelineOp,) -> Result<WorkerDetails,wit_bindgen::rt::string::String>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(4))]
                              struct RetArea([u8; 36]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let TimelineOp{ nodes:nodes0, } = timeline;
                              let vec49 = nodes0;
                              let len49 = vec49.len() as i32;
                              let layout49 = alloc::Layout::from_size_align_unchecked(vec49.len() * 72, 8);
                              let result49 = if layout49.size() != 0
                              {
                                let ptr = alloc::alloc(layout49);
                                if ptr.is_null()
                                {
                                  alloc::handle_alloc_error(layout49);
                                }
                                ptr
                              }else {{
                                ::core::ptr::null_mut()
                              }};
                              for (i, e) in vec49.into_iter().enumerate() {
                                let base = result49 as i32 + (i as i32) * 72;
                                {
                                  match e {
                                    TimelineNode::TlLatestEventToState(e) => {
                                      *((base + 0) as *mut u8) = (0i32) as u8;
                                      let ServerWithEventColumnName{ server:server1, event_column_name:event_column_name1, } = e;
                                      match server1 {
                                        Some(e) => {
                                          *((base + 8) as *mut u8) = (1i32) as u8;
                                          let Server{ worker_id_prefix:worker_id_prefix2, template_id:template_id2, } = e;
                                          let vec3 = worker_id_prefix2;
                                          let ptr3 = vec3.as_ptr() as i32;
                                          let len3 = vec3.len() as i32;
                                          *((base + 16) as *mut i32) = len3;
                                          *((base + 12) as *mut i32) = ptr3;
                                          let vec4 = template_id2;
                                          let ptr4 = vec4.as_ptr() as i32;
                                          let len4 = vec4.len() as i32;
                                          *((base + 24) as *mut i32) = len4;
                                          *((base + 20) as *mut i32) = ptr4;
                                        },
                                        None => {
                                          {
                                            *((base + 8) as *mut u8) = (0i32) as u8;
                                          }
                                        },
                                      };let vec5 = event_column_name1;
                                      let ptr5 = vec5.as_ptr() as i32;
                                      let len5 = vec5.len() as i32;
                                      *((base + 32) as *mut i32) = len5;
                                      *((base + 28) as *mut i32) = ptr5;
                                    },
                                    TimelineNode::TlHasExisted(e) => {
                                      *((base + 0) as *mut u8) = (1i32) as u8;
                                      let ServerWithEventPredicate{ event_predicate:event_predicate6, server:server6, } = e;
                                      let super::super::super::timeline::event_processor::api::EventPredicate{ col_name:col_name7, value:value7, op:op7, } = event_predicate6;
                                      let vec8 = col_name7;
                                      let ptr8 = vec8.as_ptr() as i32;
                                      let len8 = vec8.len() as i32;
                                      *((base + 12) as *mut i32) = len8;
                                      *((base + 8) as *mut i32) = ptr8;
                                      use super::super::super::timeline::event_processor::api::EventValue as V10;
                                      match value7 {
                                        V10::StringValue(e) => {
                                          *((base + 16) as *mut u8) = (0i32) as u8;
                                          let vec9 = e;
                                          let ptr9 = vec9.as_ptr() as i32;
                                          let len9 = vec9.len() as i32;
                                          *((base + 28) as *mut i32) = len9;
                                          *((base + 24) as *mut i32) = ptr9;
                                        },
                                        V10::IntValue(e) => {
                                          *((base + 16) as *mut u8) = (1i32) as u8;
                                          *((base + 24) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                        },
                                        V10::FloatValue(e) => {
                                          *((base + 16) as *mut u8) = (2i32) as u8;
                                          *((base + 24) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                        },
                                        V10::BoolValue(e) => {
                                          *((base + 16) as *mut u8) = (3i32) as u8;
                                          *((base + 24) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                        },
                                      }
                                      *((base + 32) as *mut u8) = (op7.clone() as i32) as u8;
                                      match server6 {
                                        Some(e) => {
                                          *((base + 40) as *mut u8) = (1i32) as u8;
                                          let Server{ worker_id_prefix:worker_id_prefix11, template_id:template_id11, } = e;
                                          let vec12 = worker_id_prefix11;
                                          let ptr12 = vec12.as_ptr() as i32;
                                          let len12 = vec12.len() as i32;
                                          *((base + 48) as *mut i32) = len12;
                                          *((base + 44) as *mut i32) = ptr12;
                                          let vec13 = template_id11;
                                          let ptr13 = vec13.as_ptr() as i32;
                                          let len13 = vec13.len() as i32;
                                          *((base + 56) as *mut i32) = len13;
                                          *((base + 52) as *mut i32) = ptr13;
                                        },
                                        None => {
                                          {
                                            *((base + 40) as *mut u8) = (0i32) as u8;
                                          }
                                        },
                                      };},
                                      TimelineNode::TlHasExistedWithin(e) => {
                                        *((base + 0) as *mut u8) = (2i32) as u8;
                                        let ServerWithEventPredicateWithin{ filtered:filtered14, time:time14, } = e;
                                        let ServerWithEventPredicate{ event_predicate:event_predicate15, server:server15, } = filtered14;
                                        let super::super::super::timeline::event_processor::api::EventPredicate{ col_name:col_name16, value:value16, op:op16, } = event_predicate15;
                                        let vec17 = col_name16;
                                        let ptr17 = vec17.as_ptr() as i32;
                                        let len17 = vec17.len() as i32;
                                        *((base + 12) as *mut i32) = len17;
                                        *((base + 8) as *mut i32) = ptr17;
                                        use super::super::super::timeline::event_processor::api::EventValue as V19;
                                        match value16 {
                                          V19::StringValue(e) => {
                                            *((base + 16) as *mut u8) = (0i32) as u8;
                                            let vec18 = e;
                                            let ptr18 = vec18.as_ptr() as i32;
                                            let len18 = vec18.len() as i32;
                                            *((base + 28) as *mut i32) = len18;
                                            *((base + 24) as *mut i32) = ptr18;
                                          },
                                          V19::IntValue(e) => {
                                            *((base + 16) as *mut u8) = (1i32) as u8;
                                            *((base + 24) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                          },
                                          V19::FloatValue(e) => {
                                            *((base + 16) as *mut u8) = (2i32) as u8;
                                            *((base + 24) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                          },
                                          V19::BoolValue(e) => {
                                            *((base + 16) as *mut u8) = (3i32) as u8;
                                            *((base + 24) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                          },
                                        }
                                        *((base + 32) as *mut u8) = (op16.clone() as i32) as u8;
                                        match server15 {
                                          Some(e) => {
                                            *((base + 40) as *mut u8) = (1i32) as u8;
                                            let Server{ worker_id_prefix:worker_id_prefix20, template_id:template_id20, } = e;
                                            let vec21 = worker_id_prefix20;
                                            let ptr21 = vec21.as_ptr() as i32;
                                            let len21 = vec21.len() as i32;
                                            *((base + 48) as *mut i32) = len21;
                                            *((base + 44) as *mut i32) = ptr21;
                                            let vec22 = template_id20;
                                            let ptr22 = vec22.as_ptr() as i32;
                                            let len22 = vec22.len() as i32;
                                            *((base + 56) as *mut i32) = len22;
                                            *((base + 52) as *mut i32) = ptr22;
                                          },
                                          None => {
                                            {
                                              *((base + 40) as *mut u8) = (0i32) as u8;
                                            }
                                          },
                                        };*((base + 64) as *mut i64) = wit_bindgen::rt::as_i64(time14);
                                      },
                                      TimelineNode::TimelineComparison(e) => {
                                        *((base + 0) as *mut u8) = (3i32) as u8;
                                        let TimelineConstantCompared{ op:op23, timeline:timeline23, value:value23, server:server23, } = e;
                                        *((base + 8) as *mut u8) = (op23.clone() as i32) as u8;
                                        *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(timeline23);
                                        use super::super::super::timeline::event_processor::api::EventValue as V25;
                                        match value23 {
                                          V25::StringValue(e) => {
                                            *((base + 16) as *mut u8) = (0i32) as u8;
                                            let vec24 = e;
                                            let ptr24 = vec24.as_ptr() as i32;
                                            let len24 = vec24.len() as i32;
                                            *((base + 28) as *mut i32) = len24;
                                            *((base + 24) as *mut i32) = ptr24;
                                          },
                                          V25::IntValue(e) => {
                                            *((base + 16) as *mut u8) = (1i32) as u8;
                                            *((base + 24) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                          },
                                          V25::FloatValue(e) => {
                                            *((base + 16) as *mut u8) = (2i32) as u8;
                                            *((base + 24) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                          },
                                          V25::BoolValue(e) => {
                                            *((base + 16) as *mut u8) = (3i32) as u8;
                                            *((base + 24) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                          },
                                        }
                                        match server23 {
                                          Some(e) => {
                                            *((base + 32) as *mut u8) = (1i32) as u8;
                                            let Server{ worker_id_prefix:worker_id_prefix26, template_id:template_id26, } = e;
                                            let vec27 = worker_id_prefix26;
                                            let ptr27 = vec27.as_ptr() as i32;
                                            let len27 = vec27.len() as i32;
                                            *((base + 40) as *mut i32) = len27;
                                            *((base + 36) as *mut i32) = ptr27;
                                            let vec28 = template_id26;
                                            let ptr28 = vec28.as_ptr() as i32;
                                            let len28 = vec28.len() as i32;
                                            *((base + 48) as *mut i32) = len28;
                                            *((base + 44) as *mut i32) = ptr28;
                                          },
                                          None => {
                                            {
                                              *((base + 32) as *mut u8) = (0i32) as u8;
                                            }
                                          },
                                        };},
                                        TimelineNode::TimelineNegation(e) => {
                                          *((base + 0) as *mut u8) = (4i32) as u8;
                                          let TimelineNegated{ timeline:timeline29, server:server29, } = e;
                                          *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(timeline29);
                                          match server29 {
                                            Some(e) => {
                                              *((base + 12) as *mut u8) = (1i32) as u8;
                                              let Server{ worker_id_prefix:worker_id_prefix30, template_id:template_id30, } = e;
                                              let vec31 = worker_id_prefix30;
                                              let ptr31 = vec31.as_ptr() as i32;
                                              let len31 = vec31.len() as i32;
                                              *((base + 20) as *mut i32) = len31;
                                              *((base + 16) as *mut i32) = ptr31;
                                              let vec32 = template_id30;
                                              let ptr32 = vec32.as_ptr() as i32;
                                              let len32 = vec32.len() as i32;
                                              *((base + 28) as *mut i32) = len32;
                                              *((base + 24) as *mut i32) = ptr32;
                                            },
                                            None => {
                                              {
                                                *((base + 12) as *mut u8) = (0i32) as u8;
                                              }
                                            },
                                          };},
                                          TimelineNode::TlDurationWhere(e) => {
                                            *((base + 0) as *mut u8) = (5i32) as u8;
                                            let TimelineWithServer{ server:server33, timeline:timeline33, } = e;
                                            match server33 {
                                              Some(e) => {
                                                *((base + 8) as *mut u8) = (1i32) as u8;
                                                let Server{ worker_id_prefix:worker_id_prefix34, template_id:template_id34, } = e;
                                                let vec35 = worker_id_prefix34;
                                                let ptr35 = vec35.as_ptr() as i32;
                                                let len35 = vec35.len() as i32;
                                                *((base + 16) as *mut i32) = len35;
                                                *((base + 12) as *mut i32) = ptr35;
                                                let vec36 = template_id34;
                                                let ptr36 = vec36.as_ptr() as i32;
                                                let len36 = vec36.len() as i32;
                                                *((base + 24) as *mut i32) = len36;
                                                *((base + 20) as *mut i32) = ptr36;
                                              },
                                              None => {
                                                {
                                                  *((base + 8) as *mut u8) = (0i32) as u8;
                                                }
                                              },
                                            };*((base + 28) as *mut i32) = wit_bindgen::rt::as_i32(timeline33);
                                          },
                                          TimelineNode::TlDurationInCurState(e) => {
                                            *((base + 0) as *mut u8) = (6i32) as u8;
                                            let TimelineWithServer{ server:server37, timeline:timeline37, } = e;
                                            match server37 {
                                              Some(e) => {
                                                *((base + 8) as *mut u8) = (1i32) as u8;
                                                let Server{ worker_id_prefix:worker_id_prefix38, template_id:template_id38, } = e;
                                                let vec39 = worker_id_prefix38;
                                                let ptr39 = vec39.as_ptr() as i32;
                                                let len39 = vec39.len() as i32;
                                                *((base + 16) as *mut i32) = len39;
                                                *((base + 12) as *mut i32) = ptr39;
                                                let vec40 = template_id38;
                                                let ptr40 = vec40.as_ptr() as i32;
                                                let len40 = vec40.len() as i32;
                                                *((base + 24) as *mut i32) = len40;
                                                *((base + 20) as *mut i32) = ptr40;
                                              },
                                              None => {
                                                {
                                                  *((base + 8) as *mut u8) = (0i32) as u8;
                                                }
                                              },
                                            };*((base + 28) as *mut i32) = wit_bindgen::rt::as_i32(timeline37);
                                          },
                                          TimelineNode::TlAnd(e) => {
                                            *((base + 0) as *mut u8) = (7i32) as u8;
                                            let BiTimelineWithServer{ server:server41, left:left41, right:right41, } = e;
                                            match server41 {
                                              Some(e) => {
                                                *((base + 8) as *mut u8) = (1i32) as u8;
                                                let Server{ worker_id_prefix:worker_id_prefix42, template_id:template_id42, } = e;
                                                let vec43 = worker_id_prefix42;
                                                let ptr43 = vec43.as_ptr() as i32;
                                                let len43 = vec43.len() as i32;
                                                *((base + 16) as *mut i32) = len43;
                                                *((base + 12) as *mut i32) = ptr43;
                                                let vec44 = template_id42;
                                                let ptr44 = vec44.as_ptr() as i32;
                                                let len44 = vec44.len() as i32;
                                                *((base + 24) as *mut i32) = len44;
                                                *((base + 20) as *mut i32) = ptr44;
                                              },
                                              None => {
                                                {
                                                  *((base + 8) as *mut u8) = (0i32) as u8;
                                                }
                                              },
                                            };*((base + 28) as *mut i32) = wit_bindgen::rt::as_i32(left41);
                                            *((base + 32) as *mut i32) = wit_bindgen::rt::as_i32(right41);
                                          },
                                          TimelineNode::TlOr(e) => {
                                            *((base + 0) as *mut u8) = (8i32) as u8;
                                            let BiTimelineWithServer{ server:server45, left:left45, right:right45, } = e;
                                            match server45 {
                                              Some(e) => {
                                                *((base + 8) as *mut u8) = (1i32) as u8;
                                                let Server{ worker_id_prefix:worker_id_prefix46, template_id:template_id46, } = e;
                                                let vec47 = worker_id_prefix46;
                                                let ptr47 = vec47.as_ptr() as i32;
                                                let len47 = vec47.len() as i32;
                                                *((base + 16) as *mut i32) = len47;
                                                *((base + 12) as *mut i32) = ptr47;
                                                let vec48 = template_id46;
                                                let ptr48 = vec48.as_ptr() as i32;
                                                let len48 = vec48.len() as i32;
                                                *((base + 24) as *mut i32) = len48;
                                                *((base + 20) as *mut i32) = ptr48;
                                              },
                                              None => {
                                                {
                                                  *((base + 8) as *mut u8) = (0i32) as u8;
                                                }
                                              },
                                            };*((base + 28) as *mut i32) = wit_bindgen::rt::as_i32(left45);
                                            *((base + 32) as *mut i32) = wit_bindgen::rt::as_i32(right45);
                                          },
                                        }
                                      }
                                    }
                                    let ptr50 = ret_area.as_mut_ptr() as i32;
                                    #[cfg(target_arch = "wasm32")]
                                    #[link(wasm_import_module = "timeline:core/api")]
                                    extern "C" {
                                      #[link_name = "initialize-timeline"]
                                      fn wit_import(_: i32, _: i32, _: i32, );
                                    }
                                    
                                    #[cfg(not(target_arch = "wasm32"))]
                                    fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
                                    wit_import(result49 as i32, len49, ptr50);
                                    let l51 = i32::from(*((ptr50 + 0) as *const u8));
                                    if layout49.size() != 0 {
                                      alloc::dealloc(result49, layout49);
                                    }
                                    match l51 {
                                      0 => {
                                        let e = {
                                          let l52 = *((ptr50 + 4) as *const i32);
                                          let l53 = *((ptr50 + 8) as *const i32);
                                          let base126 = l52;
                                          let len126 = l53;
                                          let mut result126 = Vec::with_capacity(len126 as usize);
                                          for i in 0..len126 {
                                            let base = base126 + i * 24;
                                            let e126 = {
                                              let l54 = i32::from(*((base + 0) as *const u8));
                                              use super::super::super::timeline::timeline_processor::api::TypedTimelineResultWorker as V125;
                                              let v125 = match l54 {
                                                0 => {
                                                  let e125 = {
                                                    let l55 = i32::from(*((base + 4) as *const u8));
                                                    use super::super::super::timeline::timeline_processor::api::LeafTimelineNode as V74;
                                                    let v74 = match l55 {
                                                      0 => {
                                                        let e74 = {
                                                          let l56 = *((base + 8) as *const i32);
                                                          let l57 = *((base + 12) as *const i32);
                                                          let len58 = l57 as usize;
                                                          let bytes58 = Vec::from_raw_parts(l56 as *mut _, len58, len58);
                                                          let l59 = *((base + 16) as *const i32);
                                                          let l60 = *((base + 20) as *const i32);
                                                          let len61 = l60 as usize;
                                                          let bytes61 = Vec::from_raw_parts(l59 as *mut _, len61, len61);
                                                          
                                                          super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                            worker_id: wit_bindgen::rt::string_lift(bytes58),
                                                            template_id: wit_bindgen::rt::string_lift(bytes61),
                                                          }
                                                        };
                                                        V74::TlHasExisted(e74)
                                                      }
                                                      1 => {
                                                        let e74 = {
                                                          let l62 = *((base + 8) as *const i32);
                                                          let l63 = *((base + 12) as *const i32);
                                                          let len64 = l63 as usize;
                                                          let bytes64 = Vec::from_raw_parts(l62 as *mut _, len64, len64);
                                                          let l65 = *((base + 16) as *const i32);
                                                          let l66 = *((base + 20) as *const i32);
                                                          let len67 = l66 as usize;
                                                          let bytes67 = Vec::from_raw_parts(l65 as *mut _, len67, len67);
                                                          
                                                          super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                            worker_id: wit_bindgen::rt::string_lift(bytes64),
                                                            template_id: wit_bindgen::rt::string_lift(bytes67),
                                                          }
                                                        };
                                                        V74::TlHasExistedWithin(e74)
                                                      }
                                                      n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e74 = {
                                                          let l68 = *((base + 8) as *const i32);
                                                          let l69 = *((base + 12) as *const i32);
                                                          let len70 = l69 as usize;
                                                          let bytes70 = Vec::from_raw_parts(l68 as *mut _, len70, len70);
                                                          let l71 = *((base + 16) as *const i32);
                                                          let l72 = *((base + 20) as *const i32);
                                                          let len73 = l72 as usize;
                                                          let bytes73 = Vec::from_raw_parts(l71 as *mut _, len73, len73);
                                                          
                                                          super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                            worker_id: wit_bindgen::rt::string_lift(bytes70),
                                                            template_id: wit_bindgen::rt::string_lift(bytes73),
                                                          }
                                                        };
                                                        V74::TlLatestEventToState(e74)
                                                      }
                                                    };
                                                    
                                                    v74
                                                  };
                                                  V125::LeafTimeline(e125)
                                                }
                                                n => {
                                                  debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                  let e125 = {
                                                    let l75 = i32::from(*((base + 4) as *const u8));
                                                    use super::super::super::timeline::timeline_processor::api::DerivedTimelineNode as V124;
                                                    let v124 = match l75 {
                                                      0 => {
                                                        let e124 = {
                                                          let l76 = *((base + 8) as *const i32);
                                                          let l77 = *((base + 12) as *const i32);
                                                          let len78 = l77 as usize;
                                                          let bytes78 = Vec::from_raw_parts(l76 as *mut _, len78, len78);
                                                          let l79 = *((base + 16) as *const i32);
                                                          let l80 = *((base + 20) as *const i32);
                                                          let len81 = l80 as usize;
                                                          let bytes81 = Vec::from_raw_parts(l79 as *mut _, len81, len81);
                                                          
                                                          super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                            worker_id: wit_bindgen::rt::string_lift(bytes78),
                                                            template_id: wit_bindgen::rt::string_lift(bytes81),
                                                          }
                                                        };
                                                        V124::EqualTo(e124)
                                                      }
                                                      1 => {
                                                        let e124 = {
                                                          let l82 = *((base + 8) as *const i32);
                                                          let l83 = *((base + 12) as *const i32);
                                                          let len84 = l83 as usize;
                                                          let bytes84 = Vec::from_raw_parts(l82 as *mut _, len84, len84);
                                                          let l85 = *((base + 16) as *const i32);
                                                          let l86 = *((base + 20) as *const i32);
                                                          let len87 = l86 as usize;
                                                          let bytes87 = Vec::from_raw_parts(l85 as *mut _, len87, len87);
                                                          
                                                          super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                            worker_id: wit_bindgen::rt::string_lift(bytes84),
                                                            template_id: wit_bindgen::rt::string_lift(bytes87),
                                                          }
                                                        };
                                                        V124::GreaterThan(e124)
                                                      }
                                                      2 => {
                                                        let e124 = {
                                                          let l88 = *((base + 8) as *const i32);
                                                          let l89 = *((base + 12) as *const i32);
                                                          let len90 = l89 as usize;
                                                          let bytes90 = Vec::from_raw_parts(l88 as *mut _, len90, len90);
                                                          let l91 = *((base + 16) as *const i32);
                                                          let l92 = *((base + 20) as *const i32);
                                                          let len93 = l92 as usize;
                                                          let bytes93 = Vec::from_raw_parts(l91 as *mut _, len93, len93);
                                                          
                                                          super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                            worker_id: wit_bindgen::rt::string_lift(bytes90),
                                                            template_id: wit_bindgen::rt::string_lift(bytes93),
                                                          }
                                                        };
                                                        V124::GreaterThanOrEqualTo(e124)
                                                      }
                                                      3 => {
                                                        let e124 = {
                                                          let l94 = *((base + 8) as *const i32);
                                                          let l95 = *((base + 12) as *const i32);
                                                          let len96 = l95 as usize;
                                                          let bytes96 = Vec::from_raw_parts(l94 as *mut _, len96, len96);
                                                          let l97 = *((base + 16) as *const i32);
                                                          let l98 = *((base + 20) as *const i32);
                                                          let len99 = l98 as usize;
                                                          let bytes99 = Vec::from_raw_parts(l97 as *mut _, len99, len99);
                                                          
                                                          super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                            worker_id: wit_bindgen::rt::string_lift(bytes96),
                                                            template_id: wit_bindgen::rt::string_lift(bytes99),
                                                          }
                                                        };
                                                        V124::LessThan(e124)
                                                      }
                                                      4 => {
                                                        let e124 = {
                                                          let l100 = *((base + 8) as *const i32);
                                                          let l101 = *((base + 12) as *const i32);
                                                          let len102 = l101 as usize;
                                                          let bytes102 = Vec::from_raw_parts(l100 as *mut _, len102, len102);
                                                          let l103 = *((base + 16) as *const i32);
                                                          let l104 = *((base + 20) as *const i32);
                                                          let len105 = l104 as usize;
                                                          let bytes105 = Vec::from_raw_parts(l103 as *mut _, len105, len105);
                                                          
                                                          super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                            worker_id: wit_bindgen::rt::string_lift(bytes102),
                                                            template_id: wit_bindgen::rt::string_lift(bytes105),
                                                          }
                                                        };
                                                        V124::LessThanOrEqualTo(e124)
                                                      }
                                                      5 => {
                                                        let e124 = {
                                                          let l106 = *((base + 8) as *const i32);
                                                          let l107 = *((base + 12) as *const i32);
                                                          let len108 = l107 as usize;
                                                          let bytes108 = Vec::from_raw_parts(l106 as *mut _, len108, len108);
                                                          let l109 = *((base + 16) as *const i32);
                                                          let l110 = *((base + 20) as *const i32);
                                                          let len111 = l110 as usize;
                                                          let bytes111 = Vec::from_raw_parts(l109 as *mut _, len111, len111);
                                                          
                                                          super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                            worker_id: wit_bindgen::rt::string_lift(bytes108),
                                                            template_id: wit_bindgen::rt::string_lift(bytes111),
                                                          }
                                                        };
                                                        V124::And(e124)
                                                      }
                                                      6 => {
                                                        let e124 = {
                                                          let l112 = *((base + 8) as *const i32);
                                                          let l113 = *((base + 12) as *const i32);
                                                          let len114 = l113 as usize;
                                                          let bytes114 = Vec::from_raw_parts(l112 as *mut _, len114, len114);
                                                          let l115 = *((base + 16) as *const i32);
                                                          let l116 = *((base + 20) as *const i32);
                                                          let len117 = l116 as usize;
                                                          let bytes117 = Vec::from_raw_parts(l115 as *mut _, len117, len117);
                                                          
                                                          super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                            worker_id: wit_bindgen::rt::string_lift(bytes114),
                                                            template_id: wit_bindgen::rt::string_lift(bytes117),
                                                          }
                                                        };
                                                        V124::Or(e124)
                                                      }
                                                      n => {
                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                        let e124 = {
                                                          let l118 = *((base + 8) as *const i32);
                                                          let l119 = *((base + 12) as *const i32);
                                                          let len120 = l119 as usize;
                                                          let bytes120 = Vec::from_raw_parts(l118 as *mut _, len120, len120);
                                                          let l121 = *((base + 16) as *const i32);
                                                          let l122 = *((base + 20) as *const i32);
                                                          let len123 = l122 as usize;
                                                          let bytes123 = Vec::from_raw_parts(l121 as *mut _, len123, len123);
                                                          
                                                          super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                            worker_id: wit_bindgen::rt::string_lift(bytes120),
                                                            template_id: wit_bindgen::rt::string_lift(bytes123),
                                                          }
                                                        };
                                                        V124::Not(e124)
                                                      }
                                                    };
                                                    
                                                    v124
                                                  };
                                                  V125::DerivedTimeline(e125)
                                                }
                                              };
                                              
                                              v125
                                            };
                                            result126.push(e126);
                                          }
                                          wit_bindgen::rt::dealloc(base126, (len126 as usize) * 24, 4);
                                          let l127 = i32::from(*((ptr50 + 12) as *const u8));
                                          use super::super::super::timeline::timeline_processor::api::TypedTimelineResultWorker as V198;
                                          let v198 = match l127 {
                                            0 => {
                                              let e198 = {
                                                let l128 = i32::from(*((ptr50 + 16) as *const u8));
                                                use super::super::super::timeline::timeline_processor::api::LeafTimelineNode as V147;
                                                let v147 = match l128 {
                                                  0 => {
                                                    let e147 = {
                                                      let l129 = *((ptr50 + 20) as *const i32);
                                                      let l130 = *((ptr50 + 24) as *const i32);
                                                      let len131 = l130 as usize;
                                                      let bytes131 = Vec::from_raw_parts(l129 as *mut _, len131, len131);
                                                      let l132 = *((ptr50 + 28) as *const i32);
                                                      let l133 = *((ptr50 + 32) as *const i32);
                                                      let len134 = l133 as usize;
                                                      let bytes134 = Vec::from_raw_parts(l132 as *mut _, len134, len134);
                                                      
                                                      super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                        worker_id: wit_bindgen::rt::string_lift(bytes131),
                                                        template_id: wit_bindgen::rt::string_lift(bytes134),
                                                      }
                                                    };
                                                    V147::TlHasExisted(e147)
                                                  }
                                                  1 => {
                                                    let e147 = {
                                                      let l135 = *((ptr50 + 20) as *const i32);
                                                      let l136 = *((ptr50 + 24) as *const i32);
                                                      let len137 = l136 as usize;
                                                      let bytes137 = Vec::from_raw_parts(l135 as *mut _, len137, len137);
                                                      let l138 = *((ptr50 + 28) as *const i32);
                                                      let l139 = *((ptr50 + 32) as *const i32);
                                                      let len140 = l139 as usize;
                                                      let bytes140 = Vec::from_raw_parts(l138 as *mut _, len140, len140);
                                                      
                                                      super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                        worker_id: wit_bindgen::rt::string_lift(bytes137),
                                                        template_id: wit_bindgen::rt::string_lift(bytes140),
                                                      }
                                                    };
                                                    V147::TlHasExistedWithin(e147)
                                                  }
                                                  n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e147 = {
                                                      let l141 = *((ptr50 + 20) as *const i32);
                                                      let l142 = *((ptr50 + 24) as *const i32);
                                                      let len143 = l142 as usize;
                                                      let bytes143 = Vec::from_raw_parts(l141 as *mut _, len143, len143);
                                                      let l144 = *((ptr50 + 28) as *const i32);
                                                      let l145 = *((ptr50 + 32) as *const i32);
                                                      let len146 = l145 as usize;
                                                      let bytes146 = Vec::from_raw_parts(l144 as *mut _, len146, len146);
                                                      
                                                      super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                        worker_id: wit_bindgen::rt::string_lift(bytes143),
                                                        template_id: wit_bindgen::rt::string_lift(bytes146),
                                                      }
                                                    };
                                                    V147::TlLatestEventToState(e147)
                                                  }
                                                };
                                                
                                                v147
                                              };
                                              V198::LeafTimeline(e198)
                                            }
                                            n => {
                                              debug_assert_eq!(n, 1, "invalid enum discriminant");
                                              let e198 = {
                                                let l148 = i32::from(*((ptr50 + 16) as *const u8));
                                                use super::super::super::timeline::timeline_processor::api::DerivedTimelineNode as V197;
                                                let v197 = match l148 {
                                                  0 => {
                                                    let e197 = {
                                                      let l149 = *((ptr50 + 20) as *const i32);
                                                      let l150 = *((ptr50 + 24) as *const i32);
                                                      let len151 = l150 as usize;
                                                      let bytes151 = Vec::from_raw_parts(l149 as *mut _, len151, len151);
                                                      let l152 = *((ptr50 + 28) as *const i32);
                                                      let l153 = *((ptr50 + 32) as *const i32);
                                                      let len154 = l153 as usize;
                                                      let bytes154 = Vec::from_raw_parts(l152 as *mut _, len154, len154);
                                                      
                                                      super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                        worker_id: wit_bindgen::rt::string_lift(bytes151),
                                                        template_id: wit_bindgen::rt::string_lift(bytes154),
                                                      }
                                                    };
                                                    V197::EqualTo(e197)
                                                  }
                                                  1 => {
                                                    let e197 = {
                                                      let l155 = *((ptr50 + 20) as *const i32);
                                                      let l156 = *((ptr50 + 24) as *const i32);
                                                      let len157 = l156 as usize;
                                                      let bytes157 = Vec::from_raw_parts(l155 as *mut _, len157, len157);
                                                      let l158 = *((ptr50 + 28) as *const i32);
                                                      let l159 = *((ptr50 + 32) as *const i32);
                                                      let len160 = l159 as usize;
                                                      let bytes160 = Vec::from_raw_parts(l158 as *mut _, len160, len160);
                                                      
                                                      super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                        worker_id: wit_bindgen::rt::string_lift(bytes157),
                                                        template_id: wit_bindgen::rt::string_lift(bytes160),
                                                      }
                                                    };
                                                    V197::GreaterThan(e197)
                                                  }
                                                  2 => {
                                                    let e197 = {
                                                      let l161 = *((ptr50 + 20) as *const i32);
                                                      let l162 = *((ptr50 + 24) as *const i32);
                                                      let len163 = l162 as usize;
                                                      let bytes163 = Vec::from_raw_parts(l161 as *mut _, len163, len163);
                                                      let l164 = *((ptr50 + 28) as *const i32);
                                                      let l165 = *((ptr50 + 32) as *const i32);
                                                      let len166 = l165 as usize;
                                                      let bytes166 = Vec::from_raw_parts(l164 as *mut _, len166, len166);
                                                      
                                                      super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                        worker_id: wit_bindgen::rt::string_lift(bytes163),
                                                        template_id: wit_bindgen::rt::string_lift(bytes166),
                                                      }
                                                    };
                                                    V197::GreaterThanOrEqualTo(e197)
                                                  }
                                                  3 => {
                                                    let e197 = {
                                                      let l167 = *((ptr50 + 20) as *const i32);
                                                      let l168 = *((ptr50 + 24) as *const i32);
                                                      let len169 = l168 as usize;
                                                      let bytes169 = Vec::from_raw_parts(l167 as *mut _, len169, len169);
                                                      let l170 = *((ptr50 + 28) as *const i32);
                                                      let l171 = *((ptr50 + 32) as *const i32);
                                                      let len172 = l171 as usize;
                                                      let bytes172 = Vec::from_raw_parts(l170 as *mut _, len172, len172);
                                                      
                                                      super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                        worker_id: wit_bindgen::rt::string_lift(bytes169),
                                                        template_id: wit_bindgen::rt::string_lift(bytes172),
                                                      }
                                                    };
                                                    V197::LessThan(e197)
                                                  }
                                                  4 => {
                                                    let e197 = {
                                                      let l173 = *((ptr50 + 20) as *const i32);
                                                      let l174 = *((ptr50 + 24) as *const i32);
                                                      let len175 = l174 as usize;
                                                      let bytes175 = Vec::from_raw_parts(l173 as *mut _, len175, len175);
                                                      let l176 = *((ptr50 + 28) as *const i32);
                                                      let l177 = *((ptr50 + 32) as *const i32);
                                                      let len178 = l177 as usize;
                                                      let bytes178 = Vec::from_raw_parts(l176 as *mut _, len178, len178);
                                                      
                                                      super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                        worker_id: wit_bindgen::rt::string_lift(bytes175),
                                                        template_id: wit_bindgen::rt::string_lift(bytes178),
                                                      }
                                                    };
                                                    V197::LessThanOrEqualTo(e197)
                                                  }
                                                  5 => {
                                                    let e197 = {
                                                      let l179 = *((ptr50 + 20) as *const i32);
                                                      let l180 = *((ptr50 + 24) as *const i32);
                                                      let len181 = l180 as usize;
                                                      let bytes181 = Vec::from_raw_parts(l179 as *mut _, len181, len181);
                                                      let l182 = *((ptr50 + 28) as *const i32);
                                                      let l183 = *((ptr50 + 32) as *const i32);
                                                      let len184 = l183 as usize;
                                                      let bytes184 = Vec::from_raw_parts(l182 as *mut _, len184, len184);
                                                      
                                                      super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                        worker_id: wit_bindgen::rt::string_lift(bytes181),
                                                        template_id: wit_bindgen::rt::string_lift(bytes184),
                                                      }
                                                    };
                                                    V197::And(e197)
                                                  }
                                                  6 => {
                                                    let e197 = {
                                                      let l185 = *((ptr50 + 20) as *const i32);
                                                      let l186 = *((ptr50 + 24) as *const i32);
                                                      let len187 = l186 as usize;
                                                      let bytes187 = Vec::from_raw_parts(l185 as *mut _, len187, len187);
                                                      let l188 = *((ptr50 + 28) as *const i32);
                                                      let l189 = *((ptr50 + 32) as *const i32);
                                                      let len190 = l189 as usize;
                                                      let bytes190 = Vec::from_raw_parts(l188 as *mut _, len190, len190);
                                                      
                                                      super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                        worker_id: wit_bindgen::rt::string_lift(bytes187),
                                                        template_id: wit_bindgen::rt::string_lift(bytes190),
                                                      }
                                                    };
                                                    V197::Or(e197)
                                                  }
                                                  n => {
                                                    debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                    let e197 = {
                                                      let l191 = *((ptr50 + 20) as *const i32);
                                                      let l192 = *((ptr50 + 24) as *const i32);
                                                      let len193 = l192 as usize;
                                                      let bytes193 = Vec::from_raw_parts(l191 as *mut _, len193, len193);
                                                      let l194 = *((ptr50 + 28) as *const i32);
                                                      let l195 = *((ptr50 + 32) as *const i32);
                                                      let len196 = l195 as usize;
                                                      let bytes196 = Vec::from_raw_parts(l194 as *mut _, len196, len196);
                                                      
                                                      super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                        worker_id: wit_bindgen::rt::string_lift(bytes193),
                                                        template_id: wit_bindgen::rt::string_lift(bytes196),
                                                      }
                                                    };
                                                    V197::Not(e197)
                                                  }
                                                };
                                                
                                                v197
                                              };
                                              V198::DerivedTimeline(e198)
                                            }
                                          };
                                          
                                          WorkerDetails{
                                            event_processor_workers: result126,
                                            result_worker: v198,
                                          }
                                        };
                                        Ok(e)
                                      }
                                      1 => {
                                        let e = {
                                          let l199 = *((ptr50 + 4) as *const i32);
                                          let l200 = *((ptr50 + 8) as *const i32);
                                          let len201 = l200 as usize;
                                          let bytes201 = Vec::from_raw_parts(l199 as *mut _, len201, len201);
                                          
                                          wit_bindgen::rt::string_lift(bytes201)
                                        };
                                        Err(e)
                                      }
                                      _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                    }
                                  }
                                }
                                
                              }
                              
                            }
                            pub mod core_stub {
                              
                              #[allow(clippy::all)]
                              pub mod stub_core {
                                #[used]
                                #[doc(hidden)]
                                #[cfg(target_arch = "wasm32")]
                                static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
                                pub type Uri = super::super::super::golem::rpc::types::Uri;
                                pub type TimelineOp = super::super::super::timeline::core::api::TimelineOp;
                                pub type WorkerDetails = super::super::super::timeline::core::api::WorkerDetails;
                                
                                #[derive(Debug)]
                                #[repr(transparent)]
                                pub struct Api{
                                  handle: wit_bindgen::rt::Resource<Api>,
                                }
                                
                                impl Api{
                                  #[doc(hidden)]
                                  pub unsafe fn from_handle(handle: u32) -> Self {
                                    Self {
                                      handle: wit_bindgen::rt::Resource::from_handle(handle),
                                    }
                                  }
                                  
                                  #[doc(hidden)]
                                  pub fn into_handle(self) -> u32 {
                                    wit_bindgen::rt::Resource::into_handle(self.handle)
                                  }
                                  
                                  #[doc(hidden)]
                                  pub fn handle(&self) -> u32 {
                                    wit_bindgen::rt::Resource::handle(&self.handle)
                                  }
                                }
                                
                                
                                unsafe impl wit_bindgen::rt::WasmResource for Api{
                                  #[inline]
                                  unsafe fn drop(_handle: u32) {
                                    #[cfg(not(target_arch = "wasm32"))]
                                    unreachable!();
                                    
                                    #[cfg(target_arch = "wasm32")]
                                    {
                                      #[link(wasm_import_module = "timeline:core-stub/stub-core")]
                                      extern "C" {
                                        #[link_name = "[resource-drop]api"]
                                        fn drop(_: u32);
                                      }
                                      
                                      drop(_handle);
                                    }
                                  }
                                }
                                
                                impl Api {
                                  #[allow(unused_unsafe, clippy::all)]
                                  pub fn new(location: &Uri,) -> Self{
                                    
                                    #[allow(unused_imports)]
                                    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                    unsafe {
                                      let super::super::super::golem::rpc::types::Uri{ value:value0, } = location;
                                      let vec1 = value0;
                                      let ptr1 = vec1.as_ptr() as i32;
                                      let len1 = vec1.len() as i32;
                                      
                                      #[cfg(target_arch = "wasm32")]
                                      #[link(wasm_import_module = "timeline:core-stub/stub-core")]
                                      extern "C" {
                                        #[link_name = "[constructor]api"]
                                        fn wit_import(_: i32, _: i32, ) -> i32;
                                      }
                                      
                                      #[cfg(not(target_arch = "wasm32"))]
                                      fn wit_import(_: i32, _: i32, ) -> i32{ unreachable!() }
                                      let ret = wit_import(ptr1, len1);
                                      Api::from_handle(ret as u32)
                                    }
                                  }
                                }
                                impl Api {
                                  #[allow(unused_unsafe, clippy::all)]
                                  pub fn initialize_timeline(&self,timeline: &TimelineOp,) -> Result<WorkerDetails,wit_bindgen::rt::string::String>{
                                    
                                    #[allow(unused_imports)]
                                    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                    unsafe {
                                      
                                      #[repr(align(4))]
                                      struct RetArea([u8; 36]);
                                      let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                      let super::super::super::timeline::core::api::TimelineOp{ nodes:nodes0, } = timeline;
                                      let vec50 = nodes0;
                                      let len50 = vec50.len() as i32;
                                      let layout50 = alloc::Layout::from_size_align_unchecked(vec50.len() * 72, 8);
                                      let result50 = if layout50.size() != 0
                                      {
                                        let ptr = alloc::alloc(layout50);
                                        if ptr.is_null()
                                        {
                                          alloc::handle_alloc_error(layout50);
                                        }
                                        ptr
                                      }else {{
                                        ::core::ptr::null_mut()
                                      }};
                                      for (i, e) in vec50.into_iter().enumerate() {
                                        let base = result50 as i32 + (i as i32) * 72;
                                        {
                                          use super::super::super::timeline::core::api::TimelineNode as V49;
                                          match e {
                                            V49::TlLatestEventToState(e) => {
                                              *((base + 0) as *mut u8) = (0i32) as u8;
                                              let super::super::super::timeline::core::api::ServerWithEventColumnName{ server:server1, event_column_name:event_column_name1, } = e;
                                              match server1 {
                                                Some(e) => {
                                                  *((base + 8) as *mut u8) = (1i32) as u8;
                                                  let super::super::super::timeline::core::api::Server{ worker_id_prefix:worker_id_prefix2, template_id:template_id2, } = e;
                                                  let vec3 = worker_id_prefix2;
                                                  let ptr3 = vec3.as_ptr() as i32;
                                                  let len3 = vec3.len() as i32;
                                                  *((base + 16) as *mut i32) = len3;
                                                  *((base + 12) as *mut i32) = ptr3;
                                                  let vec4 = template_id2;
                                                  let ptr4 = vec4.as_ptr() as i32;
                                                  let len4 = vec4.len() as i32;
                                                  *((base + 24) as *mut i32) = len4;
                                                  *((base + 20) as *mut i32) = ptr4;
                                                },
                                                None => {
                                                  {
                                                    *((base + 8) as *mut u8) = (0i32) as u8;
                                                  }
                                                },
                                              };let vec5 = event_column_name1;
                                              let ptr5 = vec5.as_ptr() as i32;
                                              let len5 = vec5.len() as i32;
                                              *((base + 32) as *mut i32) = len5;
                                              *((base + 28) as *mut i32) = ptr5;
                                            },
                                            V49::TlHasExisted(e) => {
                                              *((base + 0) as *mut u8) = (1i32) as u8;
                                              let super::super::super::timeline::core::api::ServerWithEventPredicate{ event_predicate:event_predicate6, server:server6, } = e;
                                              let super::super::super::timeline::event_processor::api::EventPredicate{ col_name:col_name7, value:value7, op:op7, } = event_predicate6;
                                              let vec8 = col_name7;
                                              let ptr8 = vec8.as_ptr() as i32;
                                              let len8 = vec8.len() as i32;
                                              *((base + 12) as *mut i32) = len8;
                                              *((base + 8) as *mut i32) = ptr8;
                                              use super::super::super::timeline::event_processor::api::EventValue as V10;
                                              match value7 {
                                                V10::StringValue(e) => {
                                                  *((base + 16) as *mut u8) = (0i32) as u8;
                                                  let vec9 = e;
                                                  let ptr9 = vec9.as_ptr() as i32;
                                                  let len9 = vec9.len() as i32;
                                                  *((base + 28) as *mut i32) = len9;
                                                  *((base + 24) as *mut i32) = ptr9;
                                                },
                                                V10::IntValue(e) => {
                                                  *((base + 16) as *mut u8) = (1i32) as u8;
                                                  *((base + 24) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                                },
                                                V10::FloatValue(e) => {
                                                  *((base + 16) as *mut u8) = (2i32) as u8;
                                                  *((base + 24) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                                },
                                                V10::BoolValue(e) => {
                                                  *((base + 16) as *mut u8) = (3i32) as u8;
                                                  *((base + 24) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                                },
                                              }
                                              *((base + 32) as *mut u8) = (op7.clone() as i32) as u8;
                                              match server6 {
                                                Some(e) => {
                                                  *((base + 40) as *mut u8) = (1i32) as u8;
                                                  let super::super::super::timeline::core::api::Server{ worker_id_prefix:worker_id_prefix11, template_id:template_id11, } = e;
                                                  let vec12 = worker_id_prefix11;
                                                  let ptr12 = vec12.as_ptr() as i32;
                                                  let len12 = vec12.len() as i32;
                                                  *((base + 48) as *mut i32) = len12;
                                                  *((base + 44) as *mut i32) = ptr12;
                                                  let vec13 = template_id11;
                                                  let ptr13 = vec13.as_ptr() as i32;
                                                  let len13 = vec13.len() as i32;
                                                  *((base + 56) as *mut i32) = len13;
                                                  *((base + 52) as *mut i32) = ptr13;
                                                },
                                                None => {
                                                  {
                                                    *((base + 40) as *mut u8) = (0i32) as u8;
                                                  }
                                                },
                                              };},
                                              V49::TlHasExistedWithin(e) => {
                                                *((base + 0) as *mut u8) = (2i32) as u8;
                                                let super::super::super::timeline::core::api::ServerWithEventPredicateWithin{ filtered:filtered14, time:time14, } = e;
                                                let super::super::super::timeline::core::api::ServerWithEventPredicate{ event_predicate:event_predicate15, server:server15, } = filtered14;
                                                let super::super::super::timeline::event_processor::api::EventPredicate{ col_name:col_name16, value:value16, op:op16, } = event_predicate15;
                                                let vec17 = col_name16;
                                                let ptr17 = vec17.as_ptr() as i32;
                                                let len17 = vec17.len() as i32;
                                                *((base + 12) as *mut i32) = len17;
                                                *((base + 8) as *mut i32) = ptr17;
                                                use super::super::super::timeline::event_processor::api::EventValue as V19;
                                                match value16 {
                                                  V19::StringValue(e) => {
                                                    *((base + 16) as *mut u8) = (0i32) as u8;
                                                    let vec18 = e;
                                                    let ptr18 = vec18.as_ptr() as i32;
                                                    let len18 = vec18.len() as i32;
                                                    *((base + 28) as *mut i32) = len18;
                                                    *((base + 24) as *mut i32) = ptr18;
                                                  },
                                                  V19::IntValue(e) => {
                                                    *((base + 16) as *mut u8) = (1i32) as u8;
                                                    *((base + 24) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                                  },
                                                  V19::FloatValue(e) => {
                                                    *((base + 16) as *mut u8) = (2i32) as u8;
                                                    *((base + 24) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                                  },
                                                  V19::BoolValue(e) => {
                                                    *((base + 16) as *mut u8) = (3i32) as u8;
                                                    *((base + 24) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                                  },
                                                }
                                                *((base + 32) as *mut u8) = (op16.clone() as i32) as u8;
                                                match server15 {
                                                  Some(e) => {
                                                    *((base + 40) as *mut u8) = (1i32) as u8;
                                                    let super::super::super::timeline::core::api::Server{ worker_id_prefix:worker_id_prefix20, template_id:template_id20, } = e;
                                                    let vec21 = worker_id_prefix20;
                                                    let ptr21 = vec21.as_ptr() as i32;
                                                    let len21 = vec21.len() as i32;
                                                    *((base + 48) as *mut i32) = len21;
                                                    *((base + 44) as *mut i32) = ptr21;
                                                    let vec22 = template_id20;
                                                    let ptr22 = vec22.as_ptr() as i32;
                                                    let len22 = vec22.len() as i32;
                                                    *((base + 56) as *mut i32) = len22;
                                                    *((base + 52) as *mut i32) = ptr22;
                                                  },
                                                  None => {
                                                    {
                                                      *((base + 40) as *mut u8) = (0i32) as u8;
                                                    }
                                                  },
                                                };*((base + 64) as *mut i64) = wit_bindgen::rt::as_i64(time14);
                                              },
                                              V49::TimelineComparison(e) => {
                                                *((base + 0) as *mut u8) = (3i32) as u8;
                                                let super::super::super::timeline::core::api::TimelineConstantCompared{ op:op23, timeline:timeline23, value:value23, server:server23, } = e;
                                                *((base + 8) as *mut u8) = (op23.clone() as i32) as u8;
                                                *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(timeline23);
                                                use super::super::super::timeline::event_processor::api::EventValue as V25;
                                                match value23 {
                                                  V25::StringValue(e) => {
                                                    *((base + 16) as *mut u8) = (0i32) as u8;
                                                    let vec24 = e;
                                                    let ptr24 = vec24.as_ptr() as i32;
                                                    let len24 = vec24.len() as i32;
                                                    *((base + 28) as *mut i32) = len24;
                                                    *((base + 24) as *mut i32) = ptr24;
                                                  },
                                                  V25::IntValue(e) => {
                                                    *((base + 16) as *mut u8) = (1i32) as u8;
                                                    *((base + 24) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                                  },
                                                  V25::FloatValue(e) => {
                                                    *((base + 16) as *mut u8) = (2i32) as u8;
                                                    *((base + 24) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                                  },
                                                  V25::BoolValue(e) => {
                                                    *((base + 16) as *mut u8) = (3i32) as u8;
                                                    *((base + 24) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                                  },
                                                }
                                                match server23 {
                                                  Some(e) => {
                                                    *((base + 32) as *mut u8) = (1i32) as u8;
                                                    let super::super::super::timeline::core::api::Server{ worker_id_prefix:worker_id_prefix26, template_id:template_id26, } = e;
                                                    let vec27 = worker_id_prefix26;
                                                    let ptr27 = vec27.as_ptr() as i32;
                                                    let len27 = vec27.len() as i32;
                                                    *((base + 40) as *mut i32) = len27;
                                                    *((base + 36) as *mut i32) = ptr27;
                                                    let vec28 = template_id26;
                                                    let ptr28 = vec28.as_ptr() as i32;
                                                    let len28 = vec28.len() as i32;
                                                    *((base + 48) as *mut i32) = len28;
                                                    *((base + 44) as *mut i32) = ptr28;
                                                  },
                                                  None => {
                                                    {
                                                      *((base + 32) as *mut u8) = (0i32) as u8;
                                                    }
                                                  },
                                                };},
                                                V49::TimelineNegation(e) => {
                                                  *((base + 0) as *mut u8) = (4i32) as u8;
                                                  let super::super::super::timeline::core::api::TimelineNegated{ timeline:timeline29, server:server29, } = e;
                                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(timeline29);
                                                  match server29 {
                                                    Some(e) => {
                                                      *((base + 12) as *mut u8) = (1i32) as u8;
                                                      let super::super::super::timeline::core::api::Server{ worker_id_prefix:worker_id_prefix30, template_id:template_id30, } = e;
                                                      let vec31 = worker_id_prefix30;
                                                      let ptr31 = vec31.as_ptr() as i32;
                                                      let len31 = vec31.len() as i32;
                                                      *((base + 20) as *mut i32) = len31;
                                                      *((base + 16) as *mut i32) = ptr31;
                                                      let vec32 = template_id30;
                                                      let ptr32 = vec32.as_ptr() as i32;
                                                      let len32 = vec32.len() as i32;
                                                      *((base + 28) as *mut i32) = len32;
                                                      *((base + 24) as *mut i32) = ptr32;
                                                    },
                                                    None => {
                                                      {
                                                        *((base + 12) as *mut u8) = (0i32) as u8;
                                                      }
                                                    },
                                                  };},
                                                  V49::TlDurationWhere(e) => {
                                                    *((base + 0) as *mut u8) = (5i32) as u8;
                                                    let super::super::super::timeline::core::api::TimelineWithServer{ server:server33, timeline:timeline33, } = e;
                                                    match server33 {
                                                      Some(e) => {
                                                        *((base + 8) as *mut u8) = (1i32) as u8;
                                                        let super::super::super::timeline::core::api::Server{ worker_id_prefix:worker_id_prefix34, template_id:template_id34, } = e;
                                                        let vec35 = worker_id_prefix34;
                                                        let ptr35 = vec35.as_ptr() as i32;
                                                        let len35 = vec35.len() as i32;
                                                        *((base + 16) as *mut i32) = len35;
                                                        *((base + 12) as *mut i32) = ptr35;
                                                        let vec36 = template_id34;
                                                        let ptr36 = vec36.as_ptr() as i32;
                                                        let len36 = vec36.len() as i32;
                                                        *((base + 24) as *mut i32) = len36;
                                                        *((base + 20) as *mut i32) = ptr36;
                                                      },
                                                      None => {
                                                        {
                                                          *((base + 8) as *mut u8) = (0i32) as u8;
                                                        }
                                                      },
                                                    };*((base + 28) as *mut i32) = wit_bindgen::rt::as_i32(timeline33);
                                                  },
                                                  V49::TlDurationInCurState(e) => {
                                                    *((base + 0) as *mut u8) = (6i32) as u8;
                                                    let super::super::super::timeline::core::api::TimelineWithServer{ server:server37, timeline:timeline37, } = e;
                                                    match server37 {
                                                      Some(e) => {
                                                        *((base + 8) as *mut u8) = (1i32) as u8;
                                                        let super::super::super::timeline::core::api::Server{ worker_id_prefix:worker_id_prefix38, template_id:template_id38, } = e;
                                                        let vec39 = worker_id_prefix38;
                                                        let ptr39 = vec39.as_ptr() as i32;
                                                        let len39 = vec39.len() as i32;
                                                        *((base + 16) as *mut i32) = len39;
                                                        *((base + 12) as *mut i32) = ptr39;
                                                        let vec40 = template_id38;
                                                        let ptr40 = vec40.as_ptr() as i32;
                                                        let len40 = vec40.len() as i32;
                                                        *((base + 24) as *mut i32) = len40;
                                                        *((base + 20) as *mut i32) = ptr40;
                                                      },
                                                      None => {
                                                        {
                                                          *((base + 8) as *mut u8) = (0i32) as u8;
                                                        }
                                                      },
                                                    };*((base + 28) as *mut i32) = wit_bindgen::rt::as_i32(timeline37);
                                                  },
                                                  V49::TlAnd(e) => {
                                                    *((base + 0) as *mut u8) = (7i32) as u8;
                                                    let super::super::super::timeline::core::api::BiTimelineWithServer{ server:server41, left:left41, right:right41, } = e;
                                                    match server41 {
                                                      Some(e) => {
                                                        *((base + 8) as *mut u8) = (1i32) as u8;
                                                        let super::super::super::timeline::core::api::Server{ worker_id_prefix:worker_id_prefix42, template_id:template_id42, } = e;
                                                        let vec43 = worker_id_prefix42;
                                                        let ptr43 = vec43.as_ptr() as i32;
                                                        let len43 = vec43.len() as i32;
                                                        *((base + 16) as *mut i32) = len43;
                                                        *((base + 12) as *mut i32) = ptr43;
                                                        let vec44 = template_id42;
                                                        let ptr44 = vec44.as_ptr() as i32;
                                                        let len44 = vec44.len() as i32;
                                                        *((base + 24) as *mut i32) = len44;
                                                        *((base + 20) as *mut i32) = ptr44;
                                                      },
                                                      None => {
                                                        {
                                                          *((base + 8) as *mut u8) = (0i32) as u8;
                                                        }
                                                      },
                                                    };*((base + 28) as *mut i32) = wit_bindgen::rt::as_i32(left41);
                                                    *((base + 32) as *mut i32) = wit_bindgen::rt::as_i32(right41);
                                                  },
                                                  V49::TlOr(e) => {
                                                    *((base + 0) as *mut u8) = (8i32) as u8;
                                                    let super::super::super::timeline::core::api::BiTimelineWithServer{ server:server45, left:left45, right:right45, } = e;
                                                    match server45 {
                                                      Some(e) => {
                                                        *((base + 8) as *mut u8) = (1i32) as u8;
                                                        let super::super::super::timeline::core::api::Server{ worker_id_prefix:worker_id_prefix46, template_id:template_id46, } = e;
                                                        let vec47 = worker_id_prefix46;
                                                        let ptr47 = vec47.as_ptr() as i32;
                                                        let len47 = vec47.len() as i32;
                                                        *((base + 16) as *mut i32) = len47;
                                                        *((base + 12) as *mut i32) = ptr47;
                                                        let vec48 = template_id46;
                                                        let ptr48 = vec48.as_ptr() as i32;
                                                        let len48 = vec48.len() as i32;
                                                        *((base + 24) as *mut i32) = len48;
                                                        *((base + 20) as *mut i32) = ptr48;
                                                      },
                                                      None => {
                                                        {
                                                          *((base + 8) as *mut u8) = (0i32) as u8;
                                                        }
                                                      },
                                                    };*((base + 28) as *mut i32) = wit_bindgen::rt::as_i32(left45);
                                                    *((base + 32) as *mut i32) = wit_bindgen::rt::as_i32(right45);
                                                  },
                                                }
                                              }
                                            }
                                            let ptr51 = ret_area.as_mut_ptr() as i32;
                                            #[cfg(target_arch = "wasm32")]
                                            #[link(wasm_import_module = "timeline:core-stub/stub-core")]
                                            extern "C" {
                                              #[link_name = "[method]api.initialize-timeline"]
                                              fn wit_import(_: i32, _: i32, _: i32, _: i32, );
                                            }
                                            
                                            #[cfg(not(target_arch = "wasm32"))]
                                            fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                                            wit_import((self).handle() as i32, result50 as i32, len50, ptr51);
                                            let l52 = i32::from(*((ptr51 + 0) as *const u8));
                                            if layout50.size() != 0 {
                                              alloc::dealloc(result50, layout50);
                                            }
                                            match l52 {
                                              0 => {
                                                let e = {
                                                  let l53 = *((ptr51 + 4) as *const i32);
                                                  let l54 = *((ptr51 + 8) as *const i32);
                                                  let base127 = l53;
                                                  let len127 = l54;
                                                  let mut result127 = Vec::with_capacity(len127 as usize);
                                                  for i in 0..len127 {
                                                    let base = base127 + i * 24;
                                                    let e127 = {
                                                      let l55 = i32::from(*((base + 0) as *const u8));
                                                      use super::super::super::timeline::timeline_processor::api::TypedTimelineResultWorker as V126;
                                                      let v126 = match l55 {
                                                        0 => {
                                                          let e126 = {
                                                            let l56 = i32::from(*((base + 4) as *const u8));
                                                            use super::super::super::timeline::timeline_processor::api::LeafTimelineNode as V75;
                                                            let v75 = match l56 {
                                                              0 => {
                                                                let e75 = {
                                                                  let l57 = *((base + 8) as *const i32);
                                                                  let l58 = *((base + 12) as *const i32);
                                                                  let len59 = l58 as usize;
                                                                  let bytes59 = Vec::from_raw_parts(l57 as *mut _, len59, len59);
                                                                  let l60 = *((base + 16) as *const i32);
                                                                  let l61 = *((base + 20) as *const i32);
                                                                  let len62 = l61 as usize;
                                                                  let bytes62 = Vec::from_raw_parts(l60 as *mut _, len62, len62);
                                                                  
                                                                  super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                    worker_id: wit_bindgen::rt::string_lift(bytes59),
                                                                    template_id: wit_bindgen::rt::string_lift(bytes62),
                                                                  }
                                                                };
                                                                V75::TlHasExisted(e75)
                                                              }
                                                              1 => {
                                                                let e75 = {
                                                                  let l63 = *((base + 8) as *const i32);
                                                                  let l64 = *((base + 12) as *const i32);
                                                                  let len65 = l64 as usize;
                                                                  let bytes65 = Vec::from_raw_parts(l63 as *mut _, len65, len65);
                                                                  let l66 = *((base + 16) as *const i32);
                                                                  let l67 = *((base + 20) as *const i32);
                                                                  let len68 = l67 as usize;
                                                                  let bytes68 = Vec::from_raw_parts(l66 as *mut _, len68, len68);
                                                                  
                                                                  super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                    worker_id: wit_bindgen::rt::string_lift(bytes65),
                                                                    template_id: wit_bindgen::rt::string_lift(bytes68),
                                                                  }
                                                                };
                                                                V75::TlHasExistedWithin(e75)
                                                              }
                                                              n => {
                                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                let e75 = {
                                                                  let l69 = *((base + 8) as *const i32);
                                                                  let l70 = *((base + 12) as *const i32);
                                                                  let len71 = l70 as usize;
                                                                  let bytes71 = Vec::from_raw_parts(l69 as *mut _, len71, len71);
                                                                  let l72 = *((base + 16) as *const i32);
                                                                  let l73 = *((base + 20) as *const i32);
                                                                  let len74 = l73 as usize;
                                                                  let bytes74 = Vec::from_raw_parts(l72 as *mut _, len74, len74);
                                                                  
                                                                  super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                    worker_id: wit_bindgen::rt::string_lift(bytes71),
                                                                    template_id: wit_bindgen::rt::string_lift(bytes74),
                                                                  }
                                                                };
                                                                V75::TlLatestEventToState(e75)
                                                              }
                                                            };
                                                            
                                                            v75
                                                          };
                                                          V126::LeafTimeline(e126)
                                                        }
                                                        n => {
                                                          debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                          let e126 = {
                                                            let l76 = i32::from(*((base + 4) as *const u8));
                                                            use super::super::super::timeline::timeline_processor::api::DerivedTimelineNode as V125;
                                                            let v125 = match l76 {
                                                              0 => {
                                                                let e125 = {
                                                                  let l77 = *((base + 8) as *const i32);
                                                                  let l78 = *((base + 12) as *const i32);
                                                                  let len79 = l78 as usize;
                                                                  let bytes79 = Vec::from_raw_parts(l77 as *mut _, len79, len79);
                                                                  let l80 = *((base + 16) as *const i32);
                                                                  let l81 = *((base + 20) as *const i32);
                                                                  let len82 = l81 as usize;
                                                                  let bytes82 = Vec::from_raw_parts(l80 as *mut _, len82, len82);
                                                                  
                                                                  super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                    worker_id: wit_bindgen::rt::string_lift(bytes79),
                                                                    template_id: wit_bindgen::rt::string_lift(bytes82),
                                                                  }
                                                                };
                                                                V125::EqualTo(e125)
                                                              }
                                                              1 => {
                                                                let e125 = {
                                                                  let l83 = *((base + 8) as *const i32);
                                                                  let l84 = *((base + 12) as *const i32);
                                                                  let len85 = l84 as usize;
                                                                  let bytes85 = Vec::from_raw_parts(l83 as *mut _, len85, len85);
                                                                  let l86 = *((base + 16) as *const i32);
                                                                  let l87 = *((base + 20) as *const i32);
                                                                  let len88 = l87 as usize;
                                                                  let bytes88 = Vec::from_raw_parts(l86 as *mut _, len88, len88);
                                                                  
                                                                  super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                    worker_id: wit_bindgen::rt::string_lift(bytes85),
                                                                    template_id: wit_bindgen::rt::string_lift(bytes88),
                                                                  }
                                                                };
                                                                V125::GreaterThan(e125)
                                                              }
                                                              2 => {
                                                                let e125 = {
                                                                  let l89 = *((base + 8) as *const i32);
                                                                  let l90 = *((base + 12) as *const i32);
                                                                  let len91 = l90 as usize;
                                                                  let bytes91 = Vec::from_raw_parts(l89 as *mut _, len91, len91);
                                                                  let l92 = *((base + 16) as *const i32);
                                                                  let l93 = *((base + 20) as *const i32);
                                                                  let len94 = l93 as usize;
                                                                  let bytes94 = Vec::from_raw_parts(l92 as *mut _, len94, len94);
                                                                  
                                                                  super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                    worker_id: wit_bindgen::rt::string_lift(bytes91),
                                                                    template_id: wit_bindgen::rt::string_lift(bytes94),
                                                                  }
                                                                };
                                                                V125::GreaterThanOrEqualTo(e125)
                                                              }
                                                              3 => {
                                                                let e125 = {
                                                                  let l95 = *((base + 8) as *const i32);
                                                                  let l96 = *((base + 12) as *const i32);
                                                                  let len97 = l96 as usize;
                                                                  let bytes97 = Vec::from_raw_parts(l95 as *mut _, len97, len97);
                                                                  let l98 = *((base + 16) as *const i32);
                                                                  let l99 = *((base + 20) as *const i32);
                                                                  let len100 = l99 as usize;
                                                                  let bytes100 = Vec::from_raw_parts(l98 as *mut _, len100, len100);
                                                                  
                                                                  super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                    worker_id: wit_bindgen::rt::string_lift(bytes97),
                                                                    template_id: wit_bindgen::rt::string_lift(bytes100),
                                                                  }
                                                                };
                                                                V125::LessThan(e125)
                                                              }
                                                              4 => {
                                                                let e125 = {
                                                                  let l101 = *((base + 8) as *const i32);
                                                                  let l102 = *((base + 12) as *const i32);
                                                                  let len103 = l102 as usize;
                                                                  let bytes103 = Vec::from_raw_parts(l101 as *mut _, len103, len103);
                                                                  let l104 = *((base + 16) as *const i32);
                                                                  let l105 = *((base + 20) as *const i32);
                                                                  let len106 = l105 as usize;
                                                                  let bytes106 = Vec::from_raw_parts(l104 as *mut _, len106, len106);
                                                                  
                                                                  super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                    worker_id: wit_bindgen::rt::string_lift(bytes103),
                                                                    template_id: wit_bindgen::rt::string_lift(bytes106),
                                                                  }
                                                                };
                                                                V125::LessThanOrEqualTo(e125)
                                                              }
                                                              5 => {
                                                                let e125 = {
                                                                  let l107 = *((base + 8) as *const i32);
                                                                  let l108 = *((base + 12) as *const i32);
                                                                  let len109 = l108 as usize;
                                                                  let bytes109 = Vec::from_raw_parts(l107 as *mut _, len109, len109);
                                                                  let l110 = *((base + 16) as *const i32);
                                                                  let l111 = *((base + 20) as *const i32);
                                                                  let len112 = l111 as usize;
                                                                  let bytes112 = Vec::from_raw_parts(l110 as *mut _, len112, len112);
                                                                  
                                                                  super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                    worker_id: wit_bindgen::rt::string_lift(bytes109),
                                                                    template_id: wit_bindgen::rt::string_lift(bytes112),
                                                                  }
                                                                };
                                                                V125::And(e125)
                                                              }
                                                              6 => {
                                                                let e125 = {
                                                                  let l113 = *((base + 8) as *const i32);
                                                                  let l114 = *((base + 12) as *const i32);
                                                                  let len115 = l114 as usize;
                                                                  let bytes115 = Vec::from_raw_parts(l113 as *mut _, len115, len115);
                                                                  let l116 = *((base + 16) as *const i32);
                                                                  let l117 = *((base + 20) as *const i32);
                                                                  let len118 = l117 as usize;
                                                                  let bytes118 = Vec::from_raw_parts(l116 as *mut _, len118, len118);
                                                                  
                                                                  super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                    worker_id: wit_bindgen::rt::string_lift(bytes115),
                                                                    template_id: wit_bindgen::rt::string_lift(bytes118),
                                                                  }
                                                                };
                                                                V125::Or(e125)
                                                              }
                                                              n => {
                                                                debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                let e125 = {
                                                                  let l119 = *((base + 8) as *const i32);
                                                                  let l120 = *((base + 12) as *const i32);
                                                                  let len121 = l120 as usize;
                                                                  let bytes121 = Vec::from_raw_parts(l119 as *mut _, len121, len121);
                                                                  let l122 = *((base + 16) as *const i32);
                                                                  let l123 = *((base + 20) as *const i32);
                                                                  let len124 = l123 as usize;
                                                                  let bytes124 = Vec::from_raw_parts(l122 as *mut _, len124, len124);
                                                                  
                                                                  super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                    worker_id: wit_bindgen::rt::string_lift(bytes121),
                                                                    template_id: wit_bindgen::rt::string_lift(bytes124),
                                                                  }
                                                                };
                                                                V125::Not(e125)
                                                              }
                                                            };
                                                            
                                                            v125
                                                          };
                                                          V126::DerivedTimeline(e126)
                                                        }
                                                      };
                                                      
                                                      v126
                                                    };
                                                    result127.push(e127);
                                                  }
                                                  wit_bindgen::rt::dealloc(base127, (len127 as usize) * 24, 4);
                                                  let l128 = i32::from(*((ptr51 + 12) as *const u8));
                                                  use super::super::super::timeline::timeline_processor::api::TypedTimelineResultWorker as V199;
                                                  let v199 = match l128 {
                                                    0 => {
                                                      let e199 = {
                                                        let l129 = i32::from(*((ptr51 + 16) as *const u8));
                                                        use super::super::super::timeline::timeline_processor::api::LeafTimelineNode as V148;
                                                        let v148 = match l129 {
                                                          0 => {
                                                            let e148 = {
                                                              let l130 = *((ptr51 + 20) as *const i32);
                                                              let l131 = *((ptr51 + 24) as *const i32);
                                                              let len132 = l131 as usize;
                                                              let bytes132 = Vec::from_raw_parts(l130 as *mut _, len132, len132);
                                                              let l133 = *((ptr51 + 28) as *const i32);
                                                              let l134 = *((ptr51 + 32) as *const i32);
                                                              let len135 = l134 as usize;
                                                              let bytes135 = Vec::from_raw_parts(l133 as *mut _, len135, len135);
                                                              
                                                              super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                worker_id: wit_bindgen::rt::string_lift(bytes132),
                                                                template_id: wit_bindgen::rt::string_lift(bytes135),
                                                              }
                                                            };
                                                            V148::TlHasExisted(e148)
                                                          }
                                                          1 => {
                                                            let e148 = {
                                                              let l136 = *((ptr51 + 20) as *const i32);
                                                              let l137 = *((ptr51 + 24) as *const i32);
                                                              let len138 = l137 as usize;
                                                              let bytes138 = Vec::from_raw_parts(l136 as *mut _, len138, len138);
                                                              let l139 = *((ptr51 + 28) as *const i32);
                                                              let l140 = *((ptr51 + 32) as *const i32);
                                                              let len141 = l140 as usize;
                                                              let bytes141 = Vec::from_raw_parts(l139 as *mut _, len141, len141);
                                                              
                                                              super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                worker_id: wit_bindgen::rt::string_lift(bytes138),
                                                                template_id: wit_bindgen::rt::string_lift(bytes141),
                                                              }
                                                            };
                                                            V148::TlHasExistedWithin(e148)
                                                          }
                                                          n => {
                                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                            let e148 = {
                                                              let l142 = *((ptr51 + 20) as *const i32);
                                                              let l143 = *((ptr51 + 24) as *const i32);
                                                              let len144 = l143 as usize;
                                                              let bytes144 = Vec::from_raw_parts(l142 as *mut _, len144, len144);
                                                              let l145 = *((ptr51 + 28) as *const i32);
                                                              let l146 = *((ptr51 + 32) as *const i32);
                                                              let len147 = l146 as usize;
                                                              let bytes147 = Vec::from_raw_parts(l145 as *mut _, len147, len147);
                                                              
                                                              super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                worker_id: wit_bindgen::rt::string_lift(bytes144),
                                                                template_id: wit_bindgen::rt::string_lift(bytes147),
                                                              }
                                                            };
                                                            V148::TlLatestEventToState(e148)
                                                          }
                                                        };
                                                        
                                                        v148
                                                      };
                                                      V199::LeafTimeline(e199)
                                                    }
                                                    n => {
                                                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                      let e199 = {
                                                        let l149 = i32::from(*((ptr51 + 16) as *const u8));
                                                        use super::super::super::timeline::timeline_processor::api::DerivedTimelineNode as V198;
                                                        let v198 = match l149 {
                                                          0 => {
                                                            let e198 = {
                                                              let l150 = *((ptr51 + 20) as *const i32);
                                                              let l151 = *((ptr51 + 24) as *const i32);
                                                              let len152 = l151 as usize;
                                                              let bytes152 = Vec::from_raw_parts(l150 as *mut _, len152, len152);
                                                              let l153 = *((ptr51 + 28) as *const i32);
                                                              let l154 = *((ptr51 + 32) as *const i32);
                                                              let len155 = l154 as usize;
                                                              let bytes155 = Vec::from_raw_parts(l153 as *mut _, len155, len155);
                                                              
                                                              super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                worker_id: wit_bindgen::rt::string_lift(bytes152),
                                                                template_id: wit_bindgen::rt::string_lift(bytes155),
                                                              }
                                                            };
                                                            V198::EqualTo(e198)
                                                          }
                                                          1 => {
                                                            let e198 = {
                                                              let l156 = *((ptr51 + 20) as *const i32);
                                                              let l157 = *((ptr51 + 24) as *const i32);
                                                              let len158 = l157 as usize;
                                                              let bytes158 = Vec::from_raw_parts(l156 as *mut _, len158, len158);
                                                              let l159 = *((ptr51 + 28) as *const i32);
                                                              let l160 = *((ptr51 + 32) as *const i32);
                                                              let len161 = l160 as usize;
                                                              let bytes161 = Vec::from_raw_parts(l159 as *mut _, len161, len161);
                                                              
                                                              super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                worker_id: wit_bindgen::rt::string_lift(bytes158),
                                                                template_id: wit_bindgen::rt::string_lift(bytes161),
                                                              }
                                                            };
                                                            V198::GreaterThan(e198)
                                                          }
                                                          2 => {
                                                            let e198 = {
                                                              let l162 = *((ptr51 + 20) as *const i32);
                                                              let l163 = *((ptr51 + 24) as *const i32);
                                                              let len164 = l163 as usize;
                                                              let bytes164 = Vec::from_raw_parts(l162 as *mut _, len164, len164);
                                                              let l165 = *((ptr51 + 28) as *const i32);
                                                              let l166 = *((ptr51 + 32) as *const i32);
                                                              let len167 = l166 as usize;
                                                              let bytes167 = Vec::from_raw_parts(l165 as *mut _, len167, len167);
                                                              
                                                              super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                worker_id: wit_bindgen::rt::string_lift(bytes164),
                                                                template_id: wit_bindgen::rt::string_lift(bytes167),
                                                              }
                                                            };
                                                            V198::GreaterThanOrEqualTo(e198)
                                                          }
                                                          3 => {
                                                            let e198 = {
                                                              let l168 = *((ptr51 + 20) as *const i32);
                                                              let l169 = *((ptr51 + 24) as *const i32);
                                                              let len170 = l169 as usize;
                                                              let bytes170 = Vec::from_raw_parts(l168 as *mut _, len170, len170);
                                                              let l171 = *((ptr51 + 28) as *const i32);
                                                              let l172 = *((ptr51 + 32) as *const i32);
                                                              let len173 = l172 as usize;
                                                              let bytes173 = Vec::from_raw_parts(l171 as *mut _, len173, len173);
                                                              
                                                              super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                worker_id: wit_bindgen::rt::string_lift(bytes170),
                                                                template_id: wit_bindgen::rt::string_lift(bytes173),
                                                              }
                                                            };
                                                            V198::LessThan(e198)
                                                          }
                                                          4 => {
                                                            let e198 = {
                                                              let l174 = *((ptr51 + 20) as *const i32);
                                                              let l175 = *((ptr51 + 24) as *const i32);
                                                              let len176 = l175 as usize;
                                                              let bytes176 = Vec::from_raw_parts(l174 as *mut _, len176, len176);
                                                              let l177 = *((ptr51 + 28) as *const i32);
                                                              let l178 = *((ptr51 + 32) as *const i32);
                                                              let len179 = l178 as usize;
                                                              let bytes179 = Vec::from_raw_parts(l177 as *mut _, len179, len179);
                                                              
                                                              super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                worker_id: wit_bindgen::rt::string_lift(bytes176),
                                                                template_id: wit_bindgen::rt::string_lift(bytes179),
                                                              }
                                                            };
                                                            V198::LessThanOrEqualTo(e198)
                                                          }
                                                          5 => {
                                                            let e198 = {
                                                              let l180 = *((ptr51 + 20) as *const i32);
                                                              let l181 = *((ptr51 + 24) as *const i32);
                                                              let len182 = l181 as usize;
                                                              let bytes182 = Vec::from_raw_parts(l180 as *mut _, len182, len182);
                                                              let l183 = *((ptr51 + 28) as *const i32);
                                                              let l184 = *((ptr51 + 32) as *const i32);
                                                              let len185 = l184 as usize;
                                                              let bytes185 = Vec::from_raw_parts(l183 as *mut _, len185, len185);
                                                              
                                                              super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                worker_id: wit_bindgen::rt::string_lift(bytes182),
                                                                template_id: wit_bindgen::rt::string_lift(bytes185),
                                                              }
                                                            };
                                                            V198::And(e198)
                                                          }
                                                          6 => {
                                                            let e198 = {
                                                              let l186 = *((ptr51 + 20) as *const i32);
                                                              let l187 = *((ptr51 + 24) as *const i32);
                                                              let len188 = l187 as usize;
                                                              let bytes188 = Vec::from_raw_parts(l186 as *mut _, len188, len188);
                                                              let l189 = *((ptr51 + 28) as *const i32);
                                                              let l190 = *((ptr51 + 32) as *const i32);
                                                              let len191 = l190 as usize;
                                                              let bytes191 = Vec::from_raw_parts(l189 as *mut _, len191, len191);
                                                              
                                                              super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                worker_id: wit_bindgen::rt::string_lift(bytes188),
                                                                template_id: wit_bindgen::rt::string_lift(bytes191),
                                                              }
                                                            };
                                                            V198::Or(e198)
                                                          }
                                                          n => {
                                                            debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                            let e198 = {
                                                              let l192 = *((ptr51 + 20) as *const i32);
                                                              let l193 = *((ptr51 + 24) as *const i32);
                                                              let len194 = l193 as usize;
                                                              let bytes194 = Vec::from_raw_parts(l192 as *mut _, len194, len194);
                                                              let l195 = *((ptr51 + 28) as *const i32);
                                                              let l196 = *((ptr51 + 32) as *const i32);
                                                              let len197 = l196 as usize;
                                                              let bytes197 = Vec::from_raw_parts(l195 as *mut _, len197, len197);
                                                              
                                                              super::super::super::timeline::timeline_processor::api::TimelineResultWorker{
                                                                worker_id: wit_bindgen::rt::string_lift(bytes194),
                                                                template_id: wit_bindgen::rt::string_lift(bytes197),
                                                              }
                                                            };
                                                            V198::Not(e198)
                                                          }
                                                        };
                                                        
                                                        v198
                                                      };
                                                      V199::DerivedTimeline(e199)
                                                    }
                                                  };
                                                  
                                                  super::super::super::timeline::core::api::WorkerDetails{
                                                    event_processor_workers: result127,
                                                    result_worker: v199,
                                                  }
                                                };
                                                Ok(e)
                                              }
                                              1 => {
                                                let e = {
                                                  let l200 = *((ptr51 + 4) as *const i32);
                                                  let l201 = *((ptr51 + 8) as *const i32);
                                                  let len202 = l201 as usize;
                                                  let bytes202 = Vec::from_raw_parts(l200 as *mut _, len202, len202);
                                                  
                                                  wit_bindgen::rt::string_lift(bytes202)
                                                };
                                                Err(e)
                                              }
                                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                            }
                                          }
                                        }
                                      }
                                      
                                    }
                                    
                                  }
                                  pub mod event_processor {
                                    
                                    #[allow(clippy::all)]
                                    pub mod api {
                                      #[used]
                                      #[doc(hidden)]
                                      #[cfg(target_arch = "wasm32")]
                                      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
                                      #[derive(Clone)]
                                      pub enum EventValue{
                                        StringValue(wit_bindgen::rt::string::String),
                                        IntValue(i64),
                                        FloatValue(f64),
                                        BoolValue(bool),
                                      }
                                      impl ::core::fmt::Debug for EventValue {
                                        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                                          match self {
                                            EventValue::StringValue(e) => {
                                              f.debug_tuple("EventValue::StringValue").field(e).finish()
                                            }
                                            EventValue::IntValue(e) => {
                                              f.debug_tuple("EventValue::IntValue").field(e).finish()
                                            }
                                            EventValue::FloatValue(e) => {
                                              f.debug_tuple("EventValue::FloatValue").field(e).finish()
                                            }
                                            EventValue::BoolValue(e) => {
                                              f.debug_tuple("EventValue::BoolValue").field(e).finish()
                                            }
                                          }
                                        }
                                      }
                                      #[derive(Clone)]
                                      pub struct Event {
                                        pub time: u64,
                                        pub event: wit_bindgen::rt::vec::Vec::<(wit_bindgen::rt::string::String,EventValue,)>,
                                      }
                                      impl ::core::fmt::Debug for Event {
                                        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                                          f.debug_struct("Event").field("time", &self.time).field("event", &self.event).finish()
                                        }
                                      }
                                      #[repr(C)]
                                      #[derive(Clone, Copy)]
                                      pub struct TimePeriod {
                                        pub t1: u64,
                                        pub t2: Option<u64>,
                                      }
                                      impl ::core::fmt::Debug for TimePeriod {
                                        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                                          f.debug_struct("TimePeriod").field("t1", &self.t1).field("t2", &self.t2).finish()
                                        }
                                      }
                                      #[derive(Clone)]
                                      pub struct TimelineResultPoint {
                                        pub time_period: TimePeriod,
                                        pub value: EventValue,
                                      }
                                      impl ::core::fmt::Debug for TimelineResultPoint {
                                        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                                          f.debug_struct("TimelineResultPoint").field("time-period", &self.time_period).field("value", &self.value).finish()
                                        }
                                      }
                                      #[derive(Clone)]
                                      pub struct TimelineResult {
                                        pub results: wit_bindgen::rt::vec::Vec::<TimelineResultPoint>,
                                      }
                                      impl ::core::fmt::Debug for TimelineResult {
                                        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                                          f.debug_struct("TimelineResult").field("results", &self.results).finish()
                                        }
                                      }
                                      #[repr(u8)]
                                      #[derive(Clone, Copy, Eq, PartialEq)]
                                      pub enum EventPredicateOp {
                                        Equal,
                                        GreaterThan,
                                        LessThan,
                                      }
                                      impl ::core::fmt::Debug for EventPredicateOp {
                                        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                                          match self {
                                            EventPredicateOp::Equal => {
                                              f.debug_tuple("EventPredicateOp::Equal").finish()
                                            }
                                            EventPredicateOp::GreaterThan => {
                                              f.debug_tuple("EventPredicateOp::GreaterThan").finish()
                                            }
                                            EventPredicateOp::LessThan => {
                                              f.debug_tuple("EventPredicateOp::LessThan").finish()
                                            }
                                          }
                                        }
                                      }
                                      
                                      impl EventPredicateOp{
                                        pub(crate) unsafe fn _lift(val: u8) -> EventPredicateOp{
                                          if !cfg!(debug_assertions) {
                                            return ::core::mem::transmute(val);
                                          }
                                          
                                          match val {
                                            0 => EventPredicateOp::Equal,
                                            1 => EventPredicateOp::GreaterThan,
                                            2 => EventPredicateOp::LessThan,
                                            
                                            _ => panic!("invalid enum discriminant"),
                                          }
                                        }
                                      }
                                      
                                      #[derive(Clone)]
                                      pub struct EventPredicate {
                                        pub col_name: wit_bindgen::rt::string::String,
                                        pub value: EventValue,
                                        pub op: EventPredicateOp,
                                      }
                                      impl ::core::fmt::Debug for EventPredicate {
                                        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                                          f.debug_struct("EventPredicate").field("col-name", &self.col_name).field("value", &self.value).field("op", &self.op).finish()
                                        }
                                      }
                                      #[allow(unused_unsafe, clippy::all)]
                                      pub fn initialize_latest_event_state(event_col_name: &str,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        unsafe {
                                          
                                          #[repr(align(4))]
                                          struct RetArea([u8; 12]);
                                          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                          let vec0 = event_col_name;
                                          let ptr0 = vec0.as_ptr() as i32;
                                          let len0 = vec0.len() as i32;
                                          let ptr1 = ret_area.as_mut_ptr() as i32;
                                          #[cfg(target_arch = "wasm32")]
                                          #[link(wasm_import_module = "timeline:event-processor/api")]
                                          extern "C" {
                                            #[link_name = "initialize-latest-event-state"]
                                            fn wit_import(_: i32, _: i32, _: i32, );
                                          }
                                          
                                          #[cfg(not(target_arch = "wasm32"))]
                                          fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
                                          wit_import(ptr0, len0, ptr1);
                                          let l2 = i32::from(*((ptr1 + 0) as *const u8));
                                          match l2 {
                                            0 => {
                                              let e = {
                                                let l3 = *((ptr1 + 4) as *const i32);
                                                let l4 = *((ptr1 + 8) as *const i32);
                                                let len5 = l4 as usize;
                                                let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);
                                                
                                                wit_bindgen::rt::string_lift(bytes5)
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l6 = *((ptr1 + 4) as *const i32);
                                                let l7 = *((ptr1 + 8) as *const i32);
                                                let len8 = l7 as usize;
                                                let bytes8 = Vec::from_raw_parts(l6 as *mut _, len8, len8);
                                                
                                                wit_bindgen::rt::string_lift(bytes8)
                                              };
                                              Err(e)
                                            }
                                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                          }
                                        }
                                      }
                                      #[allow(unused_unsafe, clippy::all)]
                                      pub fn initialize_tl_has_existed(event_predicate: &EventPredicate,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        unsafe {
                                          
                                          #[repr(align(4))]
                                          struct RetArea([u8; 12]);
                                          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                          let EventPredicate{ col_name:col_name0, value:value0, op:op0, } = event_predicate;
                                          let vec1 = col_name0;
                                          let ptr1 = vec1.as_ptr() as i32;
                                          let len1 = vec1.len() as i32;
                                          let (result3_0,result3_1,result3_2,) = match value0 {
                                            EventValue::StringValue(e) => {
                                              let vec2 = e;
                                              let ptr2 = vec2.as_ptr() as i32;
                                              let len2 = vec2.len() as i32;
                                              
                                              (0i32, i64::from(ptr2), len2)
                                            },
                                            EventValue::IntValue(e) => (1i32, wit_bindgen::rt::as_i64(e), 0i32),
                                            EventValue::FloatValue(e) => (2i32, (wit_bindgen::rt::as_f64(e)).to_bits() as i64, 0i32),
                                            EventValue::BoolValue(e) => (3i32, i64::from(match e { true => 1, false => 0 }), 0i32),
                                          };
                                          let ptr4 = ret_area.as_mut_ptr() as i32;
                                          #[cfg(target_arch = "wasm32")]
                                          #[link(wasm_import_module = "timeline:event-processor/api")]
                                          extern "C" {
                                            #[link_name = "initialize-tl-has-existed"]
                                            fn wit_import(_: i32, _: i32, _: i32, _: i64, _: i32, _: i32, _: i32, );
                                          }
                                          
                                          #[cfg(not(target_arch = "wasm32"))]
                                          fn wit_import(_: i32, _: i32, _: i32, _: i64, _: i32, _: i32, _: i32, ){ unreachable!() }
                                          wit_import(ptr1, len1, result3_0, result3_1, result3_2, op0.clone() as i32, ptr4);
                                          let l5 = i32::from(*((ptr4 + 0) as *const u8));
                                          match l5 {
                                            0 => {
                                              let e = {
                                                let l6 = *((ptr4 + 4) as *const i32);
                                                let l7 = *((ptr4 + 8) as *const i32);
                                                let len8 = l7 as usize;
                                                let bytes8 = Vec::from_raw_parts(l6 as *mut _, len8, len8);
                                                
                                                wit_bindgen::rt::string_lift(bytes8)
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l9 = *((ptr4 + 4) as *const i32);
                                                let l10 = *((ptr4 + 8) as *const i32);
                                                let len11 = l10 as usize;
                                                let bytes11 = Vec::from_raw_parts(l9 as *mut _, len11, len11);
                                                
                                                wit_bindgen::rt::string_lift(bytes11)
                                              };
                                              Err(e)
                                            }
                                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                          }
                                        }
                                      }
                                      #[allow(unused_unsafe, clippy::all)]
                                      pub fn initialize_tl_has_existed_within(event_predicate: &EventPredicate,time: u64,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        unsafe {
                                          
                                          #[repr(align(4))]
                                          struct RetArea([u8; 12]);
                                          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                          let EventPredicate{ col_name:col_name0, value:value0, op:op0, } = event_predicate;
                                          let vec1 = col_name0;
                                          let ptr1 = vec1.as_ptr() as i32;
                                          let len1 = vec1.len() as i32;
                                          let (result3_0,result3_1,result3_2,) = match value0 {
                                            EventValue::StringValue(e) => {
                                              let vec2 = e;
                                              let ptr2 = vec2.as_ptr() as i32;
                                              let len2 = vec2.len() as i32;
                                              
                                              (0i32, i64::from(ptr2), len2)
                                            },
                                            EventValue::IntValue(e) => (1i32, wit_bindgen::rt::as_i64(e), 0i32),
                                            EventValue::FloatValue(e) => (2i32, (wit_bindgen::rt::as_f64(e)).to_bits() as i64, 0i32),
                                            EventValue::BoolValue(e) => (3i32, i64::from(match e { true => 1, false => 0 }), 0i32),
                                          };
                                          let ptr4 = ret_area.as_mut_ptr() as i32;
                                          #[cfg(target_arch = "wasm32")]
                                          #[link(wasm_import_module = "timeline:event-processor/api")]
                                          extern "C" {
                                            #[link_name = "initialize-tl-has-existed-within"]
                                            fn wit_import(_: i32, _: i32, _: i32, _: i64, _: i32, _: i32, _: i64, _: i32, );
                                          }
                                          
                                          #[cfg(not(target_arch = "wasm32"))]
                                          fn wit_import(_: i32, _: i32, _: i32, _: i64, _: i32, _: i32, _: i64, _: i32, ){ unreachable!() }
                                          wit_import(ptr1, len1, result3_0, result3_1, result3_2, op0.clone() as i32, wit_bindgen::rt::as_i64(time), ptr4);
                                          let l5 = i32::from(*((ptr4 + 0) as *const u8));
                                          match l5 {
                                            0 => {
                                              let e = {
                                                let l6 = *((ptr4 + 4) as *const i32);
                                                let l7 = *((ptr4 + 8) as *const i32);
                                                let len8 = l7 as usize;
                                                let bytes8 = Vec::from_raw_parts(l6 as *mut _, len8, len8);
                                                
                                                wit_bindgen::rt::string_lift(bytes8)
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l9 = *((ptr4 + 4) as *const i32);
                                                let l10 = *((ptr4 + 8) as *const i32);
                                                let len11 = l10 as usize;
                                                let bytes11 = Vec::from_raw_parts(l9 as *mut _, len11, len11);
                                                
                                                wit_bindgen::rt::string_lift(bytes11)
                                              };
                                              Err(e)
                                            }
                                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                          }
                                        }
                                      }
                                      #[allow(unused_unsafe, clippy::all)]
                                      pub fn add_event(event: &Event,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        unsafe {
                                          
                                          #[repr(align(4))]
                                          struct RetArea([u8; 12]);
                                          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                          let Event{ time:time0, event:event0, } = event;
                                          let vec4 = event0;
                                          let len4 = vec4.len() as i32;
                                          let layout4 = alloc::Layout::from_size_align_unchecked(vec4.len() * 24, 8);
                                          let result4 = if layout4.size() != 0
                                          {
                                            let ptr = alloc::alloc(layout4);
                                            if ptr.is_null()
                                            {
                                              alloc::handle_alloc_error(layout4);
                                            }
                                            ptr
                                          }else {{
                                            ::core::ptr::null_mut()
                                          }};
                                          for (i, e) in vec4.into_iter().enumerate() {
                                            let base = result4 as i32 + (i as i32) * 24;
                                            {
                                              let (t1_0, t1_1, ) = e;
                                              let vec2 = t1_0;
                                              let ptr2 = vec2.as_ptr() as i32;
                                              let len2 = vec2.len() as i32;
                                              *((base + 4) as *mut i32) = len2;
                                              *((base + 0) as *mut i32) = ptr2;
                                              match t1_1 {
                                                EventValue::StringValue(e) => {
                                                  *((base + 8) as *mut u8) = (0i32) as u8;
                                                  let vec3 = e;
                                                  let ptr3 = vec3.as_ptr() as i32;
                                                  let len3 = vec3.len() as i32;
                                                  *((base + 20) as *mut i32) = len3;
                                                  *((base + 16) as *mut i32) = ptr3;
                                                },
                                                EventValue::IntValue(e) => {
                                                  *((base + 8) as *mut u8) = (1i32) as u8;
                                                  *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                                },
                                                EventValue::FloatValue(e) => {
                                                  *((base + 8) as *mut u8) = (2i32) as u8;
                                                  *((base + 16) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                                },
                                                EventValue::BoolValue(e) => {
                                                  *((base + 8) as *mut u8) = (3i32) as u8;
                                                  *((base + 16) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                                },
                                              }
                                            }
                                          }
                                          let ptr5 = ret_area.as_mut_ptr() as i32;
                                          #[cfg(target_arch = "wasm32")]
                                          #[link(wasm_import_module = "timeline:event-processor/api")]
                                          extern "C" {
                                            #[link_name = "add-event"]
                                            fn wit_import(_: i64, _: i32, _: i32, _: i32, );
                                          }
                                          
                                          #[cfg(not(target_arch = "wasm32"))]
                                          fn wit_import(_: i64, _: i32, _: i32, _: i32, ){ unreachable!() }
                                          wit_import(wit_bindgen::rt::as_i64(time0), result4 as i32, len4, ptr5);
                                          let l6 = i32::from(*((ptr5 + 0) as *const u8));
                                          if layout4.size() != 0 {
                                            alloc::dealloc(result4, layout4);
                                          }
                                          match l6 {
                                            0 => {
                                              let e = {
                                                let l7 = *((ptr5 + 4) as *const i32);
                                                let l8 = *((ptr5 + 8) as *const i32);
                                                let len9 = l8 as usize;
                                                let bytes9 = Vec::from_raw_parts(l7 as *mut _, len9, len9);
                                                
                                                wit_bindgen::rt::string_lift(bytes9)
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l10 = *((ptr5 + 4) as *const i32);
                                                let l11 = *((ptr5 + 8) as *const i32);
                                                let len12 = l11 as usize;
                                                let bytes12 = Vec::from_raw_parts(l10 as *mut _, len12, len12);
                                                
                                                wit_bindgen::rt::string_lift(bytes12)
                                              };
                                              Err(e)
                                            }
                                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                          }
                                        }
                                      }
                                      #[allow(unused_unsafe, clippy::all)]
                                      pub fn latest_event_to_state(t1: u64,) -> Result<TimelineResult,wit_bindgen::rt::string::String>{
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        unsafe {
                                          
                                          #[repr(align(4))]
                                          struct RetArea([u8; 12]);
                                          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                          let ptr0 = ret_area.as_mut_ptr() as i32;
                                          #[cfg(target_arch = "wasm32")]
                                          #[link(wasm_import_module = "timeline:event-processor/api")]
                                          extern "C" {
                                            #[link_name = "latest-event-to-state"]
                                            fn wit_import(_: i64, _: i32, );
                                          }
                                          
                                          #[cfg(not(target_arch = "wasm32"))]
                                          fn wit_import(_: i64, _: i32, ){ unreachable!() }
                                          wit_import(wit_bindgen::rt::as_i64(t1), ptr0);
                                          let l1 = i32::from(*((ptr0 + 0) as *const u8));
                                          match l1 {
                                            0 => {
                                              let e = {
                                                let l2 = *((ptr0 + 4) as *const i32);
                                                let l3 = *((ptr0 + 8) as *const i32);
                                                let base15 = l2;
                                                let len15 = l3;
                                                let mut result15 = Vec::with_capacity(len15 as usize);
                                                for i in 0..len15 {
                                                  let base = base15 + i * 40;
                                                  let e15 = {
                                                    let l4 = *((base + 0) as *const i64);
                                                    let l5 = i32::from(*((base + 8) as *const u8));
                                                    let l7 = i32::from(*((base + 24) as *const u8));
                                                    let v14 = match l7 {
                                                      0 => {
                                                        let e14 = {
                                                          let l8 = *((base + 32) as *const i32);
                                                          let l9 = *((base + 36) as *const i32);
                                                          let len10 = l9 as usize;
                                                          let bytes10 = Vec::from_raw_parts(l8 as *mut _, len10, len10);
                                                          
                                                          wit_bindgen::rt::string_lift(bytes10)
                                                        };
                                                        EventValue::StringValue(e14)
                                                      }
                                                      1 => {
                                                        let e14 = {
                                                          let l11 = *((base + 32) as *const i64);
                                                          
                                                          l11
                                                        };
                                                        EventValue::IntValue(e14)
                                                      }
                                                      2 => {
                                                        let e14 = {
                                                          let l12 = *((base + 32) as *const f64);
                                                          
                                                          l12
                                                        };
                                                        EventValue::FloatValue(e14)
                                                      }
                                                      n => {
                                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                        let e14 = {
                                                          let l13 = i32::from(*((base + 32) as *const u8));
                                                          
                                                          wit_bindgen::rt::bool_lift(l13 as u8)
                                                        };
                                                        EventValue::BoolValue(e14)
                                                      }
                                                    };
                                                    
                                                    TimelineResultPoint{
                                                      time_period: TimePeriod{
                                                        t1: l4 as u64,
                                                        t2: match l5 {
                                                          0 => None,
                                                          1 => {
                                                            let e = {
                                                              let l6 = *((base + 16) as *const i64);
                                                              
                                                              l6 as u64
                                                            };
                                                            Some(e)
                                                          }
                                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                                        },
                                                      },
                                                      value: v14,
                                                    }
                                                  };
                                                  result15.push(e15);
                                                }
                                                wit_bindgen::rt::dealloc(base15, (len15 as usize) * 40, 8);
                                                
                                                TimelineResult{
                                                  results: result15,
                                                }
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l16 = *((ptr0 + 4) as *const i32);
                                                let l17 = *((ptr0 + 8) as *const i32);
                                                let len18 = l17 as usize;
                                                let bytes18 = Vec::from_raw_parts(l16 as *mut _, len18, len18);
                                                
                                                wit_bindgen::rt::string_lift(bytes18)
                                              };
                                              Err(e)
                                            }
                                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                          }
                                        }
                                      }
                                      #[allow(unused_unsafe, clippy::all)]
                                      pub fn tl_has_existed(t1: u64,) -> Result<TimelineResult,wit_bindgen::rt::string::String>{
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        unsafe {
                                          
                                          #[repr(align(4))]
                                          struct RetArea([u8; 12]);
                                          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                          let ptr0 = ret_area.as_mut_ptr() as i32;
                                          #[cfg(target_arch = "wasm32")]
                                          #[link(wasm_import_module = "timeline:event-processor/api")]
                                          extern "C" {
                                            #[link_name = "tl-has-existed"]
                                            fn wit_import(_: i64, _: i32, );
                                          }
                                          
                                          #[cfg(not(target_arch = "wasm32"))]
                                          fn wit_import(_: i64, _: i32, ){ unreachable!() }
                                          wit_import(wit_bindgen::rt::as_i64(t1), ptr0);
                                          let l1 = i32::from(*((ptr0 + 0) as *const u8));
                                          match l1 {
                                            0 => {
                                              let e = {
                                                let l2 = *((ptr0 + 4) as *const i32);
                                                let l3 = *((ptr0 + 8) as *const i32);
                                                let base15 = l2;
                                                let len15 = l3;
                                                let mut result15 = Vec::with_capacity(len15 as usize);
                                                for i in 0..len15 {
                                                  let base = base15 + i * 40;
                                                  let e15 = {
                                                    let l4 = *((base + 0) as *const i64);
                                                    let l5 = i32::from(*((base + 8) as *const u8));
                                                    let l7 = i32::from(*((base + 24) as *const u8));
                                                    let v14 = match l7 {
                                                      0 => {
                                                        let e14 = {
                                                          let l8 = *((base + 32) as *const i32);
                                                          let l9 = *((base + 36) as *const i32);
                                                          let len10 = l9 as usize;
                                                          let bytes10 = Vec::from_raw_parts(l8 as *mut _, len10, len10);
                                                          
                                                          wit_bindgen::rt::string_lift(bytes10)
                                                        };
                                                        EventValue::StringValue(e14)
                                                      }
                                                      1 => {
                                                        let e14 = {
                                                          let l11 = *((base + 32) as *const i64);
                                                          
                                                          l11
                                                        };
                                                        EventValue::IntValue(e14)
                                                      }
                                                      2 => {
                                                        let e14 = {
                                                          let l12 = *((base + 32) as *const f64);
                                                          
                                                          l12
                                                        };
                                                        EventValue::FloatValue(e14)
                                                      }
                                                      n => {
                                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                        let e14 = {
                                                          let l13 = i32::from(*((base + 32) as *const u8));
                                                          
                                                          wit_bindgen::rt::bool_lift(l13 as u8)
                                                        };
                                                        EventValue::BoolValue(e14)
                                                      }
                                                    };
                                                    
                                                    TimelineResultPoint{
                                                      time_period: TimePeriod{
                                                        t1: l4 as u64,
                                                        t2: match l5 {
                                                          0 => None,
                                                          1 => {
                                                            let e = {
                                                              let l6 = *((base + 16) as *const i64);
                                                              
                                                              l6 as u64
                                                            };
                                                            Some(e)
                                                          }
                                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                                        },
                                                      },
                                                      value: v14,
                                                    }
                                                  };
                                                  result15.push(e15);
                                                }
                                                wit_bindgen::rt::dealloc(base15, (len15 as usize) * 40, 8);
                                                
                                                TimelineResult{
                                                  results: result15,
                                                }
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l16 = *((ptr0 + 4) as *const i32);
                                                let l17 = *((ptr0 + 8) as *const i32);
                                                let len18 = l17 as usize;
                                                let bytes18 = Vec::from_raw_parts(l16 as *mut _, len18, len18);
                                                
                                                wit_bindgen::rt::string_lift(bytes18)
                                              };
                                              Err(e)
                                            }
                                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                          }
                                        }
                                      }
                                      #[allow(unused_unsafe, clippy::all)]
                                      pub fn tl_has_existed_within(t1: u64,) -> Result<TimelineResult,wit_bindgen::rt::string::String>{
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        unsafe {
                                          
                                          #[repr(align(4))]
                                          struct RetArea([u8; 12]);
                                          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                          let ptr0 = ret_area.as_mut_ptr() as i32;
                                          #[cfg(target_arch = "wasm32")]
                                          #[link(wasm_import_module = "timeline:event-processor/api")]
                                          extern "C" {
                                            #[link_name = "tl-has-existed-within"]
                                            fn wit_import(_: i64, _: i32, );
                                          }
                                          
                                          #[cfg(not(target_arch = "wasm32"))]
                                          fn wit_import(_: i64, _: i32, ){ unreachable!() }
                                          wit_import(wit_bindgen::rt::as_i64(t1), ptr0);
                                          let l1 = i32::from(*((ptr0 + 0) as *const u8));
                                          match l1 {
                                            0 => {
                                              let e = {
                                                let l2 = *((ptr0 + 4) as *const i32);
                                                let l3 = *((ptr0 + 8) as *const i32);
                                                let base15 = l2;
                                                let len15 = l3;
                                                let mut result15 = Vec::with_capacity(len15 as usize);
                                                for i in 0..len15 {
                                                  let base = base15 + i * 40;
                                                  let e15 = {
                                                    let l4 = *((base + 0) as *const i64);
                                                    let l5 = i32::from(*((base + 8) as *const u8));
                                                    let l7 = i32::from(*((base + 24) as *const u8));
                                                    let v14 = match l7 {
                                                      0 => {
                                                        let e14 = {
                                                          let l8 = *((base + 32) as *const i32);
                                                          let l9 = *((base + 36) as *const i32);
                                                          let len10 = l9 as usize;
                                                          let bytes10 = Vec::from_raw_parts(l8 as *mut _, len10, len10);
                                                          
                                                          wit_bindgen::rt::string_lift(bytes10)
                                                        };
                                                        EventValue::StringValue(e14)
                                                      }
                                                      1 => {
                                                        let e14 = {
                                                          let l11 = *((base + 32) as *const i64);
                                                          
                                                          l11
                                                        };
                                                        EventValue::IntValue(e14)
                                                      }
                                                      2 => {
                                                        let e14 = {
                                                          let l12 = *((base + 32) as *const f64);
                                                          
                                                          l12
                                                        };
                                                        EventValue::FloatValue(e14)
                                                      }
                                                      n => {
                                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                        let e14 = {
                                                          let l13 = i32::from(*((base + 32) as *const u8));
                                                          
                                                          wit_bindgen::rt::bool_lift(l13 as u8)
                                                        };
                                                        EventValue::BoolValue(e14)
                                                      }
                                                    };
                                                    
                                                    TimelineResultPoint{
                                                      time_period: TimePeriod{
                                                        t1: l4 as u64,
                                                        t2: match l5 {
                                                          0 => None,
                                                          1 => {
                                                            let e = {
                                                              let l6 = *((base + 16) as *const i64);
                                                              
                                                              l6 as u64
                                                            };
                                                            Some(e)
                                                          }
                                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                                        },
                                                      },
                                                      value: v14,
                                                    }
                                                  };
                                                  result15.push(e15);
                                                }
                                                wit_bindgen::rt::dealloc(base15, (len15 as usize) * 40, 8);
                                                
                                                TimelineResult{
                                                  results: result15,
                                                }
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l16 = *((ptr0 + 4) as *const i32);
                                                let l17 = *((ptr0 + 8) as *const i32);
                                                let len18 = l17 as usize;
                                                let bytes18 = Vec::from_raw_parts(l16 as *mut _, len18, len18);
                                                
                                                wit_bindgen::rt::string_lift(bytes18)
                                              };
                                              Err(e)
                                            }
                                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                          }
                                        }
                                      }
                                      
                                    }
                                    
                                  }
                                  pub mod timeline_processor {
                                    
                                    #[allow(clippy::all)]
                                    pub mod api {
                                      #[used]
                                      #[doc(hidden)]
                                      #[cfg(target_arch = "wasm32")]
                                      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
                                      pub type EventValue = super::super::super::timeline::event_processor::api::EventValue;
                                      pub type TimelineResult = super::super::super::timeline::event_processor::api::TimelineResult;
                                      #[derive(Clone)]
                                      pub struct TimelineResultWorker {
                                        pub worker_id: wit_bindgen::rt::string::String,
                                        pub template_id: wit_bindgen::rt::string::String,
                                      }
                                      impl ::core::fmt::Debug for TimelineResultWorker {
                                        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                                          f.debug_struct("TimelineResultWorker").field("worker-id", &self.worker_id).field("template-id", &self.template_id).finish()
                                        }
                                      }
                                      #[derive(Clone)]
                                      pub enum LeafTimelineNode{
                                        TlHasExisted(TimelineResultWorker),
                                        TlHasExistedWithin(TimelineResultWorker),
                                        TlLatestEventToState(TimelineResultWorker),
                                      }
                                      impl ::core::fmt::Debug for LeafTimelineNode {
                                        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                                          match self {
                                            LeafTimelineNode::TlHasExisted(e) => {
                                              f.debug_tuple("LeafTimelineNode::TlHasExisted").field(e).finish()
                                            }
                                            LeafTimelineNode::TlHasExistedWithin(e) => {
                                              f.debug_tuple("LeafTimelineNode::TlHasExistedWithin").field(e).finish()
                                            }
                                            LeafTimelineNode::TlLatestEventToState(e) => {
                                              f.debug_tuple("LeafTimelineNode::TlLatestEventToState").field(e).finish()
                                            }
                                          }
                                        }
                                      }
                                      #[derive(Clone)]
                                      pub enum DerivedTimelineNode{
                                        EqualTo(TimelineResultWorker),
                                        GreaterThan(TimelineResultWorker),
                                        GreaterThanOrEqualTo(TimelineResultWorker),
                                        LessThan(TimelineResultWorker),
                                        LessThanOrEqualTo(TimelineResultWorker),
                                        And(TimelineResultWorker),
                                        Or(TimelineResultWorker),
                                        Not(TimelineResultWorker),
                                      }
                                      impl ::core::fmt::Debug for DerivedTimelineNode {
                                        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                                          match self {
                                            DerivedTimelineNode::EqualTo(e) => {
                                              f.debug_tuple("DerivedTimelineNode::EqualTo").field(e).finish()
                                            }
                                            DerivedTimelineNode::GreaterThan(e) => {
                                              f.debug_tuple("DerivedTimelineNode::GreaterThan").field(e).finish()
                                            }
                                            DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                              f.debug_tuple("DerivedTimelineNode::GreaterThanOrEqualTo").field(e).finish()
                                            }
                                            DerivedTimelineNode::LessThan(e) => {
                                              f.debug_tuple("DerivedTimelineNode::LessThan").field(e).finish()
                                            }
                                            DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                              f.debug_tuple("DerivedTimelineNode::LessThanOrEqualTo").field(e).finish()
                                            }
                                            DerivedTimelineNode::And(e) => {
                                              f.debug_tuple("DerivedTimelineNode::And").field(e).finish()
                                            }
                                            DerivedTimelineNode::Or(e) => {
                                              f.debug_tuple("DerivedTimelineNode::Or").field(e).finish()
                                            }
                                            DerivedTimelineNode::Not(e) => {
                                              f.debug_tuple("DerivedTimelineNode::Not").field(e).finish()
                                            }
                                          }
                                        }
                                      }
                                      #[derive(Clone)]
                                      pub enum TypedTimelineResultWorker{
                                        LeafTimeline(LeafTimelineNode),
                                        DerivedTimeline(DerivedTimelineNode),
                                      }
                                      impl ::core::fmt::Debug for TypedTimelineResultWorker {
                                        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                                          match self {
                                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                              f.debug_tuple("TypedTimelineResultWorker::LeafTimeline").field(e).finish()
                                            }
                                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                              f.debug_tuple("TypedTimelineResultWorker::DerivedTimeline").field(e).finish()
                                            }
                                          }
                                        }
                                      }
                                      #[allow(unused_unsafe, clippy::all)]
                                      pub fn initialize_equal(child_worker: &TypedTimelineResultWorker,event_value: &EventValue,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        unsafe {
                                          
                                          #[repr(align(4))]
                                          struct RetArea([u8; 12]);
                                          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                          let (result35_0,result35_1,result35_2,result35_3,result35_4,result35_5,) = match child_worker {
                                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                              let (result9_0,result9_1,result9_2,result9_3,result9_4,) = match e {
                                                LeafTimelineNode::TlHasExisted(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id0, template_id:template_id0, } = e;
                                                  let vec1 = worker_id0;
                                                  let ptr1 = vec1.as_ptr() as i32;
                                                  let len1 = vec1.len() as i32;
                                                  let vec2 = template_id0;
                                                  let ptr2 = vec2.as_ptr() as i32;
                                                  let len2 = vec2.len() as i32;
                                                  
                                                  (0i32, ptr1, len1, ptr2, len2)
                                                },
                                                LeafTimelineNode::TlHasExistedWithin(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id3, template_id:template_id3, } = e;
                                                  let vec4 = worker_id3;
                                                  let ptr4 = vec4.as_ptr() as i32;
                                                  let len4 = vec4.len() as i32;
                                                  let vec5 = template_id3;
                                                  let ptr5 = vec5.as_ptr() as i32;
                                                  let len5 = vec5.len() as i32;
                                                  
                                                  (1i32, ptr4, len4, ptr5, len5)
                                                },
                                                LeafTimelineNode::TlLatestEventToState(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id6, template_id:template_id6, } = e;
                                                  let vec7 = worker_id6;
                                                  let ptr7 = vec7.as_ptr() as i32;
                                                  let len7 = vec7.len() as i32;
                                                  let vec8 = template_id6;
                                                  let ptr8 = vec8.as_ptr() as i32;
                                                  let len8 = vec8.len() as i32;
                                                  
                                                  (2i32, ptr7, len7, ptr8, len8)
                                                },
                                              };
                                              
                                              (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                                            },
                                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                              let (result34_0,result34_1,result34_2,result34_3,result34_4,) = match e {
                                                DerivedTimelineNode::EqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id10, template_id:template_id10, } = e;
                                                  let vec11 = worker_id10;
                                                  let ptr11 = vec11.as_ptr() as i32;
                                                  let len11 = vec11.len() as i32;
                                                  let vec12 = template_id10;
                                                  let ptr12 = vec12.as_ptr() as i32;
                                                  let len12 = vec12.len() as i32;
                                                  
                                                  (0i32, ptr11, len11, ptr12, len12)
                                                },
                                                DerivedTimelineNode::GreaterThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id13, template_id:template_id13, } = e;
                                                  let vec14 = worker_id13;
                                                  let ptr14 = vec14.as_ptr() as i32;
                                                  let len14 = vec14.len() as i32;
                                                  let vec15 = template_id13;
                                                  let ptr15 = vec15.as_ptr() as i32;
                                                  let len15 = vec15.len() as i32;
                                                  
                                                  (1i32, ptr14, len14, ptr15, len15)
                                                },
                                                DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id16, template_id:template_id16, } = e;
                                                  let vec17 = worker_id16;
                                                  let ptr17 = vec17.as_ptr() as i32;
                                                  let len17 = vec17.len() as i32;
                                                  let vec18 = template_id16;
                                                  let ptr18 = vec18.as_ptr() as i32;
                                                  let len18 = vec18.len() as i32;
                                                  
                                                  (2i32, ptr17, len17, ptr18, len18)
                                                },
                                                DerivedTimelineNode::LessThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id19, template_id:template_id19, } = e;
                                                  let vec20 = worker_id19;
                                                  let ptr20 = vec20.as_ptr() as i32;
                                                  let len20 = vec20.len() as i32;
                                                  let vec21 = template_id19;
                                                  let ptr21 = vec21.as_ptr() as i32;
                                                  let len21 = vec21.len() as i32;
                                                  
                                                  (3i32, ptr20, len20, ptr21, len21)
                                                },
                                                DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id22, template_id:template_id22, } = e;
                                                  let vec23 = worker_id22;
                                                  let ptr23 = vec23.as_ptr() as i32;
                                                  let len23 = vec23.len() as i32;
                                                  let vec24 = template_id22;
                                                  let ptr24 = vec24.as_ptr() as i32;
                                                  let len24 = vec24.len() as i32;
                                                  
                                                  (4i32, ptr23, len23, ptr24, len24)
                                                },
                                                DerivedTimelineNode::And(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id25, template_id:template_id25, } = e;
                                                  let vec26 = worker_id25;
                                                  let ptr26 = vec26.as_ptr() as i32;
                                                  let len26 = vec26.len() as i32;
                                                  let vec27 = template_id25;
                                                  let ptr27 = vec27.as_ptr() as i32;
                                                  let len27 = vec27.len() as i32;
                                                  
                                                  (5i32, ptr26, len26, ptr27, len27)
                                                },
                                                DerivedTimelineNode::Or(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id28, template_id:template_id28, } = e;
                                                  let vec29 = worker_id28;
                                                  let ptr29 = vec29.as_ptr() as i32;
                                                  let len29 = vec29.len() as i32;
                                                  let vec30 = template_id28;
                                                  let ptr30 = vec30.as_ptr() as i32;
                                                  let len30 = vec30.len() as i32;
                                                  
                                                  (6i32, ptr29, len29, ptr30, len30)
                                                },
                                                DerivedTimelineNode::Not(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id31, template_id:template_id31, } = e;
                                                  let vec32 = worker_id31;
                                                  let ptr32 = vec32.as_ptr() as i32;
                                                  let len32 = vec32.len() as i32;
                                                  let vec33 = template_id31;
                                                  let ptr33 = vec33.as_ptr() as i32;
                                                  let len33 = vec33.len() as i32;
                                                  
                                                  (7i32, ptr32, len32, ptr33, len33)
                                                },
                                              };
                                              
                                              (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                                            },
                                          };
                                          use super::super::super::timeline::event_processor::api::EventValue as V37;
                                          let (result38_0,result38_1,result38_2,) = match event_value {
                                            V37::StringValue(e) => {
                                              let vec36 = e;
                                              let ptr36 = vec36.as_ptr() as i32;
                                              let len36 = vec36.len() as i32;
                                              
                                              (0i32, i64::from(ptr36), len36)
                                            },
                                            V37::IntValue(e) => (1i32, wit_bindgen::rt::as_i64(e), 0i32),
                                            V37::FloatValue(e) => (2i32, (wit_bindgen::rt::as_f64(e)).to_bits() as i64, 0i32),
                                            V37::BoolValue(e) => (3i32, i64::from(match e { true => 1, false => 0 }), 0i32),
                                          };
                                          let ptr39 = ret_area.as_mut_ptr() as i32;
                                          #[cfg(target_arch = "wasm32")]
                                          #[link(wasm_import_module = "timeline:timeline-processor/api")]
                                          extern "C" {
                                            #[link_name = "initialize-equal"]
                                            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i64, _: i32, _: i32, );
                                          }
                                          
                                          #[cfg(not(target_arch = "wasm32"))]
                                          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i64, _: i32, _: i32, ){ unreachable!() }
                                          wit_import(result35_0, result35_1, result35_2, result35_3, result35_4, result35_5, result38_0, result38_1, result38_2, ptr39);
                                          let l40 = i32::from(*((ptr39 + 0) as *const u8));
                                          match l40 {
                                            0 => {
                                              let e = {
                                                let l41 = *((ptr39 + 4) as *const i32);
                                                let l42 = *((ptr39 + 8) as *const i32);
                                                let len43 = l42 as usize;
                                                let bytes43 = Vec::from_raw_parts(l41 as *mut _, len43, len43);
                                                
                                                wit_bindgen::rt::string_lift(bytes43)
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l44 = *((ptr39 + 4) as *const i32);
                                                let l45 = *((ptr39 + 8) as *const i32);
                                                let len46 = l45 as usize;
                                                let bytes46 = Vec::from_raw_parts(l44 as *mut _, len46, len46);
                                                
                                                wit_bindgen::rt::string_lift(bytes46)
                                              };
                                              Err(e)
                                            }
                                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                          }
                                        }
                                      }
                                      #[allow(unused_unsafe, clippy::all)]
                                      pub fn initialize_greater_than(child_worker: &TypedTimelineResultWorker,event_value: &EventValue,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        unsafe {
                                          
                                          #[repr(align(4))]
                                          struct RetArea([u8; 12]);
                                          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                          let (result35_0,result35_1,result35_2,result35_3,result35_4,result35_5,) = match child_worker {
                                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                              let (result9_0,result9_1,result9_2,result9_3,result9_4,) = match e {
                                                LeafTimelineNode::TlHasExisted(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id0, template_id:template_id0, } = e;
                                                  let vec1 = worker_id0;
                                                  let ptr1 = vec1.as_ptr() as i32;
                                                  let len1 = vec1.len() as i32;
                                                  let vec2 = template_id0;
                                                  let ptr2 = vec2.as_ptr() as i32;
                                                  let len2 = vec2.len() as i32;
                                                  
                                                  (0i32, ptr1, len1, ptr2, len2)
                                                },
                                                LeafTimelineNode::TlHasExistedWithin(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id3, template_id:template_id3, } = e;
                                                  let vec4 = worker_id3;
                                                  let ptr4 = vec4.as_ptr() as i32;
                                                  let len4 = vec4.len() as i32;
                                                  let vec5 = template_id3;
                                                  let ptr5 = vec5.as_ptr() as i32;
                                                  let len5 = vec5.len() as i32;
                                                  
                                                  (1i32, ptr4, len4, ptr5, len5)
                                                },
                                                LeafTimelineNode::TlLatestEventToState(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id6, template_id:template_id6, } = e;
                                                  let vec7 = worker_id6;
                                                  let ptr7 = vec7.as_ptr() as i32;
                                                  let len7 = vec7.len() as i32;
                                                  let vec8 = template_id6;
                                                  let ptr8 = vec8.as_ptr() as i32;
                                                  let len8 = vec8.len() as i32;
                                                  
                                                  (2i32, ptr7, len7, ptr8, len8)
                                                },
                                              };
                                              
                                              (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                                            },
                                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                              let (result34_0,result34_1,result34_2,result34_3,result34_4,) = match e {
                                                DerivedTimelineNode::EqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id10, template_id:template_id10, } = e;
                                                  let vec11 = worker_id10;
                                                  let ptr11 = vec11.as_ptr() as i32;
                                                  let len11 = vec11.len() as i32;
                                                  let vec12 = template_id10;
                                                  let ptr12 = vec12.as_ptr() as i32;
                                                  let len12 = vec12.len() as i32;
                                                  
                                                  (0i32, ptr11, len11, ptr12, len12)
                                                },
                                                DerivedTimelineNode::GreaterThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id13, template_id:template_id13, } = e;
                                                  let vec14 = worker_id13;
                                                  let ptr14 = vec14.as_ptr() as i32;
                                                  let len14 = vec14.len() as i32;
                                                  let vec15 = template_id13;
                                                  let ptr15 = vec15.as_ptr() as i32;
                                                  let len15 = vec15.len() as i32;
                                                  
                                                  (1i32, ptr14, len14, ptr15, len15)
                                                },
                                                DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id16, template_id:template_id16, } = e;
                                                  let vec17 = worker_id16;
                                                  let ptr17 = vec17.as_ptr() as i32;
                                                  let len17 = vec17.len() as i32;
                                                  let vec18 = template_id16;
                                                  let ptr18 = vec18.as_ptr() as i32;
                                                  let len18 = vec18.len() as i32;
                                                  
                                                  (2i32, ptr17, len17, ptr18, len18)
                                                },
                                                DerivedTimelineNode::LessThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id19, template_id:template_id19, } = e;
                                                  let vec20 = worker_id19;
                                                  let ptr20 = vec20.as_ptr() as i32;
                                                  let len20 = vec20.len() as i32;
                                                  let vec21 = template_id19;
                                                  let ptr21 = vec21.as_ptr() as i32;
                                                  let len21 = vec21.len() as i32;
                                                  
                                                  (3i32, ptr20, len20, ptr21, len21)
                                                },
                                                DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id22, template_id:template_id22, } = e;
                                                  let vec23 = worker_id22;
                                                  let ptr23 = vec23.as_ptr() as i32;
                                                  let len23 = vec23.len() as i32;
                                                  let vec24 = template_id22;
                                                  let ptr24 = vec24.as_ptr() as i32;
                                                  let len24 = vec24.len() as i32;
                                                  
                                                  (4i32, ptr23, len23, ptr24, len24)
                                                },
                                                DerivedTimelineNode::And(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id25, template_id:template_id25, } = e;
                                                  let vec26 = worker_id25;
                                                  let ptr26 = vec26.as_ptr() as i32;
                                                  let len26 = vec26.len() as i32;
                                                  let vec27 = template_id25;
                                                  let ptr27 = vec27.as_ptr() as i32;
                                                  let len27 = vec27.len() as i32;
                                                  
                                                  (5i32, ptr26, len26, ptr27, len27)
                                                },
                                                DerivedTimelineNode::Or(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id28, template_id:template_id28, } = e;
                                                  let vec29 = worker_id28;
                                                  let ptr29 = vec29.as_ptr() as i32;
                                                  let len29 = vec29.len() as i32;
                                                  let vec30 = template_id28;
                                                  let ptr30 = vec30.as_ptr() as i32;
                                                  let len30 = vec30.len() as i32;
                                                  
                                                  (6i32, ptr29, len29, ptr30, len30)
                                                },
                                                DerivedTimelineNode::Not(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id31, template_id:template_id31, } = e;
                                                  let vec32 = worker_id31;
                                                  let ptr32 = vec32.as_ptr() as i32;
                                                  let len32 = vec32.len() as i32;
                                                  let vec33 = template_id31;
                                                  let ptr33 = vec33.as_ptr() as i32;
                                                  let len33 = vec33.len() as i32;
                                                  
                                                  (7i32, ptr32, len32, ptr33, len33)
                                                },
                                              };
                                              
                                              (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                                            },
                                          };
                                          use super::super::super::timeline::event_processor::api::EventValue as V37;
                                          let (result38_0,result38_1,result38_2,) = match event_value {
                                            V37::StringValue(e) => {
                                              let vec36 = e;
                                              let ptr36 = vec36.as_ptr() as i32;
                                              let len36 = vec36.len() as i32;
                                              
                                              (0i32, i64::from(ptr36), len36)
                                            },
                                            V37::IntValue(e) => (1i32, wit_bindgen::rt::as_i64(e), 0i32),
                                            V37::FloatValue(e) => (2i32, (wit_bindgen::rt::as_f64(e)).to_bits() as i64, 0i32),
                                            V37::BoolValue(e) => (3i32, i64::from(match e { true => 1, false => 0 }), 0i32),
                                          };
                                          let ptr39 = ret_area.as_mut_ptr() as i32;
                                          #[cfg(target_arch = "wasm32")]
                                          #[link(wasm_import_module = "timeline:timeline-processor/api")]
                                          extern "C" {
                                            #[link_name = "initialize-greater-than"]
                                            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i64, _: i32, _: i32, );
                                          }
                                          
                                          #[cfg(not(target_arch = "wasm32"))]
                                          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i64, _: i32, _: i32, ){ unreachable!() }
                                          wit_import(result35_0, result35_1, result35_2, result35_3, result35_4, result35_5, result38_0, result38_1, result38_2, ptr39);
                                          let l40 = i32::from(*((ptr39 + 0) as *const u8));
                                          match l40 {
                                            0 => {
                                              let e = {
                                                let l41 = *((ptr39 + 4) as *const i32);
                                                let l42 = *((ptr39 + 8) as *const i32);
                                                let len43 = l42 as usize;
                                                let bytes43 = Vec::from_raw_parts(l41 as *mut _, len43, len43);
                                                
                                                wit_bindgen::rt::string_lift(bytes43)
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l44 = *((ptr39 + 4) as *const i32);
                                                let l45 = *((ptr39 + 8) as *const i32);
                                                let len46 = l45 as usize;
                                                let bytes46 = Vec::from_raw_parts(l44 as *mut _, len46, len46);
                                                
                                                wit_bindgen::rt::string_lift(bytes46)
                                              };
                                              Err(e)
                                            }
                                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                          }
                                        }
                                      }
                                      #[allow(unused_unsafe, clippy::all)]
                                      pub fn initialize_greater_than_or_equal_to(child_worker: &TypedTimelineResultWorker,event_value: &EventValue,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        unsafe {
                                          
                                          #[repr(align(4))]
                                          struct RetArea([u8; 12]);
                                          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                          let (result35_0,result35_1,result35_2,result35_3,result35_4,result35_5,) = match child_worker {
                                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                              let (result9_0,result9_1,result9_2,result9_3,result9_4,) = match e {
                                                LeafTimelineNode::TlHasExisted(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id0, template_id:template_id0, } = e;
                                                  let vec1 = worker_id0;
                                                  let ptr1 = vec1.as_ptr() as i32;
                                                  let len1 = vec1.len() as i32;
                                                  let vec2 = template_id0;
                                                  let ptr2 = vec2.as_ptr() as i32;
                                                  let len2 = vec2.len() as i32;
                                                  
                                                  (0i32, ptr1, len1, ptr2, len2)
                                                },
                                                LeafTimelineNode::TlHasExistedWithin(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id3, template_id:template_id3, } = e;
                                                  let vec4 = worker_id3;
                                                  let ptr4 = vec4.as_ptr() as i32;
                                                  let len4 = vec4.len() as i32;
                                                  let vec5 = template_id3;
                                                  let ptr5 = vec5.as_ptr() as i32;
                                                  let len5 = vec5.len() as i32;
                                                  
                                                  (1i32, ptr4, len4, ptr5, len5)
                                                },
                                                LeafTimelineNode::TlLatestEventToState(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id6, template_id:template_id6, } = e;
                                                  let vec7 = worker_id6;
                                                  let ptr7 = vec7.as_ptr() as i32;
                                                  let len7 = vec7.len() as i32;
                                                  let vec8 = template_id6;
                                                  let ptr8 = vec8.as_ptr() as i32;
                                                  let len8 = vec8.len() as i32;
                                                  
                                                  (2i32, ptr7, len7, ptr8, len8)
                                                },
                                              };
                                              
                                              (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                                            },
                                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                              let (result34_0,result34_1,result34_2,result34_3,result34_4,) = match e {
                                                DerivedTimelineNode::EqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id10, template_id:template_id10, } = e;
                                                  let vec11 = worker_id10;
                                                  let ptr11 = vec11.as_ptr() as i32;
                                                  let len11 = vec11.len() as i32;
                                                  let vec12 = template_id10;
                                                  let ptr12 = vec12.as_ptr() as i32;
                                                  let len12 = vec12.len() as i32;
                                                  
                                                  (0i32, ptr11, len11, ptr12, len12)
                                                },
                                                DerivedTimelineNode::GreaterThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id13, template_id:template_id13, } = e;
                                                  let vec14 = worker_id13;
                                                  let ptr14 = vec14.as_ptr() as i32;
                                                  let len14 = vec14.len() as i32;
                                                  let vec15 = template_id13;
                                                  let ptr15 = vec15.as_ptr() as i32;
                                                  let len15 = vec15.len() as i32;
                                                  
                                                  (1i32, ptr14, len14, ptr15, len15)
                                                },
                                                DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id16, template_id:template_id16, } = e;
                                                  let vec17 = worker_id16;
                                                  let ptr17 = vec17.as_ptr() as i32;
                                                  let len17 = vec17.len() as i32;
                                                  let vec18 = template_id16;
                                                  let ptr18 = vec18.as_ptr() as i32;
                                                  let len18 = vec18.len() as i32;
                                                  
                                                  (2i32, ptr17, len17, ptr18, len18)
                                                },
                                                DerivedTimelineNode::LessThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id19, template_id:template_id19, } = e;
                                                  let vec20 = worker_id19;
                                                  let ptr20 = vec20.as_ptr() as i32;
                                                  let len20 = vec20.len() as i32;
                                                  let vec21 = template_id19;
                                                  let ptr21 = vec21.as_ptr() as i32;
                                                  let len21 = vec21.len() as i32;
                                                  
                                                  (3i32, ptr20, len20, ptr21, len21)
                                                },
                                                DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id22, template_id:template_id22, } = e;
                                                  let vec23 = worker_id22;
                                                  let ptr23 = vec23.as_ptr() as i32;
                                                  let len23 = vec23.len() as i32;
                                                  let vec24 = template_id22;
                                                  let ptr24 = vec24.as_ptr() as i32;
                                                  let len24 = vec24.len() as i32;
                                                  
                                                  (4i32, ptr23, len23, ptr24, len24)
                                                },
                                                DerivedTimelineNode::And(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id25, template_id:template_id25, } = e;
                                                  let vec26 = worker_id25;
                                                  let ptr26 = vec26.as_ptr() as i32;
                                                  let len26 = vec26.len() as i32;
                                                  let vec27 = template_id25;
                                                  let ptr27 = vec27.as_ptr() as i32;
                                                  let len27 = vec27.len() as i32;
                                                  
                                                  (5i32, ptr26, len26, ptr27, len27)
                                                },
                                                DerivedTimelineNode::Or(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id28, template_id:template_id28, } = e;
                                                  let vec29 = worker_id28;
                                                  let ptr29 = vec29.as_ptr() as i32;
                                                  let len29 = vec29.len() as i32;
                                                  let vec30 = template_id28;
                                                  let ptr30 = vec30.as_ptr() as i32;
                                                  let len30 = vec30.len() as i32;
                                                  
                                                  (6i32, ptr29, len29, ptr30, len30)
                                                },
                                                DerivedTimelineNode::Not(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id31, template_id:template_id31, } = e;
                                                  let vec32 = worker_id31;
                                                  let ptr32 = vec32.as_ptr() as i32;
                                                  let len32 = vec32.len() as i32;
                                                  let vec33 = template_id31;
                                                  let ptr33 = vec33.as_ptr() as i32;
                                                  let len33 = vec33.len() as i32;
                                                  
                                                  (7i32, ptr32, len32, ptr33, len33)
                                                },
                                              };
                                              
                                              (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                                            },
                                          };
                                          use super::super::super::timeline::event_processor::api::EventValue as V37;
                                          let (result38_0,result38_1,result38_2,) = match event_value {
                                            V37::StringValue(e) => {
                                              let vec36 = e;
                                              let ptr36 = vec36.as_ptr() as i32;
                                              let len36 = vec36.len() as i32;
                                              
                                              (0i32, i64::from(ptr36), len36)
                                            },
                                            V37::IntValue(e) => (1i32, wit_bindgen::rt::as_i64(e), 0i32),
                                            V37::FloatValue(e) => (2i32, (wit_bindgen::rt::as_f64(e)).to_bits() as i64, 0i32),
                                            V37::BoolValue(e) => (3i32, i64::from(match e { true => 1, false => 0 }), 0i32),
                                          };
                                          let ptr39 = ret_area.as_mut_ptr() as i32;
                                          #[cfg(target_arch = "wasm32")]
                                          #[link(wasm_import_module = "timeline:timeline-processor/api")]
                                          extern "C" {
                                            #[link_name = "initialize-greater-than-or-equal-to"]
                                            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i64, _: i32, _: i32, );
                                          }
                                          
                                          #[cfg(not(target_arch = "wasm32"))]
                                          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i64, _: i32, _: i32, ){ unreachable!() }
                                          wit_import(result35_0, result35_1, result35_2, result35_3, result35_4, result35_5, result38_0, result38_1, result38_2, ptr39);
                                          let l40 = i32::from(*((ptr39 + 0) as *const u8));
                                          match l40 {
                                            0 => {
                                              let e = {
                                                let l41 = *((ptr39 + 4) as *const i32);
                                                let l42 = *((ptr39 + 8) as *const i32);
                                                let len43 = l42 as usize;
                                                let bytes43 = Vec::from_raw_parts(l41 as *mut _, len43, len43);
                                                
                                                wit_bindgen::rt::string_lift(bytes43)
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l44 = *((ptr39 + 4) as *const i32);
                                                let l45 = *((ptr39 + 8) as *const i32);
                                                let len46 = l45 as usize;
                                                let bytes46 = Vec::from_raw_parts(l44 as *mut _, len46, len46);
                                                
                                                wit_bindgen::rt::string_lift(bytes46)
                                              };
                                              Err(e)
                                            }
                                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                          }
                                        }
                                      }
                                      #[allow(unused_unsafe, clippy::all)]
                                      pub fn initialize_less_than(child_worker: &TypedTimelineResultWorker,event_value: &EventValue,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        unsafe {
                                          
                                          #[repr(align(4))]
                                          struct RetArea([u8; 12]);
                                          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                          let (result35_0,result35_1,result35_2,result35_3,result35_4,result35_5,) = match child_worker {
                                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                              let (result9_0,result9_1,result9_2,result9_3,result9_4,) = match e {
                                                LeafTimelineNode::TlHasExisted(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id0, template_id:template_id0, } = e;
                                                  let vec1 = worker_id0;
                                                  let ptr1 = vec1.as_ptr() as i32;
                                                  let len1 = vec1.len() as i32;
                                                  let vec2 = template_id0;
                                                  let ptr2 = vec2.as_ptr() as i32;
                                                  let len2 = vec2.len() as i32;
                                                  
                                                  (0i32, ptr1, len1, ptr2, len2)
                                                },
                                                LeafTimelineNode::TlHasExistedWithin(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id3, template_id:template_id3, } = e;
                                                  let vec4 = worker_id3;
                                                  let ptr4 = vec4.as_ptr() as i32;
                                                  let len4 = vec4.len() as i32;
                                                  let vec5 = template_id3;
                                                  let ptr5 = vec5.as_ptr() as i32;
                                                  let len5 = vec5.len() as i32;
                                                  
                                                  (1i32, ptr4, len4, ptr5, len5)
                                                },
                                                LeafTimelineNode::TlLatestEventToState(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id6, template_id:template_id6, } = e;
                                                  let vec7 = worker_id6;
                                                  let ptr7 = vec7.as_ptr() as i32;
                                                  let len7 = vec7.len() as i32;
                                                  let vec8 = template_id6;
                                                  let ptr8 = vec8.as_ptr() as i32;
                                                  let len8 = vec8.len() as i32;
                                                  
                                                  (2i32, ptr7, len7, ptr8, len8)
                                                },
                                              };
                                              
                                              (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                                            },
                                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                              let (result34_0,result34_1,result34_2,result34_3,result34_4,) = match e {
                                                DerivedTimelineNode::EqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id10, template_id:template_id10, } = e;
                                                  let vec11 = worker_id10;
                                                  let ptr11 = vec11.as_ptr() as i32;
                                                  let len11 = vec11.len() as i32;
                                                  let vec12 = template_id10;
                                                  let ptr12 = vec12.as_ptr() as i32;
                                                  let len12 = vec12.len() as i32;
                                                  
                                                  (0i32, ptr11, len11, ptr12, len12)
                                                },
                                                DerivedTimelineNode::GreaterThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id13, template_id:template_id13, } = e;
                                                  let vec14 = worker_id13;
                                                  let ptr14 = vec14.as_ptr() as i32;
                                                  let len14 = vec14.len() as i32;
                                                  let vec15 = template_id13;
                                                  let ptr15 = vec15.as_ptr() as i32;
                                                  let len15 = vec15.len() as i32;
                                                  
                                                  (1i32, ptr14, len14, ptr15, len15)
                                                },
                                                DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id16, template_id:template_id16, } = e;
                                                  let vec17 = worker_id16;
                                                  let ptr17 = vec17.as_ptr() as i32;
                                                  let len17 = vec17.len() as i32;
                                                  let vec18 = template_id16;
                                                  let ptr18 = vec18.as_ptr() as i32;
                                                  let len18 = vec18.len() as i32;
                                                  
                                                  (2i32, ptr17, len17, ptr18, len18)
                                                },
                                                DerivedTimelineNode::LessThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id19, template_id:template_id19, } = e;
                                                  let vec20 = worker_id19;
                                                  let ptr20 = vec20.as_ptr() as i32;
                                                  let len20 = vec20.len() as i32;
                                                  let vec21 = template_id19;
                                                  let ptr21 = vec21.as_ptr() as i32;
                                                  let len21 = vec21.len() as i32;
                                                  
                                                  (3i32, ptr20, len20, ptr21, len21)
                                                },
                                                DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id22, template_id:template_id22, } = e;
                                                  let vec23 = worker_id22;
                                                  let ptr23 = vec23.as_ptr() as i32;
                                                  let len23 = vec23.len() as i32;
                                                  let vec24 = template_id22;
                                                  let ptr24 = vec24.as_ptr() as i32;
                                                  let len24 = vec24.len() as i32;
                                                  
                                                  (4i32, ptr23, len23, ptr24, len24)
                                                },
                                                DerivedTimelineNode::And(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id25, template_id:template_id25, } = e;
                                                  let vec26 = worker_id25;
                                                  let ptr26 = vec26.as_ptr() as i32;
                                                  let len26 = vec26.len() as i32;
                                                  let vec27 = template_id25;
                                                  let ptr27 = vec27.as_ptr() as i32;
                                                  let len27 = vec27.len() as i32;
                                                  
                                                  (5i32, ptr26, len26, ptr27, len27)
                                                },
                                                DerivedTimelineNode::Or(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id28, template_id:template_id28, } = e;
                                                  let vec29 = worker_id28;
                                                  let ptr29 = vec29.as_ptr() as i32;
                                                  let len29 = vec29.len() as i32;
                                                  let vec30 = template_id28;
                                                  let ptr30 = vec30.as_ptr() as i32;
                                                  let len30 = vec30.len() as i32;
                                                  
                                                  (6i32, ptr29, len29, ptr30, len30)
                                                },
                                                DerivedTimelineNode::Not(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id31, template_id:template_id31, } = e;
                                                  let vec32 = worker_id31;
                                                  let ptr32 = vec32.as_ptr() as i32;
                                                  let len32 = vec32.len() as i32;
                                                  let vec33 = template_id31;
                                                  let ptr33 = vec33.as_ptr() as i32;
                                                  let len33 = vec33.len() as i32;
                                                  
                                                  (7i32, ptr32, len32, ptr33, len33)
                                                },
                                              };
                                              
                                              (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                                            },
                                          };
                                          use super::super::super::timeline::event_processor::api::EventValue as V37;
                                          let (result38_0,result38_1,result38_2,) = match event_value {
                                            V37::StringValue(e) => {
                                              let vec36 = e;
                                              let ptr36 = vec36.as_ptr() as i32;
                                              let len36 = vec36.len() as i32;
                                              
                                              (0i32, i64::from(ptr36), len36)
                                            },
                                            V37::IntValue(e) => (1i32, wit_bindgen::rt::as_i64(e), 0i32),
                                            V37::FloatValue(e) => (2i32, (wit_bindgen::rt::as_f64(e)).to_bits() as i64, 0i32),
                                            V37::BoolValue(e) => (3i32, i64::from(match e { true => 1, false => 0 }), 0i32),
                                          };
                                          let ptr39 = ret_area.as_mut_ptr() as i32;
                                          #[cfg(target_arch = "wasm32")]
                                          #[link(wasm_import_module = "timeline:timeline-processor/api")]
                                          extern "C" {
                                            #[link_name = "initialize-less-than"]
                                            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i64, _: i32, _: i32, );
                                          }
                                          
                                          #[cfg(not(target_arch = "wasm32"))]
                                          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i64, _: i32, _: i32, ){ unreachable!() }
                                          wit_import(result35_0, result35_1, result35_2, result35_3, result35_4, result35_5, result38_0, result38_1, result38_2, ptr39);
                                          let l40 = i32::from(*((ptr39 + 0) as *const u8));
                                          match l40 {
                                            0 => {
                                              let e = {
                                                let l41 = *((ptr39 + 4) as *const i32);
                                                let l42 = *((ptr39 + 8) as *const i32);
                                                let len43 = l42 as usize;
                                                let bytes43 = Vec::from_raw_parts(l41 as *mut _, len43, len43);
                                                
                                                wit_bindgen::rt::string_lift(bytes43)
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l44 = *((ptr39 + 4) as *const i32);
                                                let l45 = *((ptr39 + 8) as *const i32);
                                                let len46 = l45 as usize;
                                                let bytes46 = Vec::from_raw_parts(l44 as *mut _, len46, len46);
                                                
                                                wit_bindgen::rt::string_lift(bytes46)
                                              };
                                              Err(e)
                                            }
                                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                          }
                                        }
                                      }
                                      #[allow(unused_unsafe, clippy::all)]
                                      pub fn initialize_less_than_or_equal_to(child_worker: &TypedTimelineResultWorker,event_value: &EventValue,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        unsafe {
                                          
                                          #[repr(align(4))]
                                          struct RetArea([u8; 12]);
                                          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                          let (result35_0,result35_1,result35_2,result35_3,result35_4,result35_5,) = match child_worker {
                                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                              let (result9_0,result9_1,result9_2,result9_3,result9_4,) = match e {
                                                LeafTimelineNode::TlHasExisted(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id0, template_id:template_id0, } = e;
                                                  let vec1 = worker_id0;
                                                  let ptr1 = vec1.as_ptr() as i32;
                                                  let len1 = vec1.len() as i32;
                                                  let vec2 = template_id0;
                                                  let ptr2 = vec2.as_ptr() as i32;
                                                  let len2 = vec2.len() as i32;
                                                  
                                                  (0i32, ptr1, len1, ptr2, len2)
                                                },
                                                LeafTimelineNode::TlHasExistedWithin(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id3, template_id:template_id3, } = e;
                                                  let vec4 = worker_id3;
                                                  let ptr4 = vec4.as_ptr() as i32;
                                                  let len4 = vec4.len() as i32;
                                                  let vec5 = template_id3;
                                                  let ptr5 = vec5.as_ptr() as i32;
                                                  let len5 = vec5.len() as i32;
                                                  
                                                  (1i32, ptr4, len4, ptr5, len5)
                                                },
                                                LeafTimelineNode::TlLatestEventToState(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id6, template_id:template_id6, } = e;
                                                  let vec7 = worker_id6;
                                                  let ptr7 = vec7.as_ptr() as i32;
                                                  let len7 = vec7.len() as i32;
                                                  let vec8 = template_id6;
                                                  let ptr8 = vec8.as_ptr() as i32;
                                                  let len8 = vec8.len() as i32;
                                                  
                                                  (2i32, ptr7, len7, ptr8, len8)
                                                },
                                              };
                                              
                                              (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                                            },
                                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                              let (result34_0,result34_1,result34_2,result34_3,result34_4,) = match e {
                                                DerivedTimelineNode::EqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id10, template_id:template_id10, } = e;
                                                  let vec11 = worker_id10;
                                                  let ptr11 = vec11.as_ptr() as i32;
                                                  let len11 = vec11.len() as i32;
                                                  let vec12 = template_id10;
                                                  let ptr12 = vec12.as_ptr() as i32;
                                                  let len12 = vec12.len() as i32;
                                                  
                                                  (0i32, ptr11, len11, ptr12, len12)
                                                },
                                                DerivedTimelineNode::GreaterThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id13, template_id:template_id13, } = e;
                                                  let vec14 = worker_id13;
                                                  let ptr14 = vec14.as_ptr() as i32;
                                                  let len14 = vec14.len() as i32;
                                                  let vec15 = template_id13;
                                                  let ptr15 = vec15.as_ptr() as i32;
                                                  let len15 = vec15.len() as i32;
                                                  
                                                  (1i32, ptr14, len14, ptr15, len15)
                                                },
                                                DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id16, template_id:template_id16, } = e;
                                                  let vec17 = worker_id16;
                                                  let ptr17 = vec17.as_ptr() as i32;
                                                  let len17 = vec17.len() as i32;
                                                  let vec18 = template_id16;
                                                  let ptr18 = vec18.as_ptr() as i32;
                                                  let len18 = vec18.len() as i32;
                                                  
                                                  (2i32, ptr17, len17, ptr18, len18)
                                                },
                                                DerivedTimelineNode::LessThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id19, template_id:template_id19, } = e;
                                                  let vec20 = worker_id19;
                                                  let ptr20 = vec20.as_ptr() as i32;
                                                  let len20 = vec20.len() as i32;
                                                  let vec21 = template_id19;
                                                  let ptr21 = vec21.as_ptr() as i32;
                                                  let len21 = vec21.len() as i32;
                                                  
                                                  (3i32, ptr20, len20, ptr21, len21)
                                                },
                                                DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id22, template_id:template_id22, } = e;
                                                  let vec23 = worker_id22;
                                                  let ptr23 = vec23.as_ptr() as i32;
                                                  let len23 = vec23.len() as i32;
                                                  let vec24 = template_id22;
                                                  let ptr24 = vec24.as_ptr() as i32;
                                                  let len24 = vec24.len() as i32;
                                                  
                                                  (4i32, ptr23, len23, ptr24, len24)
                                                },
                                                DerivedTimelineNode::And(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id25, template_id:template_id25, } = e;
                                                  let vec26 = worker_id25;
                                                  let ptr26 = vec26.as_ptr() as i32;
                                                  let len26 = vec26.len() as i32;
                                                  let vec27 = template_id25;
                                                  let ptr27 = vec27.as_ptr() as i32;
                                                  let len27 = vec27.len() as i32;
                                                  
                                                  (5i32, ptr26, len26, ptr27, len27)
                                                },
                                                DerivedTimelineNode::Or(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id28, template_id:template_id28, } = e;
                                                  let vec29 = worker_id28;
                                                  let ptr29 = vec29.as_ptr() as i32;
                                                  let len29 = vec29.len() as i32;
                                                  let vec30 = template_id28;
                                                  let ptr30 = vec30.as_ptr() as i32;
                                                  let len30 = vec30.len() as i32;
                                                  
                                                  (6i32, ptr29, len29, ptr30, len30)
                                                },
                                                DerivedTimelineNode::Not(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id31, template_id:template_id31, } = e;
                                                  let vec32 = worker_id31;
                                                  let ptr32 = vec32.as_ptr() as i32;
                                                  let len32 = vec32.len() as i32;
                                                  let vec33 = template_id31;
                                                  let ptr33 = vec33.as_ptr() as i32;
                                                  let len33 = vec33.len() as i32;
                                                  
                                                  (7i32, ptr32, len32, ptr33, len33)
                                                },
                                              };
                                              
                                              (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                                            },
                                          };
                                          use super::super::super::timeline::event_processor::api::EventValue as V37;
                                          let (result38_0,result38_1,result38_2,) = match event_value {
                                            V37::StringValue(e) => {
                                              let vec36 = e;
                                              let ptr36 = vec36.as_ptr() as i32;
                                              let len36 = vec36.len() as i32;
                                              
                                              (0i32, i64::from(ptr36), len36)
                                            },
                                            V37::IntValue(e) => (1i32, wit_bindgen::rt::as_i64(e), 0i32),
                                            V37::FloatValue(e) => (2i32, (wit_bindgen::rt::as_f64(e)).to_bits() as i64, 0i32),
                                            V37::BoolValue(e) => (3i32, i64::from(match e { true => 1, false => 0 }), 0i32),
                                          };
                                          let ptr39 = ret_area.as_mut_ptr() as i32;
                                          #[cfg(target_arch = "wasm32")]
                                          #[link(wasm_import_module = "timeline:timeline-processor/api")]
                                          extern "C" {
                                            #[link_name = "initialize-less-than-or-equal-to"]
                                            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i64, _: i32, _: i32, );
                                          }
                                          
                                          #[cfg(not(target_arch = "wasm32"))]
                                          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i64, _: i32, _: i32, ){ unreachable!() }
                                          wit_import(result35_0, result35_1, result35_2, result35_3, result35_4, result35_5, result38_0, result38_1, result38_2, ptr39);
                                          let l40 = i32::from(*((ptr39 + 0) as *const u8));
                                          match l40 {
                                            0 => {
                                              let e = {
                                                let l41 = *((ptr39 + 4) as *const i32);
                                                let l42 = *((ptr39 + 8) as *const i32);
                                                let len43 = l42 as usize;
                                                let bytes43 = Vec::from_raw_parts(l41 as *mut _, len43, len43);
                                                
                                                wit_bindgen::rt::string_lift(bytes43)
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l44 = *((ptr39 + 4) as *const i32);
                                                let l45 = *((ptr39 + 8) as *const i32);
                                                let len46 = l45 as usize;
                                                let bytes46 = Vec::from_raw_parts(l44 as *mut _, len46, len46);
                                                
                                                wit_bindgen::rt::string_lift(bytes46)
                                              };
                                              Err(e)
                                            }
                                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                          }
                                        }
                                      }
                                      #[allow(unused_unsafe, clippy::all)]
                                      pub fn initialize_and(child_worker1: &TypedTimelineResultWorker,child_worker2: &TypedTimelineResultWorker,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        unsafe {
                                          
                                          #[repr(align(4))]
                                          struct RetArea([u8; 12]);
                                          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                          let (result35_0,result35_1,result35_2,result35_3,result35_4,result35_5,) = match child_worker1 {
                                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                              let (result9_0,result9_1,result9_2,result9_3,result9_4,) = match e {
                                                LeafTimelineNode::TlHasExisted(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id0, template_id:template_id0, } = e;
                                                  let vec1 = worker_id0;
                                                  let ptr1 = vec1.as_ptr() as i32;
                                                  let len1 = vec1.len() as i32;
                                                  let vec2 = template_id0;
                                                  let ptr2 = vec2.as_ptr() as i32;
                                                  let len2 = vec2.len() as i32;
                                                  
                                                  (0i32, ptr1, len1, ptr2, len2)
                                                },
                                                LeafTimelineNode::TlHasExistedWithin(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id3, template_id:template_id3, } = e;
                                                  let vec4 = worker_id3;
                                                  let ptr4 = vec4.as_ptr() as i32;
                                                  let len4 = vec4.len() as i32;
                                                  let vec5 = template_id3;
                                                  let ptr5 = vec5.as_ptr() as i32;
                                                  let len5 = vec5.len() as i32;
                                                  
                                                  (1i32, ptr4, len4, ptr5, len5)
                                                },
                                                LeafTimelineNode::TlLatestEventToState(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id6, template_id:template_id6, } = e;
                                                  let vec7 = worker_id6;
                                                  let ptr7 = vec7.as_ptr() as i32;
                                                  let len7 = vec7.len() as i32;
                                                  let vec8 = template_id6;
                                                  let ptr8 = vec8.as_ptr() as i32;
                                                  let len8 = vec8.len() as i32;
                                                  
                                                  (2i32, ptr7, len7, ptr8, len8)
                                                },
                                              };
                                              
                                              (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                                            },
                                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                              let (result34_0,result34_1,result34_2,result34_3,result34_4,) = match e {
                                                DerivedTimelineNode::EqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id10, template_id:template_id10, } = e;
                                                  let vec11 = worker_id10;
                                                  let ptr11 = vec11.as_ptr() as i32;
                                                  let len11 = vec11.len() as i32;
                                                  let vec12 = template_id10;
                                                  let ptr12 = vec12.as_ptr() as i32;
                                                  let len12 = vec12.len() as i32;
                                                  
                                                  (0i32, ptr11, len11, ptr12, len12)
                                                },
                                                DerivedTimelineNode::GreaterThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id13, template_id:template_id13, } = e;
                                                  let vec14 = worker_id13;
                                                  let ptr14 = vec14.as_ptr() as i32;
                                                  let len14 = vec14.len() as i32;
                                                  let vec15 = template_id13;
                                                  let ptr15 = vec15.as_ptr() as i32;
                                                  let len15 = vec15.len() as i32;
                                                  
                                                  (1i32, ptr14, len14, ptr15, len15)
                                                },
                                                DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id16, template_id:template_id16, } = e;
                                                  let vec17 = worker_id16;
                                                  let ptr17 = vec17.as_ptr() as i32;
                                                  let len17 = vec17.len() as i32;
                                                  let vec18 = template_id16;
                                                  let ptr18 = vec18.as_ptr() as i32;
                                                  let len18 = vec18.len() as i32;
                                                  
                                                  (2i32, ptr17, len17, ptr18, len18)
                                                },
                                                DerivedTimelineNode::LessThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id19, template_id:template_id19, } = e;
                                                  let vec20 = worker_id19;
                                                  let ptr20 = vec20.as_ptr() as i32;
                                                  let len20 = vec20.len() as i32;
                                                  let vec21 = template_id19;
                                                  let ptr21 = vec21.as_ptr() as i32;
                                                  let len21 = vec21.len() as i32;
                                                  
                                                  (3i32, ptr20, len20, ptr21, len21)
                                                },
                                                DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id22, template_id:template_id22, } = e;
                                                  let vec23 = worker_id22;
                                                  let ptr23 = vec23.as_ptr() as i32;
                                                  let len23 = vec23.len() as i32;
                                                  let vec24 = template_id22;
                                                  let ptr24 = vec24.as_ptr() as i32;
                                                  let len24 = vec24.len() as i32;
                                                  
                                                  (4i32, ptr23, len23, ptr24, len24)
                                                },
                                                DerivedTimelineNode::And(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id25, template_id:template_id25, } = e;
                                                  let vec26 = worker_id25;
                                                  let ptr26 = vec26.as_ptr() as i32;
                                                  let len26 = vec26.len() as i32;
                                                  let vec27 = template_id25;
                                                  let ptr27 = vec27.as_ptr() as i32;
                                                  let len27 = vec27.len() as i32;
                                                  
                                                  (5i32, ptr26, len26, ptr27, len27)
                                                },
                                                DerivedTimelineNode::Or(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id28, template_id:template_id28, } = e;
                                                  let vec29 = worker_id28;
                                                  let ptr29 = vec29.as_ptr() as i32;
                                                  let len29 = vec29.len() as i32;
                                                  let vec30 = template_id28;
                                                  let ptr30 = vec30.as_ptr() as i32;
                                                  let len30 = vec30.len() as i32;
                                                  
                                                  (6i32, ptr29, len29, ptr30, len30)
                                                },
                                                DerivedTimelineNode::Not(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id31, template_id:template_id31, } = e;
                                                  let vec32 = worker_id31;
                                                  let ptr32 = vec32.as_ptr() as i32;
                                                  let len32 = vec32.len() as i32;
                                                  let vec33 = template_id31;
                                                  let ptr33 = vec33.as_ptr() as i32;
                                                  let len33 = vec33.len() as i32;
                                                  
                                                  (7i32, ptr32, len32, ptr33, len33)
                                                },
                                              };
                                              
                                              (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                                            },
                                          };
                                          let (result71_0,result71_1,result71_2,result71_3,result71_4,result71_5,) = match child_worker2 {
                                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                              let (result45_0,result45_1,result45_2,result45_3,result45_4,) = match e {
                                                LeafTimelineNode::TlHasExisted(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id36, template_id:template_id36, } = e;
                                                  let vec37 = worker_id36;
                                                  let ptr37 = vec37.as_ptr() as i32;
                                                  let len37 = vec37.len() as i32;
                                                  let vec38 = template_id36;
                                                  let ptr38 = vec38.as_ptr() as i32;
                                                  let len38 = vec38.len() as i32;
                                                  
                                                  (0i32, ptr37, len37, ptr38, len38)
                                                },
                                                LeafTimelineNode::TlHasExistedWithin(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id39, template_id:template_id39, } = e;
                                                  let vec40 = worker_id39;
                                                  let ptr40 = vec40.as_ptr() as i32;
                                                  let len40 = vec40.len() as i32;
                                                  let vec41 = template_id39;
                                                  let ptr41 = vec41.as_ptr() as i32;
                                                  let len41 = vec41.len() as i32;
                                                  
                                                  (1i32, ptr40, len40, ptr41, len41)
                                                },
                                                LeafTimelineNode::TlLatestEventToState(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id42, template_id:template_id42, } = e;
                                                  let vec43 = worker_id42;
                                                  let ptr43 = vec43.as_ptr() as i32;
                                                  let len43 = vec43.len() as i32;
                                                  let vec44 = template_id42;
                                                  let ptr44 = vec44.as_ptr() as i32;
                                                  let len44 = vec44.len() as i32;
                                                  
                                                  (2i32, ptr43, len43, ptr44, len44)
                                                },
                                              };
                                              
                                              (0i32, result45_0, result45_1, result45_2, result45_3, result45_4)
                                            },
                                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                              let (result70_0,result70_1,result70_2,result70_3,result70_4,) = match e {
                                                DerivedTimelineNode::EqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id46, template_id:template_id46, } = e;
                                                  let vec47 = worker_id46;
                                                  let ptr47 = vec47.as_ptr() as i32;
                                                  let len47 = vec47.len() as i32;
                                                  let vec48 = template_id46;
                                                  let ptr48 = vec48.as_ptr() as i32;
                                                  let len48 = vec48.len() as i32;
                                                  
                                                  (0i32, ptr47, len47, ptr48, len48)
                                                },
                                                DerivedTimelineNode::GreaterThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id49, template_id:template_id49, } = e;
                                                  let vec50 = worker_id49;
                                                  let ptr50 = vec50.as_ptr() as i32;
                                                  let len50 = vec50.len() as i32;
                                                  let vec51 = template_id49;
                                                  let ptr51 = vec51.as_ptr() as i32;
                                                  let len51 = vec51.len() as i32;
                                                  
                                                  (1i32, ptr50, len50, ptr51, len51)
                                                },
                                                DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id52, template_id:template_id52, } = e;
                                                  let vec53 = worker_id52;
                                                  let ptr53 = vec53.as_ptr() as i32;
                                                  let len53 = vec53.len() as i32;
                                                  let vec54 = template_id52;
                                                  let ptr54 = vec54.as_ptr() as i32;
                                                  let len54 = vec54.len() as i32;
                                                  
                                                  (2i32, ptr53, len53, ptr54, len54)
                                                },
                                                DerivedTimelineNode::LessThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id55, template_id:template_id55, } = e;
                                                  let vec56 = worker_id55;
                                                  let ptr56 = vec56.as_ptr() as i32;
                                                  let len56 = vec56.len() as i32;
                                                  let vec57 = template_id55;
                                                  let ptr57 = vec57.as_ptr() as i32;
                                                  let len57 = vec57.len() as i32;
                                                  
                                                  (3i32, ptr56, len56, ptr57, len57)
                                                },
                                                DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id58, template_id:template_id58, } = e;
                                                  let vec59 = worker_id58;
                                                  let ptr59 = vec59.as_ptr() as i32;
                                                  let len59 = vec59.len() as i32;
                                                  let vec60 = template_id58;
                                                  let ptr60 = vec60.as_ptr() as i32;
                                                  let len60 = vec60.len() as i32;
                                                  
                                                  (4i32, ptr59, len59, ptr60, len60)
                                                },
                                                DerivedTimelineNode::And(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id61, template_id:template_id61, } = e;
                                                  let vec62 = worker_id61;
                                                  let ptr62 = vec62.as_ptr() as i32;
                                                  let len62 = vec62.len() as i32;
                                                  let vec63 = template_id61;
                                                  let ptr63 = vec63.as_ptr() as i32;
                                                  let len63 = vec63.len() as i32;
                                                  
                                                  (5i32, ptr62, len62, ptr63, len63)
                                                },
                                                DerivedTimelineNode::Or(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id64, template_id:template_id64, } = e;
                                                  let vec65 = worker_id64;
                                                  let ptr65 = vec65.as_ptr() as i32;
                                                  let len65 = vec65.len() as i32;
                                                  let vec66 = template_id64;
                                                  let ptr66 = vec66.as_ptr() as i32;
                                                  let len66 = vec66.len() as i32;
                                                  
                                                  (6i32, ptr65, len65, ptr66, len66)
                                                },
                                                DerivedTimelineNode::Not(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id67, template_id:template_id67, } = e;
                                                  let vec68 = worker_id67;
                                                  let ptr68 = vec68.as_ptr() as i32;
                                                  let len68 = vec68.len() as i32;
                                                  let vec69 = template_id67;
                                                  let ptr69 = vec69.as_ptr() as i32;
                                                  let len69 = vec69.len() as i32;
                                                  
                                                  (7i32, ptr68, len68, ptr69, len69)
                                                },
                                              };
                                              
                                              (1i32, result70_0, result70_1, result70_2, result70_3, result70_4)
                                            },
                                          };
                                          let ptr72 = ret_area.as_mut_ptr() as i32;
                                          #[cfg(target_arch = "wasm32")]
                                          #[link(wasm_import_module = "timeline:timeline-processor/api")]
                                          extern "C" {
                                            #[link_name = "initialize-and"]
                                            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                                          }
                                          
                                          #[cfg(not(target_arch = "wasm32"))]
                                          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                                          wit_import(result35_0, result35_1, result35_2, result35_3, result35_4, result35_5, result71_0, result71_1, result71_2, result71_3, result71_4, result71_5, ptr72);
                                          let l73 = i32::from(*((ptr72 + 0) as *const u8));
                                          match l73 {
                                            0 => {
                                              let e = {
                                                let l74 = *((ptr72 + 4) as *const i32);
                                                let l75 = *((ptr72 + 8) as *const i32);
                                                let len76 = l75 as usize;
                                                let bytes76 = Vec::from_raw_parts(l74 as *mut _, len76, len76);
                                                
                                                wit_bindgen::rt::string_lift(bytes76)
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l77 = *((ptr72 + 4) as *const i32);
                                                let l78 = *((ptr72 + 8) as *const i32);
                                                let len79 = l78 as usize;
                                                let bytes79 = Vec::from_raw_parts(l77 as *mut _, len79, len79);
                                                
                                                wit_bindgen::rt::string_lift(bytes79)
                                              };
                                              Err(e)
                                            }
                                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                          }
                                        }
                                      }
                                      #[allow(unused_unsafe, clippy::all)]
                                      pub fn initialize_or(child_worker1: &TypedTimelineResultWorker,child_worker2: &TypedTimelineResultWorker,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        unsafe {
                                          
                                          #[repr(align(4))]
                                          struct RetArea([u8; 12]);
                                          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                          let (result35_0,result35_1,result35_2,result35_3,result35_4,result35_5,) = match child_worker1 {
                                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                              let (result9_0,result9_1,result9_2,result9_3,result9_4,) = match e {
                                                LeafTimelineNode::TlHasExisted(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id0, template_id:template_id0, } = e;
                                                  let vec1 = worker_id0;
                                                  let ptr1 = vec1.as_ptr() as i32;
                                                  let len1 = vec1.len() as i32;
                                                  let vec2 = template_id0;
                                                  let ptr2 = vec2.as_ptr() as i32;
                                                  let len2 = vec2.len() as i32;
                                                  
                                                  (0i32, ptr1, len1, ptr2, len2)
                                                },
                                                LeafTimelineNode::TlHasExistedWithin(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id3, template_id:template_id3, } = e;
                                                  let vec4 = worker_id3;
                                                  let ptr4 = vec4.as_ptr() as i32;
                                                  let len4 = vec4.len() as i32;
                                                  let vec5 = template_id3;
                                                  let ptr5 = vec5.as_ptr() as i32;
                                                  let len5 = vec5.len() as i32;
                                                  
                                                  (1i32, ptr4, len4, ptr5, len5)
                                                },
                                                LeafTimelineNode::TlLatestEventToState(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id6, template_id:template_id6, } = e;
                                                  let vec7 = worker_id6;
                                                  let ptr7 = vec7.as_ptr() as i32;
                                                  let len7 = vec7.len() as i32;
                                                  let vec8 = template_id6;
                                                  let ptr8 = vec8.as_ptr() as i32;
                                                  let len8 = vec8.len() as i32;
                                                  
                                                  (2i32, ptr7, len7, ptr8, len8)
                                                },
                                              };
                                              
                                              (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                                            },
                                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                              let (result34_0,result34_1,result34_2,result34_3,result34_4,) = match e {
                                                DerivedTimelineNode::EqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id10, template_id:template_id10, } = e;
                                                  let vec11 = worker_id10;
                                                  let ptr11 = vec11.as_ptr() as i32;
                                                  let len11 = vec11.len() as i32;
                                                  let vec12 = template_id10;
                                                  let ptr12 = vec12.as_ptr() as i32;
                                                  let len12 = vec12.len() as i32;
                                                  
                                                  (0i32, ptr11, len11, ptr12, len12)
                                                },
                                                DerivedTimelineNode::GreaterThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id13, template_id:template_id13, } = e;
                                                  let vec14 = worker_id13;
                                                  let ptr14 = vec14.as_ptr() as i32;
                                                  let len14 = vec14.len() as i32;
                                                  let vec15 = template_id13;
                                                  let ptr15 = vec15.as_ptr() as i32;
                                                  let len15 = vec15.len() as i32;
                                                  
                                                  (1i32, ptr14, len14, ptr15, len15)
                                                },
                                                DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id16, template_id:template_id16, } = e;
                                                  let vec17 = worker_id16;
                                                  let ptr17 = vec17.as_ptr() as i32;
                                                  let len17 = vec17.len() as i32;
                                                  let vec18 = template_id16;
                                                  let ptr18 = vec18.as_ptr() as i32;
                                                  let len18 = vec18.len() as i32;
                                                  
                                                  (2i32, ptr17, len17, ptr18, len18)
                                                },
                                                DerivedTimelineNode::LessThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id19, template_id:template_id19, } = e;
                                                  let vec20 = worker_id19;
                                                  let ptr20 = vec20.as_ptr() as i32;
                                                  let len20 = vec20.len() as i32;
                                                  let vec21 = template_id19;
                                                  let ptr21 = vec21.as_ptr() as i32;
                                                  let len21 = vec21.len() as i32;
                                                  
                                                  (3i32, ptr20, len20, ptr21, len21)
                                                },
                                                DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id22, template_id:template_id22, } = e;
                                                  let vec23 = worker_id22;
                                                  let ptr23 = vec23.as_ptr() as i32;
                                                  let len23 = vec23.len() as i32;
                                                  let vec24 = template_id22;
                                                  let ptr24 = vec24.as_ptr() as i32;
                                                  let len24 = vec24.len() as i32;
                                                  
                                                  (4i32, ptr23, len23, ptr24, len24)
                                                },
                                                DerivedTimelineNode::And(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id25, template_id:template_id25, } = e;
                                                  let vec26 = worker_id25;
                                                  let ptr26 = vec26.as_ptr() as i32;
                                                  let len26 = vec26.len() as i32;
                                                  let vec27 = template_id25;
                                                  let ptr27 = vec27.as_ptr() as i32;
                                                  let len27 = vec27.len() as i32;
                                                  
                                                  (5i32, ptr26, len26, ptr27, len27)
                                                },
                                                DerivedTimelineNode::Or(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id28, template_id:template_id28, } = e;
                                                  let vec29 = worker_id28;
                                                  let ptr29 = vec29.as_ptr() as i32;
                                                  let len29 = vec29.len() as i32;
                                                  let vec30 = template_id28;
                                                  let ptr30 = vec30.as_ptr() as i32;
                                                  let len30 = vec30.len() as i32;
                                                  
                                                  (6i32, ptr29, len29, ptr30, len30)
                                                },
                                                DerivedTimelineNode::Not(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id31, template_id:template_id31, } = e;
                                                  let vec32 = worker_id31;
                                                  let ptr32 = vec32.as_ptr() as i32;
                                                  let len32 = vec32.len() as i32;
                                                  let vec33 = template_id31;
                                                  let ptr33 = vec33.as_ptr() as i32;
                                                  let len33 = vec33.len() as i32;
                                                  
                                                  (7i32, ptr32, len32, ptr33, len33)
                                                },
                                              };
                                              
                                              (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                                            },
                                          };
                                          let (result71_0,result71_1,result71_2,result71_3,result71_4,result71_5,) = match child_worker2 {
                                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                              let (result45_0,result45_1,result45_2,result45_3,result45_4,) = match e {
                                                LeafTimelineNode::TlHasExisted(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id36, template_id:template_id36, } = e;
                                                  let vec37 = worker_id36;
                                                  let ptr37 = vec37.as_ptr() as i32;
                                                  let len37 = vec37.len() as i32;
                                                  let vec38 = template_id36;
                                                  let ptr38 = vec38.as_ptr() as i32;
                                                  let len38 = vec38.len() as i32;
                                                  
                                                  (0i32, ptr37, len37, ptr38, len38)
                                                },
                                                LeafTimelineNode::TlHasExistedWithin(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id39, template_id:template_id39, } = e;
                                                  let vec40 = worker_id39;
                                                  let ptr40 = vec40.as_ptr() as i32;
                                                  let len40 = vec40.len() as i32;
                                                  let vec41 = template_id39;
                                                  let ptr41 = vec41.as_ptr() as i32;
                                                  let len41 = vec41.len() as i32;
                                                  
                                                  (1i32, ptr40, len40, ptr41, len41)
                                                },
                                                LeafTimelineNode::TlLatestEventToState(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id42, template_id:template_id42, } = e;
                                                  let vec43 = worker_id42;
                                                  let ptr43 = vec43.as_ptr() as i32;
                                                  let len43 = vec43.len() as i32;
                                                  let vec44 = template_id42;
                                                  let ptr44 = vec44.as_ptr() as i32;
                                                  let len44 = vec44.len() as i32;
                                                  
                                                  (2i32, ptr43, len43, ptr44, len44)
                                                },
                                              };
                                              
                                              (0i32, result45_0, result45_1, result45_2, result45_3, result45_4)
                                            },
                                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                              let (result70_0,result70_1,result70_2,result70_3,result70_4,) = match e {
                                                DerivedTimelineNode::EqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id46, template_id:template_id46, } = e;
                                                  let vec47 = worker_id46;
                                                  let ptr47 = vec47.as_ptr() as i32;
                                                  let len47 = vec47.len() as i32;
                                                  let vec48 = template_id46;
                                                  let ptr48 = vec48.as_ptr() as i32;
                                                  let len48 = vec48.len() as i32;
                                                  
                                                  (0i32, ptr47, len47, ptr48, len48)
                                                },
                                                DerivedTimelineNode::GreaterThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id49, template_id:template_id49, } = e;
                                                  let vec50 = worker_id49;
                                                  let ptr50 = vec50.as_ptr() as i32;
                                                  let len50 = vec50.len() as i32;
                                                  let vec51 = template_id49;
                                                  let ptr51 = vec51.as_ptr() as i32;
                                                  let len51 = vec51.len() as i32;
                                                  
                                                  (1i32, ptr50, len50, ptr51, len51)
                                                },
                                                DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id52, template_id:template_id52, } = e;
                                                  let vec53 = worker_id52;
                                                  let ptr53 = vec53.as_ptr() as i32;
                                                  let len53 = vec53.len() as i32;
                                                  let vec54 = template_id52;
                                                  let ptr54 = vec54.as_ptr() as i32;
                                                  let len54 = vec54.len() as i32;
                                                  
                                                  (2i32, ptr53, len53, ptr54, len54)
                                                },
                                                DerivedTimelineNode::LessThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id55, template_id:template_id55, } = e;
                                                  let vec56 = worker_id55;
                                                  let ptr56 = vec56.as_ptr() as i32;
                                                  let len56 = vec56.len() as i32;
                                                  let vec57 = template_id55;
                                                  let ptr57 = vec57.as_ptr() as i32;
                                                  let len57 = vec57.len() as i32;
                                                  
                                                  (3i32, ptr56, len56, ptr57, len57)
                                                },
                                                DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id58, template_id:template_id58, } = e;
                                                  let vec59 = worker_id58;
                                                  let ptr59 = vec59.as_ptr() as i32;
                                                  let len59 = vec59.len() as i32;
                                                  let vec60 = template_id58;
                                                  let ptr60 = vec60.as_ptr() as i32;
                                                  let len60 = vec60.len() as i32;
                                                  
                                                  (4i32, ptr59, len59, ptr60, len60)
                                                },
                                                DerivedTimelineNode::And(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id61, template_id:template_id61, } = e;
                                                  let vec62 = worker_id61;
                                                  let ptr62 = vec62.as_ptr() as i32;
                                                  let len62 = vec62.len() as i32;
                                                  let vec63 = template_id61;
                                                  let ptr63 = vec63.as_ptr() as i32;
                                                  let len63 = vec63.len() as i32;
                                                  
                                                  (5i32, ptr62, len62, ptr63, len63)
                                                },
                                                DerivedTimelineNode::Or(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id64, template_id:template_id64, } = e;
                                                  let vec65 = worker_id64;
                                                  let ptr65 = vec65.as_ptr() as i32;
                                                  let len65 = vec65.len() as i32;
                                                  let vec66 = template_id64;
                                                  let ptr66 = vec66.as_ptr() as i32;
                                                  let len66 = vec66.len() as i32;
                                                  
                                                  (6i32, ptr65, len65, ptr66, len66)
                                                },
                                                DerivedTimelineNode::Not(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id67, template_id:template_id67, } = e;
                                                  let vec68 = worker_id67;
                                                  let ptr68 = vec68.as_ptr() as i32;
                                                  let len68 = vec68.len() as i32;
                                                  let vec69 = template_id67;
                                                  let ptr69 = vec69.as_ptr() as i32;
                                                  let len69 = vec69.len() as i32;
                                                  
                                                  (7i32, ptr68, len68, ptr69, len69)
                                                },
                                              };
                                              
                                              (1i32, result70_0, result70_1, result70_2, result70_3, result70_4)
                                            },
                                          };
                                          let ptr72 = ret_area.as_mut_ptr() as i32;
                                          #[cfg(target_arch = "wasm32")]
                                          #[link(wasm_import_module = "timeline:timeline-processor/api")]
                                          extern "C" {
                                            #[link_name = "initialize-or"]
                                            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                                          }
                                          
                                          #[cfg(not(target_arch = "wasm32"))]
                                          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                                          wit_import(result35_0, result35_1, result35_2, result35_3, result35_4, result35_5, result71_0, result71_1, result71_2, result71_3, result71_4, result71_5, ptr72);
                                          let l73 = i32::from(*((ptr72 + 0) as *const u8));
                                          match l73 {
                                            0 => {
                                              let e = {
                                                let l74 = *((ptr72 + 4) as *const i32);
                                                let l75 = *((ptr72 + 8) as *const i32);
                                                let len76 = l75 as usize;
                                                let bytes76 = Vec::from_raw_parts(l74 as *mut _, len76, len76);
                                                
                                                wit_bindgen::rt::string_lift(bytes76)
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l77 = *((ptr72 + 4) as *const i32);
                                                let l78 = *((ptr72 + 8) as *const i32);
                                                let len79 = l78 as usize;
                                                let bytes79 = Vec::from_raw_parts(l77 as *mut _, len79, len79);
                                                
                                                wit_bindgen::rt::string_lift(bytes79)
                                              };
                                              Err(e)
                                            }
                                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                          }
                                        }
                                      }
                                      #[allow(unused_unsafe, clippy::all)]
                                      pub fn initialize_not(child_worker: &TypedTimelineResultWorker,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        unsafe {
                                          
                                          #[repr(align(4))]
                                          struct RetArea([u8; 12]);
                                          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                          let (result35_0,result35_1,result35_2,result35_3,result35_4,result35_5,) = match child_worker {
                                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                              let (result9_0,result9_1,result9_2,result9_3,result9_4,) = match e {
                                                LeafTimelineNode::TlHasExisted(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id0, template_id:template_id0, } = e;
                                                  let vec1 = worker_id0;
                                                  let ptr1 = vec1.as_ptr() as i32;
                                                  let len1 = vec1.len() as i32;
                                                  let vec2 = template_id0;
                                                  let ptr2 = vec2.as_ptr() as i32;
                                                  let len2 = vec2.len() as i32;
                                                  
                                                  (0i32, ptr1, len1, ptr2, len2)
                                                },
                                                LeafTimelineNode::TlHasExistedWithin(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id3, template_id:template_id3, } = e;
                                                  let vec4 = worker_id3;
                                                  let ptr4 = vec4.as_ptr() as i32;
                                                  let len4 = vec4.len() as i32;
                                                  let vec5 = template_id3;
                                                  let ptr5 = vec5.as_ptr() as i32;
                                                  let len5 = vec5.len() as i32;
                                                  
                                                  (1i32, ptr4, len4, ptr5, len5)
                                                },
                                                LeafTimelineNode::TlLatestEventToState(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id6, template_id:template_id6, } = e;
                                                  let vec7 = worker_id6;
                                                  let ptr7 = vec7.as_ptr() as i32;
                                                  let len7 = vec7.len() as i32;
                                                  let vec8 = template_id6;
                                                  let ptr8 = vec8.as_ptr() as i32;
                                                  let len8 = vec8.len() as i32;
                                                  
                                                  (2i32, ptr7, len7, ptr8, len8)
                                                },
                                              };
                                              
                                              (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                                            },
                                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                              let (result34_0,result34_1,result34_2,result34_3,result34_4,) = match e {
                                                DerivedTimelineNode::EqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id10, template_id:template_id10, } = e;
                                                  let vec11 = worker_id10;
                                                  let ptr11 = vec11.as_ptr() as i32;
                                                  let len11 = vec11.len() as i32;
                                                  let vec12 = template_id10;
                                                  let ptr12 = vec12.as_ptr() as i32;
                                                  let len12 = vec12.len() as i32;
                                                  
                                                  (0i32, ptr11, len11, ptr12, len12)
                                                },
                                                DerivedTimelineNode::GreaterThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id13, template_id:template_id13, } = e;
                                                  let vec14 = worker_id13;
                                                  let ptr14 = vec14.as_ptr() as i32;
                                                  let len14 = vec14.len() as i32;
                                                  let vec15 = template_id13;
                                                  let ptr15 = vec15.as_ptr() as i32;
                                                  let len15 = vec15.len() as i32;
                                                  
                                                  (1i32, ptr14, len14, ptr15, len15)
                                                },
                                                DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id16, template_id:template_id16, } = e;
                                                  let vec17 = worker_id16;
                                                  let ptr17 = vec17.as_ptr() as i32;
                                                  let len17 = vec17.len() as i32;
                                                  let vec18 = template_id16;
                                                  let ptr18 = vec18.as_ptr() as i32;
                                                  let len18 = vec18.len() as i32;
                                                  
                                                  (2i32, ptr17, len17, ptr18, len18)
                                                },
                                                DerivedTimelineNode::LessThan(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id19, template_id:template_id19, } = e;
                                                  let vec20 = worker_id19;
                                                  let ptr20 = vec20.as_ptr() as i32;
                                                  let len20 = vec20.len() as i32;
                                                  let vec21 = template_id19;
                                                  let ptr21 = vec21.as_ptr() as i32;
                                                  let len21 = vec21.len() as i32;
                                                  
                                                  (3i32, ptr20, len20, ptr21, len21)
                                                },
                                                DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id22, template_id:template_id22, } = e;
                                                  let vec23 = worker_id22;
                                                  let ptr23 = vec23.as_ptr() as i32;
                                                  let len23 = vec23.len() as i32;
                                                  let vec24 = template_id22;
                                                  let ptr24 = vec24.as_ptr() as i32;
                                                  let len24 = vec24.len() as i32;
                                                  
                                                  (4i32, ptr23, len23, ptr24, len24)
                                                },
                                                DerivedTimelineNode::And(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id25, template_id:template_id25, } = e;
                                                  let vec26 = worker_id25;
                                                  let ptr26 = vec26.as_ptr() as i32;
                                                  let len26 = vec26.len() as i32;
                                                  let vec27 = template_id25;
                                                  let ptr27 = vec27.as_ptr() as i32;
                                                  let len27 = vec27.len() as i32;
                                                  
                                                  (5i32, ptr26, len26, ptr27, len27)
                                                },
                                                DerivedTimelineNode::Or(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id28, template_id:template_id28, } = e;
                                                  let vec29 = worker_id28;
                                                  let ptr29 = vec29.as_ptr() as i32;
                                                  let len29 = vec29.len() as i32;
                                                  let vec30 = template_id28;
                                                  let ptr30 = vec30.as_ptr() as i32;
                                                  let len30 = vec30.len() as i32;
                                                  
                                                  (6i32, ptr29, len29, ptr30, len30)
                                                },
                                                DerivedTimelineNode::Not(e) => {
                                                  let TimelineResultWorker{ worker_id:worker_id31, template_id:template_id31, } = e;
                                                  let vec32 = worker_id31;
                                                  let ptr32 = vec32.as_ptr() as i32;
                                                  let len32 = vec32.len() as i32;
                                                  let vec33 = template_id31;
                                                  let ptr33 = vec33.as_ptr() as i32;
                                                  let len33 = vec33.len() as i32;
                                                  
                                                  (7i32, ptr32, len32, ptr33, len33)
                                                },
                                              };
                                              
                                              (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                                            },
                                          };
                                          let ptr36 = ret_area.as_mut_ptr() as i32;
                                          #[cfg(target_arch = "wasm32")]
                                          #[link(wasm_import_module = "timeline:timeline-processor/api")]
                                          extern "C" {
                                            #[link_name = "initialize-not"]
                                            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                                          }
                                          
                                          #[cfg(not(target_arch = "wasm32"))]
                                          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                                          wit_import(result35_0, result35_1, result35_2, result35_3, result35_4, result35_5, ptr36);
                                          let l37 = i32::from(*((ptr36 + 0) as *const u8));
                                          match l37 {
                                            0 => {
                                              let e = {
                                                let l38 = *((ptr36 + 4) as *const i32);
                                                let l39 = *((ptr36 + 8) as *const i32);
                                                let len40 = l39 as usize;
                                                let bytes40 = Vec::from_raw_parts(l38 as *mut _, len40, len40);
                                                
                                                wit_bindgen::rt::string_lift(bytes40)
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l41 = *((ptr36 + 4) as *const i32);
                                                let l42 = *((ptr36 + 8) as *const i32);
                                                let len43 = l42 as usize;
                                                let bytes43 = Vec::from_raw_parts(l41 as *mut _, len43, len43);
                                                
                                                wit_bindgen::rt::string_lift(bytes43)
                                              };
                                              Err(e)
                                            }
                                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                          }
                                        }
                                      }
                                      #[allow(unused_unsafe, clippy::all)]
                                      pub fn get_timeline_result(t1: u64,) -> Result<TimelineResult,wit_bindgen::rt::string::String>{
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        unsafe {
                                          
                                          #[repr(align(4))]
                                          struct RetArea([u8; 12]);
                                          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                                          let ptr0 = ret_area.as_mut_ptr() as i32;
                                          #[cfg(target_arch = "wasm32")]
                                          #[link(wasm_import_module = "timeline:timeline-processor/api")]
                                          extern "C" {
                                            #[link_name = "get-timeline-result"]
                                            fn wit_import(_: i64, _: i32, );
                                          }
                                          
                                          #[cfg(not(target_arch = "wasm32"))]
                                          fn wit_import(_: i64, _: i32, ){ unreachable!() }
                                          wit_import(wit_bindgen::rt::as_i64(t1), ptr0);
                                          let l1 = i32::from(*((ptr0 + 0) as *const u8));
                                          match l1 {
                                            0 => {
                                              let e = {
                                                let l2 = *((ptr0 + 4) as *const i32);
                                                let l3 = *((ptr0 + 8) as *const i32);
                                                let base15 = l2;
                                                let len15 = l3;
                                                let mut result15 = Vec::with_capacity(len15 as usize);
                                                for i in 0..len15 {
                                                  let base = base15 + i * 40;
                                                  let e15 = {
                                                    let l4 = *((base + 0) as *const i64);
                                                    let l5 = i32::from(*((base + 8) as *const u8));
                                                    let l7 = i32::from(*((base + 24) as *const u8));
                                                    use super::super::super::timeline::event_processor::api::EventValue as V14;
                                                    let v14 = match l7 {
                                                      0 => {
                                                        let e14 = {
                                                          let l8 = *((base + 32) as *const i32);
                                                          let l9 = *((base + 36) as *const i32);
                                                          let len10 = l9 as usize;
                                                          let bytes10 = Vec::from_raw_parts(l8 as *mut _, len10, len10);
                                                          
                                                          wit_bindgen::rt::string_lift(bytes10)
                                                        };
                                                        V14::StringValue(e14)
                                                      }
                                                      1 => {
                                                        let e14 = {
                                                          let l11 = *((base + 32) as *const i64);
                                                          
                                                          l11
                                                        };
                                                        V14::IntValue(e14)
                                                      }
                                                      2 => {
                                                        let e14 = {
                                                          let l12 = *((base + 32) as *const f64);
                                                          
                                                          l12
                                                        };
                                                        V14::FloatValue(e14)
                                                      }
                                                      n => {
                                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                        let e14 = {
                                                          let l13 = i32::from(*((base + 32) as *const u8));
                                                          
                                                          wit_bindgen::rt::bool_lift(l13 as u8)
                                                        };
                                                        V14::BoolValue(e14)
                                                      }
                                                    };
                                                    
                                                    super::super::super::timeline::event_processor::api::TimelineResultPoint{
                                                      time_period: super::super::super::timeline::event_processor::api::TimePeriod{
                                                        t1: l4 as u64,
                                                        t2: match l5 {
                                                          0 => None,
                                                          1 => {
                                                            let e = {
                                                              let l6 = *((base + 16) as *const i64);
                                                              
                                                              l6 as u64
                                                            };
                                                            Some(e)
                                                          }
                                                          _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                                        },
                                                      },
                                                      value: v14,
                                                    }
                                                  };
                                                  result15.push(e15);
                                                }
                                                wit_bindgen::rt::dealloc(base15, (len15 as usize) * 40, 8);
                                                
                                                super::super::super::timeline::event_processor::api::TimelineResult{
                                                  results: result15,
                                                }
                                              };
                                              Ok(e)
                                            }
                                            1 => {
                                              let e = {
                                                let l16 = *((ptr0 + 4) as *const i32);
                                                let l17 = *((ptr0 + 8) as *const i32);
                                                let len18 = l17 as usize;
                                                let bytes18 = Vec::from_raw_parts(l16 as *mut _, len18, len18);
                                                
                                                wit_bindgen::rt::string_lift(bytes18)
                                              };
                                              Err(e)
                                            }
                                            _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                          }
                                        }
                                      }
                                      
                                    }
                                    
                                  }
                                }
                                pub mod exports {
                                  pub mod timeline {
                                    pub mod driver {
                                      
                                      #[allow(clippy::all)]
                                      pub mod api {
                                        #[used]
                                        #[doc(hidden)]
                                        #[cfg(target_arch = "wasm32")]
                                        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
                                        pub type WorkerDetails = super::super::super::super::timeline::core::api::WorkerDetails;
                                        const _: () = {
                                          
                                          #[doc(hidden)]
                                          #[export_name = "timeline:driver/api#run"]
                                          #[allow(non_snake_case)]
                                          unsafe extern "C" fn __export_run(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,) -> i32 {
                                            #[allow(unused_imports)]
                                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                            
                                            // Before executing any other code, use this function to run all static
                                            // constructors, if they have not yet been run. This is a hack required
                                            // to work around wasi-libc ctors calling import functions to initialize
                                            // the environment.
                                            //
                                            // This functionality will be removed once rust 1.69.0 is stable, at which
                                            // point wasi-libc will no longer have this behavior.
                                            //
                                            // See
                                            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                                            // for more details.
                                            #[cfg(target_arch="wasm32")]
                                            wit_bindgen::rt::run_ctors_once();
                                            
                                            let len0 = arg1 as usize;
                                            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
                                            let len1 = arg3 as usize;
                                            let bytes1 = Vec::from_raw_parts(arg2 as *mut _, len1, len1);
                                            let len2 = arg5 as usize;
                                            let bytes2 = Vec::from_raw_parts(arg4 as *mut _, len2, len2);
                                            let result3 = <_GuestImpl as Guest>::run(wit_bindgen::rt::string_lift(bytes0), wit_bindgen::rt::string_lift(bytes1), wit_bindgen::rt::string_lift(bytes2));
                                            let ptr4 = _RET_AREA.0.as_mut_ptr() as i32;
                                            match result3 {
                                              Ok(e) => { {
                                                *((ptr4 + 0) as *mut u8) = (0i32) as u8;
                                                let super::super::super::super::timeline::core::api::WorkerDetails{ event_processor_workers:event_processor_workers5, result_worker:result_worker5, } = e;
                                                let vec42 = event_processor_workers5;
                                                let len42 = vec42.len() as i32;
                                                let layout42 = alloc::Layout::from_size_align_unchecked(vec42.len() * 24, 4);
                                                let result42 = if layout42.size() != 0
                                                {
                                                  let ptr = alloc::alloc(layout42);
                                                  if ptr.is_null()
                                                  {
                                                    alloc::handle_alloc_error(layout42);
                                                  }
                                                  ptr
                                                }else {{
                                                  ::core::ptr::null_mut()
                                                }};
                                                for (i, e) in vec42.into_iter().enumerate() {
                                                  let base = result42 as i32 + (i as i32) * 24;
                                                  {
                                                    use super::super::super::super::timeline::timeline_processor::api::TypedTimelineResultWorker as V41;
                                                    match e {
                                                      V41::LeafTimeline(e) => {
                                                        *((base + 0) as *mut u8) = (0i32) as u8;
                                                        use super::super::super::super::timeline::timeline_processor::api::LeafTimelineNode as V15;
                                                        match e {
                                                          V15::TlHasExisted(e) => {
                                                            *((base + 4) as *mut u8) = (0i32) as u8;
                                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id6, template_id:template_id6, } = e;
                                                            let vec7 = (worker_id6.into_bytes()).into_boxed_slice();
                                                            let ptr7 = vec7.as_ptr() as i32;
                                                            let len7 = vec7.len() as i32;
                                                            ::core::mem::forget(vec7);
                                                            *((base + 12) as *mut i32) = len7;
                                                            *((base + 8) as *mut i32) = ptr7;
                                                            let vec8 = (template_id6.into_bytes()).into_boxed_slice();
                                                            let ptr8 = vec8.as_ptr() as i32;
                                                            let len8 = vec8.len() as i32;
                                                            ::core::mem::forget(vec8);
                                                            *((base + 20) as *mut i32) = len8;
                                                            *((base + 16) as *mut i32) = ptr8;
                                                          },
                                                          V15::TlHasExistedWithin(e) => {
                                                            *((base + 4) as *mut u8) = (1i32) as u8;
                                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id9, template_id:template_id9, } = e;
                                                            let vec10 = (worker_id9.into_bytes()).into_boxed_slice();
                                                            let ptr10 = vec10.as_ptr() as i32;
                                                            let len10 = vec10.len() as i32;
                                                            ::core::mem::forget(vec10);
                                                            *((base + 12) as *mut i32) = len10;
                                                            *((base + 8) as *mut i32) = ptr10;
                                                            let vec11 = (template_id9.into_bytes()).into_boxed_slice();
                                                            let ptr11 = vec11.as_ptr() as i32;
                                                            let len11 = vec11.len() as i32;
                                                            ::core::mem::forget(vec11);
                                                            *((base + 20) as *mut i32) = len11;
                                                            *((base + 16) as *mut i32) = ptr11;
                                                          },
                                                          V15::TlLatestEventToState(e) => {
                                                            *((base + 4) as *mut u8) = (2i32) as u8;
                                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id12, template_id:template_id12, } = e;
                                                            let vec13 = (worker_id12.into_bytes()).into_boxed_slice();
                                                            let ptr13 = vec13.as_ptr() as i32;
                                                            let len13 = vec13.len() as i32;
                                                            ::core::mem::forget(vec13);
                                                            *((base + 12) as *mut i32) = len13;
                                                            *((base + 8) as *mut i32) = ptr13;
                                                            let vec14 = (template_id12.into_bytes()).into_boxed_slice();
                                                            let ptr14 = vec14.as_ptr() as i32;
                                                            let len14 = vec14.len() as i32;
                                                            ::core::mem::forget(vec14);
                                                            *((base + 20) as *mut i32) = len14;
                                                            *((base + 16) as *mut i32) = ptr14;
                                                          },
                                                        }
                                                      },
                                                      V41::DerivedTimeline(e) => {
                                                        *((base + 0) as *mut u8) = (1i32) as u8;
                                                        use super::super::super::super::timeline::timeline_processor::api::DerivedTimelineNode as V40;
                                                        match e {
                                                          V40::EqualTo(e) => {
                                                            *((base + 4) as *mut u8) = (0i32) as u8;
                                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id16, template_id:template_id16, } = e;
                                                            let vec17 = (worker_id16.into_bytes()).into_boxed_slice();
                                                            let ptr17 = vec17.as_ptr() as i32;
                                                            let len17 = vec17.len() as i32;
                                                            ::core::mem::forget(vec17);
                                                            *((base + 12) as *mut i32) = len17;
                                                            *((base + 8) as *mut i32) = ptr17;
                                                            let vec18 = (template_id16.into_bytes()).into_boxed_slice();
                                                            let ptr18 = vec18.as_ptr() as i32;
                                                            let len18 = vec18.len() as i32;
                                                            ::core::mem::forget(vec18);
                                                            *((base + 20) as *mut i32) = len18;
                                                            *((base + 16) as *mut i32) = ptr18;
                                                          },
                                                          V40::GreaterThan(e) => {
                                                            *((base + 4) as *mut u8) = (1i32) as u8;
                                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id19, template_id:template_id19, } = e;
                                                            let vec20 = (worker_id19.into_bytes()).into_boxed_slice();
                                                            let ptr20 = vec20.as_ptr() as i32;
                                                            let len20 = vec20.len() as i32;
                                                            ::core::mem::forget(vec20);
                                                            *((base + 12) as *mut i32) = len20;
                                                            *((base + 8) as *mut i32) = ptr20;
                                                            let vec21 = (template_id19.into_bytes()).into_boxed_slice();
                                                            let ptr21 = vec21.as_ptr() as i32;
                                                            let len21 = vec21.len() as i32;
                                                            ::core::mem::forget(vec21);
                                                            *((base + 20) as *mut i32) = len21;
                                                            *((base + 16) as *mut i32) = ptr21;
                                                          },
                                                          V40::GreaterThanOrEqualTo(e) => {
                                                            *((base + 4) as *mut u8) = (2i32) as u8;
                                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id22, template_id:template_id22, } = e;
                                                            let vec23 = (worker_id22.into_bytes()).into_boxed_slice();
                                                            let ptr23 = vec23.as_ptr() as i32;
                                                            let len23 = vec23.len() as i32;
                                                            ::core::mem::forget(vec23);
                                                            *((base + 12) as *mut i32) = len23;
                                                            *((base + 8) as *mut i32) = ptr23;
                                                            let vec24 = (template_id22.into_bytes()).into_boxed_slice();
                                                            let ptr24 = vec24.as_ptr() as i32;
                                                            let len24 = vec24.len() as i32;
                                                            ::core::mem::forget(vec24);
                                                            *((base + 20) as *mut i32) = len24;
                                                            *((base + 16) as *mut i32) = ptr24;
                                                          },
                                                          V40::LessThan(e) => {
                                                            *((base + 4) as *mut u8) = (3i32) as u8;
                                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id25, template_id:template_id25, } = e;
                                                            let vec26 = (worker_id25.into_bytes()).into_boxed_slice();
                                                            let ptr26 = vec26.as_ptr() as i32;
                                                            let len26 = vec26.len() as i32;
                                                            ::core::mem::forget(vec26);
                                                            *((base + 12) as *mut i32) = len26;
                                                            *((base + 8) as *mut i32) = ptr26;
                                                            let vec27 = (template_id25.into_bytes()).into_boxed_slice();
                                                            let ptr27 = vec27.as_ptr() as i32;
                                                            let len27 = vec27.len() as i32;
                                                            ::core::mem::forget(vec27);
                                                            *((base + 20) as *mut i32) = len27;
                                                            *((base + 16) as *mut i32) = ptr27;
                                                          },
                                                          V40::LessThanOrEqualTo(e) => {
                                                            *((base + 4) as *mut u8) = (4i32) as u8;
                                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id28, template_id:template_id28, } = e;
                                                            let vec29 = (worker_id28.into_bytes()).into_boxed_slice();
                                                            let ptr29 = vec29.as_ptr() as i32;
                                                            let len29 = vec29.len() as i32;
                                                            ::core::mem::forget(vec29);
                                                            *((base + 12) as *mut i32) = len29;
                                                            *((base + 8) as *mut i32) = ptr29;
                                                            let vec30 = (template_id28.into_bytes()).into_boxed_slice();
                                                            let ptr30 = vec30.as_ptr() as i32;
                                                            let len30 = vec30.len() as i32;
                                                            ::core::mem::forget(vec30);
                                                            *((base + 20) as *mut i32) = len30;
                                                            *((base + 16) as *mut i32) = ptr30;
                                                          },
                                                          V40::And(e) => {
                                                            *((base + 4) as *mut u8) = (5i32) as u8;
                                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id31, template_id:template_id31, } = e;
                                                            let vec32 = (worker_id31.into_bytes()).into_boxed_slice();
                                                            let ptr32 = vec32.as_ptr() as i32;
                                                            let len32 = vec32.len() as i32;
                                                            ::core::mem::forget(vec32);
                                                            *((base + 12) as *mut i32) = len32;
                                                            *((base + 8) as *mut i32) = ptr32;
                                                            let vec33 = (template_id31.into_bytes()).into_boxed_slice();
                                                            let ptr33 = vec33.as_ptr() as i32;
                                                            let len33 = vec33.len() as i32;
                                                            ::core::mem::forget(vec33);
                                                            *((base + 20) as *mut i32) = len33;
                                                            *((base + 16) as *mut i32) = ptr33;
                                                          },
                                                          V40::Or(e) => {
                                                            *((base + 4) as *mut u8) = (6i32) as u8;
                                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id34, template_id:template_id34, } = e;
                                                            let vec35 = (worker_id34.into_bytes()).into_boxed_slice();
                                                            let ptr35 = vec35.as_ptr() as i32;
                                                            let len35 = vec35.len() as i32;
                                                            ::core::mem::forget(vec35);
                                                            *((base + 12) as *mut i32) = len35;
                                                            *((base + 8) as *mut i32) = ptr35;
                                                            let vec36 = (template_id34.into_bytes()).into_boxed_slice();
                                                            let ptr36 = vec36.as_ptr() as i32;
                                                            let len36 = vec36.len() as i32;
                                                            ::core::mem::forget(vec36);
                                                            *((base + 20) as *mut i32) = len36;
                                                            *((base + 16) as *mut i32) = ptr36;
                                                          },
                                                          V40::Not(e) => {
                                                            *((base + 4) as *mut u8) = (7i32) as u8;
                                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id37, template_id:template_id37, } = e;
                                                            let vec38 = (worker_id37.into_bytes()).into_boxed_slice();
                                                            let ptr38 = vec38.as_ptr() as i32;
                                                            let len38 = vec38.len() as i32;
                                                            ::core::mem::forget(vec38);
                                                            *((base + 12) as *mut i32) = len38;
                                                            *((base + 8) as *mut i32) = ptr38;
                                                            let vec39 = (template_id37.into_bytes()).into_boxed_slice();
                                                            let ptr39 = vec39.as_ptr() as i32;
                                                            let len39 = vec39.len() as i32;
                                                            ::core::mem::forget(vec39);
                                                            *((base + 20) as *mut i32) = len39;
                                                            *((base + 16) as *mut i32) = ptr39;
                                                          },
                                                        }
                                                      },
                                                    }
                                                  }
                                                }
                                                *((ptr4 + 8) as *mut i32) = len42;
                                                *((ptr4 + 4) as *mut i32) = result42 as i32;
                                                use super::super::super::super::timeline::timeline_processor::api::TypedTimelineResultWorker as V78;
                                                match result_worker5 {
                                                  V78::LeafTimeline(e) => {
                                                    *((ptr4 + 12) as *mut u8) = (0i32) as u8;
                                                    use super::super::super::super::timeline::timeline_processor::api::LeafTimelineNode as V52;
                                                    match e {
                                                      V52::TlHasExisted(e) => {
                                                        *((ptr4 + 16) as *mut u8) = (0i32) as u8;
                                                        let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id43, template_id:template_id43, } = e;
                                                        let vec44 = (worker_id43.into_bytes()).into_boxed_slice();
                                                        let ptr44 = vec44.as_ptr() as i32;
                                                        let len44 = vec44.len() as i32;
                                                        ::core::mem::forget(vec44);
                                                        *((ptr4 + 24) as *mut i32) = len44;
                                                        *((ptr4 + 20) as *mut i32) = ptr44;
                                                        let vec45 = (template_id43.into_bytes()).into_boxed_slice();
                                                        let ptr45 = vec45.as_ptr() as i32;
                                                        let len45 = vec45.len() as i32;
                                                        ::core::mem::forget(vec45);
                                                        *((ptr4 + 32) as *mut i32) = len45;
                                                        *((ptr4 + 28) as *mut i32) = ptr45;
                                                      },
                                                      V52::TlHasExistedWithin(e) => {
                                                        *((ptr4 + 16) as *mut u8) = (1i32) as u8;
                                                        let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id46, template_id:template_id46, } = e;
                                                        let vec47 = (worker_id46.into_bytes()).into_boxed_slice();
                                                        let ptr47 = vec47.as_ptr() as i32;
                                                        let len47 = vec47.len() as i32;
                                                        ::core::mem::forget(vec47);
                                                        *((ptr4 + 24) as *mut i32) = len47;
                                                        *((ptr4 + 20) as *mut i32) = ptr47;
                                                        let vec48 = (template_id46.into_bytes()).into_boxed_slice();
                                                        let ptr48 = vec48.as_ptr() as i32;
                                                        let len48 = vec48.len() as i32;
                                                        ::core::mem::forget(vec48);
                                                        *((ptr4 + 32) as *mut i32) = len48;
                                                        *((ptr4 + 28) as *mut i32) = ptr48;
                                                      },
                                                      V52::TlLatestEventToState(e) => {
                                                        *((ptr4 + 16) as *mut u8) = (2i32) as u8;
                                                        let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id49, template_id:template_id49, } = e;
                                                        let vec50 = (worker_id49.into_bytes()).into_boxed_slice();
                                                        let ptr50 = vec50.as_ptr() as i32;
                                                        let len50 = vec50.len() as i32;
                                                        ::core::mem::forget(vec50);
                                                        *((ptr4 + 24) as *mut i32) = len50;
                                                        *((ptr4 + 20) as *mut i32) = ptr50;
                                                        let vec51 = (template_id49.into_bytes()).into_boxed_slice();
                                                        let ptr51 = vec51.as_ptr() as i32;
                                                        let len51 = vec51.len() as i32;
                                                        ::core::mem::forget(vec51);
                                                        *((ptr4 + 32) as *mut i32) = len51;
                                                        *((ptr4 + 28) as *mut i32) = ptr51;
                                                      },
                                                    }
                                                  },
                                                  V78::DerivedTimeline(e) => {
                                                    *((ptr4 + 12) as *mut u8) = (1i32) as u8;
                                                    use super::super::super::super::timeline::timeline_processor::api::DerivedTimelineNode as V77;
                                                    match e {
                                                      V77::EqualTo(e) => {
                                                        *((ptr4 + 16) as *mut u8) = (0i32) as u8;
                                                        let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id53, template_id:template_id53, } = e;
                                                        let vec54 = (worker_id53.into_bytes()).into_boxed_slice();
                                                        let ptr54 = vec54.as_ptr() as i32;
                                                        let len54 = vec54.len() as i32;
                                                        ::core::mem::forget(vec54);
                                                        *((ptr4 + 24) as *mut i32) = len54;
                                                        *((ptr4 + 20) as *mut i32) = ptr54;
                                                        let vec55 = (template_id53.into_bytes()).into_boxed_slice();
                                                        let ptr55 = vec55.as_ptr() as i32;
                                                        let len55 = vec55.len() as i32;
                                                        ::core::mem::forget(vec55);
                                                        *((ptr4 + 32) as *mut i32) = len55;
                                                        *((ptr4 + 28) as *mut i32) = ptr55;
                                                      },
                                                      V77::GreaterThan(e) => {
                                                        *((ptr4 + 16) as *mut u8) = (1i32) as u8;
                                                        let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id56, template_id:template_id56, } = e;
                                                        let vec57 = (worker_id56.into_bytes()).into_boxed_slice();
                                                        let ptr57 = vec57.as_ptr() as i32;
                                                        let len57 = vec57.len() as i32;
                                                        ::core::mem::forget(vec57);
                                                        *((ptr4 + 24) as *mut i32) = len57;
                                                        *((ptr4 + 20) as *mut i32) = ptr57;
                                                        let vec58 = (template_id56.into_bytes()).into_boxed_slice();
                                                        let ptr58 = vec58.as_ptr() as i32;
                                                        let len58 = vec58.len() as i32;
                                                        ::core::mem::forget(vec58);
                                                        *((ptr4 + 32) as *mut i32) = len58;
                                                        *((ptr4 + 28) as *mut i32) = ptr58;
                                                      },
                                                      V77::GreaterThanOrEqualTo(e) => {
                                                        *((ptr4 + 16) as *mut u8) = (2i32) as u8;
                                                        let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id59, template_id:template_id59, } = e;
                                                        let vec60 = (worker_id59.into_bytes()).into_boxed_slice();
                                                        let ptr60 = vec60.as_ptr() as i32;
                                                        let len60 = vec60.len() as i32;
                                                        ::core::mem::forget(vec60);
                                                        *((ptr4 + 24) as *mut i32) = len60;
                                                        *((ptr4 + 20) as *mut i32) = ptr60;
                                                        let vec61 = (template_id59.into_bytes()).into_boxed_slice();
                                                        let ptr61 = vec61.as_ptr() as i32;
                                                        let len61 = vec61.len() as i32;
                                                        ::core::mem::forget(vec61);
                                                        *((ptr4 + 32) as *mut i32) = len61;
                                                        *((ptr4 + 28) as *mut i32) = ptr61;
                                                      },
                                                      V77::LessThan(e) => {
                                                        *((ptr4 + 16) as *mut u8) = (3i32) as u8;
                                                        let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id62, template_id:template_id62, } = e;
                                                        let vec63 = (worker_id62.into_bytes()).into_boxed_slice();
                                                        let ptr63 = vec63.as_ptr() as i32;
                                                        let len63 = vec63.len() as i32;
                                                        ::core::mem::forget(vec63);
                                                        *((ptr4 + 24) as *mut i32) = len63;
                                                        *((ptr4 + 20) as *mut i32) = ptr63;
                                                        let vec64 = (template_id62.into_bytes()).into_boxed_slice();
                                                        let ptr64 = vec64.as_ptr() as i32;
                                                        let len64 = vec64.len() as i32;
                                                        ::core::mem::forget(vec64);
                                                        *((ptr4 + 32) as *mut i32) = len64;
                                                        *((ptr4 + 28) as *mut i32) = ptr64;
                                                      },
                                                      V77::LessThanOrEqualTo(e) => {
                                                        *((ptr4 + 16) as *mut u8) = (4i32) as u8;
                                                        let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id65, template_id:template_id65, } = e;
                                                        let vec66 = (worker_id65.into_bytes()).into_boxed_slice();
                                                        let ptr66 = vec66.as_ptr() as i32;
                                                        let len66 = vec66.len() as i32;
                                                        ::core::mem::forget(vec66);
                                                        *((ptr4 + 24) as *mut i32) = len66;
                                                        *((ptr4 + 20) as *mut i32) = ptr66;
                                                        let vec67 = (template_id65.into_bytes()).into_boxed_slice();
                                                        let ptr67 = vec67.as_ptr() as i32;
                                                        let len67 = vec67.len() as i32;
                                                        ::core::mem::forget(vec67);
                                                        *((ptr4 + 32) as *mut i32) = len67;
                                                        *((ptr4 + 28) as *mut i32) = ptr67;
                                                      },
                                                      V77::And(e) => {
                                                        *((ptr4 + 16) as *mut u8) = (5i32) as u8;
                                                        let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id68, template_id:template_id68, } = e;
                                                        let vec69 = (worker_id68.into_bytes()).into_boxed_slice();
                                                        let ptr69 = vec69.as_ptr() as i32;
                                                        let len69 = vec69.len() as i32;
                                                        ::core::mem::forget(vec69);
                                                        *((ptr4 + 24) as *mut i32) = len69;
                                                        *((ptr4 + 20) as *mut i32) = ptr69;
                                                        let vec70 = (template_id68.into_bytes()).into_boxed_slice();
                                                        let ptr70 = vec70.as_ptr() as i32;
                                                        let len70 = vec70.len() as i32;
                                                        ::core::mem::forget(vec70);
                                                        *((ptr4 + 32) as *mut i32) = len70;
                                                        *((ptr4 + 28) as *mut i32) = ptr70;
                                                      },
                                                      V77::Or(e) => {
                                                        *((ptr4 + 16) as *mut u8) = (6i32) as u8;
                                                        let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id71, template_id:template_id71, } = e;
                                                        let vec72 = (worker_id71.into_bytes()).into_boxed_slice();
                                                        let ptr72 = vec72.as_ptr() as i32;
                                                        let len72 = vec72.len() as i32;
                                                        ::core::mem::forget(vec72);
                                                        *((ptr4 + 24) as *mut i32) = len72;
                                                        *((ptr4 + 20) as *mut i32) = ptr72;
                                                        let vec73 = (template_id71.into_bytes()).into_boxed_slice();
                                                        let ptr73 = vec73.as_ptr() as i32;
                                                        let len73 = vec73.len() as i32;
                                                        ::core::mem::forget(vec73);
                                                        *((ptr4 + 32) as *mut i32) = len73;
                                                        *((ptr4 + 28) as *mut i32) = ptr73;
                                                      },
                                                      V77::Not(e) => {
                                                        *((ptr4 + 16) as *mut u8) = (7i32) as u8;
                                                        let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id74, template_id:template_id74, } = e;
                                                        let vec75 = (worker_id74.into_bytes()).into_boxed_slice();
                                                        let ptr75 = vec75.as_ptr() as i32;
                                                        let len75 = vec75.len() as i32;
                                                        ::core::mem::forget(vec75);
                                                        *((ptr4 + 24) as *mut i32) = len75;
                                                        *((ptr4 + 20) as *mut i32) = ptr75;
                                                        let vec76 = (template_id74.into_bytes()).into_boxed_slice();
                                                        let ptr76 = vec76.as_ptr() as i32;
                                                        let len76 = vec76.len() as i32;
                                                        ::core::mem::forget(vec76);
                                                        *((ptr4 + 32) as *mut i32) = len76;
                                                        *((ptr4 + 28) as *mut i32) = ptr76;
                                                      },
                                                    }
                                                  },
                                                }
                                              } },
                                              Err(e) => { {
                                                *((ptr4 + 0) as *mut u8) = (1i32) as u8;
                                                let vec79 = (e.into_bytes()).into_boxed_slice();
                                                let ptr79 = vec79.as_ptr() as i32;
                                                let len79 = vec79.len() as i32;
                                                ::core::mem::forget(vec79);
                                                *((ptr4 + 8) as *mut i32) = len79;
                                                *((ptr4 + 4) as *mut i32) = ptr79;
                                              } },
                                            };ptr4
                                          }
                                          
                                          const _: () = {
                                            #[doc(hidden)]
                                            #[export_name = "cabi_post_timeline:driver/api#run"]
                                            #[allow(non_snake_case)]
                                            unsafe extern "C" fn __post_return_run(arg0: i32,) {
                                              let l0 = i32::from(*((arg0 + 0) as *const u8));
                                              match l0 {
                                                0 => {
                                                  let l48 = *((arg0 + 4) as *const i32);
                                                  let l49 = *((arg0 + 8) as *const i32);
                                                  let base50 = l48;
                                                  let len50 = l49;
                                                  for i in 0..len50 {
                                                    let base = base50 + i *24;
                                                    {
                                                      let l1 = i32::from(*((base + 0) as *const u8));
                                                      match l1 {
                                                        0 => {
                                                          let l2 = i32::from(*((base + 4) as *const u8));
                                                          match l2 {
                                                            0 => {
                                                              let l3 = *((base + 8) as *const i32);
                                                              let l4 = *((base + 12) as *const i32);
                                                              wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                                                              let l5 = *((base + 16) as *const i32);
                                                              let l6 = *((base + 20) as *const i32);
                                                              wit_bindgen::rt::dealloc(l5, (l6) as usize, 1);
                                                            },
                                                            1 => {
                                                              let l7 = *((base + 8) as *const i32);
                                                              let l8 = *((base + 12) as *const i32);
                                                              wit_bindgen::rt::dealloc(l7, (l8) as usize, 1);
                                                              let l9 = *((base + 16) as *const i32);
                                                              let l10 = *((base + 20) as *const i32);
                                                              wit_bindgen::rt::dealloc(l9, (l10) as usize, 1);
                                                            },
                                                            _ => {
                                                              let l11 = *((base + 8) as *const i32);
                                                              let l12 = *((base + 12) as *const i32);
                                                              wit_bindgen::rt::dealloc(l11, (l12) as usize, 1);
                                                              let l13 = *((base + 16) as *const i32);
                                                              let l14 = *((base + 20) as *const i32);
                                                              wit_bindgen::rt::dealloc(l13, (l14) as usize, 1);
                                                            },
                                                          }
                                                        },
                                                        _ => {
                                                          let l15 = i32::from(*((base + 4) as *const u8));
                                                          match l15 {
                                                            0 => {
                                                              let l16 = *((base + 8) as *const i32);
                                                              let l17 = *((base + 12) as *const i32);
                                                              wit_bindgen::rt::dealloc(l16, (l17) as usize, 1);
                                                              let l18 = *((base + 16) as *const i32);
                                                              let l19 = *((base + 20) as *const i32);
                                                              wit_bindgen::rt::dealloc(l18, (l19) as usize, 1);
                                                            },
                                                            1 => {
                                                              let l20 = *((base + 8) as *const i32);
                                                              let l21 = *((base + 12) as *const i32);
                                                              wit_bindgen::rt::dealloc(l20, (l21) as usize, 1);
                                                              let l22 = *((base + 16) as *const i32);
                                                              let l23 = *((base + 20) as *const i32);
                                                              wit_bindgen::rt::dealloc(l22, (l23) as usize, 1);
                                                            },
                                                            2 => {
                                                              let l24 = *((base + 8) as *const i32);
                                                              let l25 = *((base + 12) as *const i32);
                                                              wit_bindgen::rt::dealloc(l24, (l25) as usize, 1);
                                                              let l26 = *((base + 16) as *const i32);
                                                              let l27 = *((base + 20) as *const i32);
                                                              wit_bindgen::rt::dealloc(l26, (l27) as usize, 1);
                                                            },
                                                            3 => {
                                                              let l28 = *((base + 8) as *const i32);
                                                              let l29 = *((base + 12) as *const i32);
                                                              wit_bindgen::rt::dealloc(l28, (l29) as usize, 1);
                                                              let l30 = *((base + 16) as *const i32);
                                                              let l31 = *((base + 20) as *const i32);
                                                              wit_bindgen::rt::dealloc(l30, (l31) as usize, 1);
                                                            },
                                                            4 => {
                                                              let l32 = *((base + 8) as *const i32);
                                                              let l33 = *((base + 12) as *const i32);
                                                              wit_bindgen::rt::dealloc(l32, (l33) as usize, 1);
                                                              let l34 = *((base + 16) as *const i32);
                                                              let l35 = *((base + 20) as *const i32);
                                                              wit_bindgen::rt::dealloc(l34, (l35) as usize, 1);
                                                            },
                                                            5 => {
                                                              let l36 = *((base + 8) as *const i32);
                                                              let l37 = *((base + 12) as *const i32);
                                                              wit_bindgen::rt::dealloc(l36, (l37) as usize, 1);
                                                              let l38 = *((base + 16) as *const i32);
                                                              let l39 = *((base + 20) as *const i32);
                                                              wit_bindgen::rt::dealloc(l38, (l39) as usize, 1);
                                                            },
                                                            6 => {
                                                              let l40 = *((base + 8) as *const i32);
                                                              let l41 = *((base + 12) as *const i32);
                                                              wit_bindgen::rt::dealloc(l40, (l41) as usize, 1);
                                                              let l42 = *((base + 16) as *const i32);
                                                              let l43 = *((base + 20) as *const i32);
                                                              wit_bindgen::rt::dealloc(l42, (l43) as usize, 1);
                                                            },
                                                            _ => {
                                                              let l44 = *((base + 8) as *const i32);
                                                              let l45 = *((base + 12) as *const i32);
                                                              wit_bindgen::rt::dealloc(l44, (l45) as usize, 1);
                                                              let l46 = *((base + 16) as *const i32);
                                                              let l47 = *((base + 20) as *const i32);
                                                              wit_bindgen::rt::dealloc(l46, (l47) as usize, 1);
                                                            },
                                                          }
                                                        },
                                                      }
                                                    }
                                                  }
                                                  wit_bindgen::rt::dealloc(base50, (len50 as usize) * 24, 4);
                                                  let l51 = i32::from(*((arg0 + 12) as *const u8));
                                                  match l51 {
                                                    0 => {
                                                      let l52 = i32::from(*((arg0 + 16) as *const u8));
                                                      match l52 {
                                                        0 => {
                                                          let l53 = *((arg0 + 20) as *const i32);
                                                          let l54 = *((arg0 + 24) as *const i32);
                                                          wit_bindgen::rt::dealloc(l53, (l54) as usize, 1);
                                                          let l55 = *((arg0 + 28) as *const i32);
                                                          let l56 = *((arg0 + 32) as *const i32);
                                                          wit_bindgen::rt::dealloc(l55, (l56) as usize, 1);
                                                        },
                                                        1 => {
                                                          let l57 = *((arg0 + 20) as *const i32);
                                                          let l58 = *((arg0 + 24) as *const i32);
                                                          wit_bindgen::rt::dealloc(l57, (l58) as usize, 1);
                                                          let l59 = *((arg0 + 28) as *const i32);
                                                          let l60 = *((arg0 + 32) as *const i32);
                                                          wit_bindgen::rt::dealloc(l59, (l60) as usize, 1);
                                                        },
                                                        _ => {
                                                          let l61 = *((arg0 + 20) as *const i32);
                                                          let l62 = *((arg0 + 24) as *const i32);
                                                          wit_bindgen::rt::dealloc(l61, (l62) as usize, 1);
                                                          let l63 = *((arg0 + 28) as *const i32);
                                                          let l64 = *((arg0 + 32) as *const i32);
                                                          wit_bindgen::rt::dealloc(l63, (l64) as usize, 1);
                                                        },
                                                      }
                                                    },
                                                    _ => {
                                                      let l65 = i32::from(*((arg0 + 16) as *const u8));
                                                      match l65 {
                                                        0 => {
                                                          let l66 = *((arg0 + 20) as *const i32);
                                                          let l67 = *((arg0 + 24) as *const i32);
                                                          wit_bindgen::rt::dealloc(l66, (l67) as usize, 1);
                                                          let l68 = *((arg0 + 28) as *const i32);
                                                          let l69 = *((arg0 + 32) as *const i32);
                                                          wit_bindgen::rt::dealloc(l68, (l69) as usize, 1);
                                                        },
                                                        1 => {
                                                          let l70 = *((arg0 + 20) as *const i32);
                                                          let l71 = *((arg0 + 24) as *const i32);
                                                          wit_bindgen::rt::dealloc(l70, (l71) as usize, 1);
                                                          let l72 = *((arg0 + 28) as *const i32);
                                                          let l73 = *((arg0 + 32) as *const i32);
                                                          wit_bindgen::rt::dealloc(l72, (l73) as usize, 1);
                                                        },
                                                        2 => {
                                                          let l74 = *((arg0 + 20) as *const i32);
                                                          let l75 = *((arg0 + 24) as *const i32);
                                                          wit_bindgen::rt::dealloc(l74, (l75) as usize, 1);
                                                          let l76 = *((arg0 + 28) as *const i32);
                                                          let l77 = *((arg0 + 32) as *const i32);
                                                          wit_bindgen::rt::dealloc(l76, (l77) as usize, 1);
                                                        },
                                                        3 => {
                                                          let l78 = *((arg0 + 20) as *const i32);
                                                          let l79 = *((arg0 + 24) as *const i32);
                                                          wit_bindgen::rt::dealloc(l78, (l79) as usize, 1);
                                                          let l80 = *((arg0 + 28) as *const i32);
                                                          let l81 = *((arg0 + 32) as *const i32);
                                                          wit_bindgen::rt::dealloc(l80, (l81) as usize, 1);
                                                        },
                                                        4 => {
                                                          let l82 = *((arg0 + 20) as *const i32);
                                                          let l83 = *((arg0 + 24) as *const i32);
                                                          wit_bindgen::rt::dealloc(l82, (l83) as usize, 1);
                                                          let l84 = *((arg0 + 28) as *const i32);
                                                          let l85 = *((arg0 + 32) as *const i32);
                                                          wit_bindgen::rt::dealloc(l84, (l85) as usize, 1);
                                                        },
                                                        5 => {
                                                          let l86 = *((arg0 + 20) as *const i32);
                                                          let l87 = *((arg0 + 24) as *const i32);
                                                          wit_bindgen::rt::dealloc(l86, (l87) as usize, 1);
                                                          let l88 = *((arg0 + 28) as *const i32);
                                                          let l89 = *((arg0 + 32) as *const i32);
                                                          wit_bindgen::rt::dealloc(l88, (l89) as usize, 1);
                                                        },
                                                        6 => {
                                                          let l90 = *((arg0 + 20) as *const i32);
                                                          let l91 = *((arg0 + 24) as *const i32);
                                                          wit_bindgen::rt::dealloc(l90, (l91) as usize, 1);
                                                          let l92 = *((arg0 + 28) as *const i32);
                                                          let l93 = *((arg0 + 32) as *const i32);
                                                          wit_bindgen::rt::dealloc(l92, (l93) as usize, 1);
                                                        },
                                                        _ => {
                                                          let l94 = *((arg0 + 20) as *const i32);
                                                          let l95 = *((arg0 + 24) as *const i32);
                                                          wit_bindgen::rt::dealloc(l94, (l95) as usize, 1);
                                                          let l96 = *((arg0 + 28) as *const i32);
                                                          let l97 = *((arg0 + 32) as *const i32);
                                                          wit_bindgen::rt::dealloc(l96, (l97) as usize, 1);
                                                        },
                                                      }
                                                    },
                                                  }
                                                },
                                                _ => {
                                                  let l98 = *((arg0 + 4) as *const i32);
                                                  let l99 = *((arg0 + 8) as *const i32);
                                                  wit_bindgen::rt::dealloc(l98, (l99) as usize, 1);
                                                },
                                              }
                                            }
                                          };
                                        };
                                        use super::super::super::super::super::Component as _GuestImpl;
                                        pub trait Guest {
                                          fn run(core_template_id: wit_bindgen::rt::string::String,leaf_template_id: wit_bindgen::rt::string::String,event_to_state_tempalte_id: wit_bindgen::rt::string::String,) -> Result<WorkerDetails,wit_bindgen::rt::string::String>;
                                        }
                                        
                                        #[allow(unused_imports)]
                                        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                        
                                        #[repr(align(4))]
                                        struct _RetArea([u8; 36]);
                                        static mut _RET_AREA: _RetArea = _RetArea([0; 36]);
                                        
                                      }
                                      
                                    }
                                  }
                                }
                                
                                #[cfg(target_arch = "wasm32")]
                                #[link_section = "component-type:driver"]
                                #[doc(hidden)]
                                pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 6993] = [3, 0, 6, 100, 114, 105, 118, 101, 114, 0, 97, 115, 109, 13, 0, 1, 0, 7, 207, 16, 1, 65, 14, 1, 66, 18, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 1, 111, 2, 115, 1, 1, 112, 2, 1, 114, 2, 4, 116, 105, 109, 101, 119, 5, 101, 118, 101, 110, 116, 3, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 4, 1, 107, 119, 1, 114, 2, 2, 116, 49, 119, 2, 116, 50, 6, 4, 0, 11, 116, 105, 109, 101, 45, 112, 101, 114, 105, 111, 100, 3, 0, 7, 1, 114, 2, 11, 116, 105, 109, 101, 45, 112, 101, 114, 105, 111, 100, 8, 5, 118, 97, 108, 117, 101, 1, 4, 0, 21, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 45, 112, 111, 105, 110, 116, 3, 0, 9, 1, 112, 10, 1, 114, 1, 7, 114, 101, 115, 117, 108, 116, 115, 11, 4, 0, 15, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 3, 0, 12, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 18, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 111, 112, 3, 0, 14, 1, 114, 3, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 1, 2, 111, 112, 15, 4, 0, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 16, 3, 1, 28, 116, 105, 109, 101, 108, 105, 110, 101, 58, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 97, 112, 105, 5, 0, 2, 3, 0, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 2, 3, 0, 0, 15, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 1, 66, 12, 2, 3, 2, 1, 1, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 2, 3, 2, 1, 2, 4, 0, 15, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 3, 0, 2, 1, 114, 2, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 115, 11, 116, 101, 109, 112, 108, 97, 116, 101, 45, 105, 100, 115, 4, 0, 22, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 45, 119, 111, 114, 107, 101, 114, 3, 0, 4, 1, 113, 3, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 5, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 5, 0, 24, 116, 108, 45, 108, 97, 116, 101, 115, 116, 45, 101, 118, 101, 110, 116, 45, 116, 111, 45, 115, 116, 97, 116, 101, 1, 5, 0, 4, 0, 18, 108, 101, 97, 102, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 6, 1, 113, 8, 8, 101, 113, 117, 97, 108, 45, 116, 111, 1, 5, 0, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 1, 5, 0, 24, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 111, 114, 45, 101, 113, 117, 97, 108, 45, 116, 111, 1, 5, 0, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 1, 5, 0, 21, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 111, 114, 45, 101, 113, 117, 97, 108, 45, 116, 111, 1, 5, 0, 3, 97, 110, 100, 1, 5, 0, 2, 111, 114, 1, 5, 0, 3, 110, 111, 116, 1, 5, 0, 4, 0, 21, 100, 101, 114, 105, 118, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 8, 1, 113, 2, 13, 108, 101, 97, 102, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 7, 0, 16, 100, 101, 114, 105, 118, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 9, 0, 4, 0, 28, 116, 121, 112, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 45, 119, 111, 114, 107, 101, 114, 3, 0, 10, 3, 1, 31, 116, 105, 109, 101, 108, 105, 110, 101, 58, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 97, 112, 105, 5, 3, 2, 3, 0, 0, 5, 101, 118, 101, 110, 116, 2, 3, 0, 0, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 2, 3, 0, 1, 28, 116, 121, 112, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 45, 119, 111, 114, 107, 101, 114, 1, 66, 41, 2, 3, 2, 1, 1, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 2, 3, 2, 1, 4, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 2, 3, 2, 1, 5, 4, 0, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 4, 2, 3, 2, 1, 6, 4, 0, 28, 116, 121, 112, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 45, 119, 111, 114, 107, 101, 114, 3, 0, 6, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 8, 1, 114, 2, 16, 119, 111, 114, 107, 101, 114, 45, 105, 100, 45, 112, 114, 101, 102, 105, 120, 115, 11, 116, 101, 109, 112, 108, 97, 116, 101, 45, 105, 100, 115, 4, 0, 6, 115, 101, 114, 118, 101, 114, 3, 0, 10, 1, 107, 11, 1, 114, 2, 6, 115, 101, 114, 118, 101, 114, 12, 17, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 110, 97, 109, 101, 115, 4, 0, 29, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 110, 97, 109, 101, 3, 0, 13, 1, 114, 3, 6, 115, 101, 114, 118, 101, 114, 12, 4, 108, 101, 102, 116, 9, 5, 114, 105, 103, 104, 116, 9, 4, 0, 23, 98, 105, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 115, 101, 114, 118, 101, 114, 3, 0, 15, 1, 114, 2, 6, 115, 101, 114, 118, 101, 114, 12, 8, 116, 105, 109, 101, 108, 105, 110, 101, 9, 4, 0, 20, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 115, 101, 114, 118, 101, 114, 3, 0, 17, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 19, 1, 109, 5, 8, 101, 113, 117, 97, 108, 45, 116, 111, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 18, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 15, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 4, 0, 28, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 3, 0, 21, 1, 114, 4, 2, 111, 112, 22, 8, 116, 105, 109, 101, 108, 105, 110, 101, 9, 5, 118, 97, 108, 117, 101, 1, 6, 115, 101, 114, 118, 101, 114, 12, 4, 0, 26, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 101, 100, 3, 0, 23, 1, 114, 2, 8, 116, 105, 109, 101, 108, 105, 110, 101, 9, 6, 115, 101, 114, 118, 101, 114, 12, 4, 0, 16, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 101, 103, 97, 116, 101, 100, 3, 0, 25, 1, 114, 2, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 5, 6, 115, 101, 114, 118, 101, 114, 12, 4, 0, 27, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 27, 1, 114, 2, 8, 102, 105, 108, 116, 101, 114, 101, 100, 28, 4, 116, 105, 109, 101, 119, 4, 0, 34, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 119, 105, 116, 104, 105, 110, 3, 0, 29, 1, 113, 8, 24, 116, 108, 45, 108, 97, 116, 101, 115, 116, 45, 101, 118, 101, 110, 116, 45, 116, 111, 45, 115, 116, 97, 116, 101, 1, 14, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 28, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 30, 0, 19, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 1, 24, 0, 17, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 101, 103, 97, 116, 105, 111, 110, 1, 26, 0, 17, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 119, 104, 101, 114, 101, 1, 18, 0, 24, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 105, 110, 45, 99, 117, 114, 45, 115, 116, 97, 116, 101, 1, 18, 0, 6, 116, 108, 45, 97, 110, 100, 1, 16, 0, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 31, 1, 112, 32, 1, 114, 1, 5, 110, 111, 100, 101, 115, 33, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 34, 1, 112, 7, 1, 114, 1, 5, 110, 111, 100, 101, 115, 36, 4, 0, 23, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 45, 119, 111, 114, 107, 101, 114, 115, 3, 0, 37, 1, 114, 2, 23, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 45, 119, 111, 114, 107, 101, 114, 115, 36, 13, 114, 101, 115, 117, 108, 116, 45, 119, 111, 114, 107, 101, 114, 7, 4, 0, 14, 119, 111, 114, 107, 101, 114, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 39, 3, 1, 17, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 47, 97, 112, 105, 5, 7, 2, 3, 0, 2, 14, 119, 111, 114, 107, 101, 114, 45, 100, 101, 116, 97, 105, 108, 115, 1, 66, 5, 2, 3, 2, 1, 8, 4, 0, 14, 119, 111, 114, 107, 101, 114, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 106, 1, 1, 1, 115, 1, 64, 3, 16, 99, 111, 114, 101, 45, 116, 101, 109, 112, 108, 97, 116, 101, 45, 105, 100, 115, 16, 108, 101, 97, 102, 45, 116, 101, 109, 112, 108, 97, 116, 101, 45, 105, 100, 115, 26, 101, 118, 101, 110, 116, 45, 116, 111, 45, 115, 116, 97, 116, 101, 45, 116, 101, 109, 112, 97, 108, 116, 101, 45, 105, 100, 115, 0, 2, 4, 0, 3, 114, 117, 110, 1, 3, 4, 1, 19, 116, 105, 109, 101, 108, 105, 110, 101, 58, 100, 114, 105, 118, 101, 114, 47, 97, 112, 105, 5, 9, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 248, 36, 1, 65, 2, 1, 65, 37, 1, 66, 29, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 0, 1, 114, 1, 5, 118, 97, 108, 117, 101, 115, 4, 0, 3, 117, 114, 105, 3, 0, 2, 1, 112, 1, 1, 107, 1, 1, 111, 2, 121, 5, 1, 112, 127, 1, 106, 1, 5, 1, 5, 1, 111, 2, 3, 119, 1, 113, 22, 12, 114, 101, 99, 111, 114, 100, 45, 118, 97, 108, 117, 101, 1, 4, 0, 13, 118, 97, 114, 105, 97, 110, 116, 45, 118, 97, 108, 117, 101, 1, 6, 0, 10, 101, 110, 117, 109, 45, 118, 97, 108, 117, 101, 1, 121, 0, 11, 102, 108, 97, 103, 115, 45, 118, 97, 108, 117, 101, 1, 7, 0, 11, 116, 117, 112, 108, 101, 45, 118, 97, 108, 117, 101, 1, 4, 0, 10, 108, 105, 115, 116, 45, 118, 97, 108, 117, 101, 1, 4, 0, 12, 111, 112, 116, 105, 111, 110, 45, 118, 97, 108, 117, 101, 1, 5, 0, 12, 114, 101, 115, 117, 108, 116, 45, 118, 97, 108, 117, 101, 1, 8, 0, 7, 112, 114, 105, 109, 45, 117, 56, 1, 125, 0, 8, 112, 114, 105, 109, 45, 117, 49, 54, 1, 123, 0, 8, 112, 114, 105, 109, 45, 117, 51, 50, 1, 121, 0, 8, 112, 114, 105, 109, 45, 117, 54, 52, 1, 119, 0, 7, 112, 114, 105, 109, 45, 115, 56, 1, 126, 0, 8, 112, 114, 105, 109, 45, 115, 49, 54, 1, 124, 0, 8, 112, 114, 105, 109, 45, 115, 51, 50, 1, 122, 0, 8, 112, 114, 105, 109, 45, 115, 54, 52, 1, 120, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 51, 50, 1, 118, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 54, 52, 1, 117, 0, 9, 112, 114, 105, 109, 45, 99, 104, 97, 114, 1, 116, 0, 9, 112, 114, 105, 109, 45, 98, 111, 111, 108, 1, 127, 0, 11, 112, 114, 105, 109, 45, 115, 116, 114, 105, 110, 103, 1, 115, 0, 6, 104, 97, 110, 100, 108, 101, 1, 9, 0, 4, 0, 8, 119, 105, 116, 45, 110, 111, 100, 101, 3, 0, 10, 1, 112, 11, 1, 114, 1, 5, 110, 111, 100, 101, 115, 12, 4, 0, 9, 119, 105, 116, 45, 118, 97, 108, 117, 101, 3, 0, 13, 1, 113, 4, 14, 112, 114, 111, 116, 111, 99, 111, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 6, 100, 101, 110, 105, 101, 100, 1, 115, 0, 9, 110, 111, 116, 45, 102, 111, 117, 110, 100, 1, 115, 0, 21, 114, 101, 109, 111, 116, 101, 45, 105, 110, 116, 101, 114, 110, 97, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 0, 9, 114, 112, 99, 45, 101, 114, 114, 111, 114, 3, 0, 15, 4, 0, 8, 119, 97, 115, 109, 45, 114, 112, 99, 3, 1, 1, 105, 17, 1, 64, 1, 8, 108, 111, 99, 97, 116, 105, 111, 110, 3, 0, 18, 4, 0, 21, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 119, 97, 115, 109, 45, 114, 112, 99, 1, 19, 1, 104, 17, 1, 112, 14, 1, 106, 1, 14, 1, 16, 1, 64, 3, 4, 115, 101, 108, 102, 20, 13, 102, 117, 110, 99, 116, 105, 111, 110, 45, 110, 97, 109, 101, 115, 15, 102, 117, 110, 99, 116, 105, 111, 110, 45, 112, 97, 114, 97, 109, 115, 21, 0, 22, 4, 0, 33, 91, 109, 101, 116, 104, 111, 100, 93, 119, 97, 115, 109, 45, 114, 112, 99, 46, 105, 110, 118, 111, 107, 101, 45, 97, 110, 100, 45, 97, 119, 97, 105, 116, 1, 23, 1, 106, 0, 1, 16, 1, 64, 3, 4, 115, 101, 108, 102, 20, 13, 102, 117, 110, 99, 116, 105, 111, 110, 45, 110, 97, 109, 101, 115, 15, 102, 117, 110, 99, 116, 105, 111, 110, 45, 112, 97, 114, 97, 109, 115, 21, 0, 24, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 119, 97, 115, 109, 45, 114, 112, 99, 46, 105, 110, 118, 111, 107, 101, 1, 25, 3, 1, 21, 103, 111, 108, 101, 109, 58, 114, 112, 99, 47, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 1, 66, 32, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 1, 111, 2, 115, 1, 1, 112, 2, 1, 114, 2, 4, 116, 105, 109, 101, 119, 5, 101, 118, 101, 110, 116, 3, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 4, 1, 107, 119, 1, 114, 2, 2, 116, 49, 119, 2, 116, 50, 6, 4, 0, 11, 116, 105, 109, 101, 45, 112, 101, 114, 105, 111, 100, 3, 0, 7, 1, 114, 2, 11, 116, 105, 109, 101, 45, 112, 101, 114, 105, 111, 100, 8, 5, 118, 97, 108, 117, 101, 1, 4, 0, 21, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 45, 112, 111, 105, 110, 116, 3, 0, 9, 1, 112, 10, 1, 114, 1, 7, 114, 101, 115, 117, 108, 116, 115, 11, 4, 0, 15, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 3, 0, 12, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 18, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 111, 112, 3, 0, 14, 1, 114, 3, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 1, 2, 111, 112, 15, 4, 0, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 16, 1, 106, 1, 115, 1, 115, 1, 64, 1, 14, 101, 118, 101, 110, 116, 45, 99, 111, 108, 45, 110, 97, 109, 101, 115, 0, 18, 4, 0, 29, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 108, 97, 116, 101, 115, 116, 45, 101, 118, 101, 110, 116, 45, 115, 116, 97, 116, 101, 1, 19, 1, 64, 1, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 17, 0, 18, 4, 0, 25, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 20, 1, 64, 2, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 17, 4, 116, 105, 109, 101, 119, 0, 18, 4, 0, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 21, 1, 64, 1, 5, 101, 118, 101, 110, 116, 5, 0, 18, 4, 0, 9, 97, 100, 100, 45, 101, 118, 101, 110, 116, 1, 22, 1, 106, 1, 13, 1, 115, 1, 64, 1, 2, 116, 49, 119, 0, 23, 4, 0, 21, 108, 97, 116, 101, 115, 116, 45, 101, 118, 101, 110, 116, 45, 116, 111, 45, 115, 116, 97, 116, 101, 1, 24, 4, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 24, 4, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 24, 3, 1, 28, 116, 105, 109, 101, 108, 105, 110, 101, 58, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 97, 112, 105, 5, 1, 2, 3, 0, 1, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 2, 3, 0, 1, 15, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 1, 66, 27, 2, 3, 2, 1, 2, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 2, 3, 2, 1, 3, 4, 0, 15, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 3, 0, 2, 1, 114, 2, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 115, 11, 116, 101, 109, 112, 108, 97, 116, 101, 45, 105, 100, 115, 4, 0, 22, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 45, 119, 111, 114, 107, 101, 114, 3, 0, 4, 1, 113, 3, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 5, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 5, 0, 24, 116, 108, 45, 108, 97, 116, 101, 115, 116, 45, 101, 118, 101, 110, 116, 45, 116, 111, 45, 115, 116, 97, 116, 101, 1, 5, 0, 4, 0, 18, 108, 101, 97, 102, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 6, 1, 113, 8, 8, 101, 113, 117, 97, 108, 45, 116, 111, 1, 5, 0, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 1, 5, 0, 24, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 111, 114, 45, 101, 113, 117, 97, 108, 45, 116, 111, 1, 5, 0, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 1, 5, 0, 21, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 111, 114, 45, 101, 113, 117, 97, 108, 45, 116, 111, 1, 5, 0, 3, 97, 110, 100, 1, 5, 0, 2, 111, 114, 1, 5, 0, 3, 110, 111, 116, 1, 5, 0, 4, 0, 21, 100, 101, 114, 105, 118, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 8, 1, 113, 2, 13, 108, 101, 97, 102, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 7, 0, 16, 100, 101, 114, 105, 118, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 9, 0, 4, 0, 28, 116, 121, 112, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 45, 119, 111, 114, 107, 101, 114, 3, 0, 10, 1, 106, 1, 115, 1, 115, 1, 64, 2, 12, 99, 104, 105, 108, 100, 45, 119, 111, 114, 107, 101, 114, 11, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 1, 0, 12, 4, 0, 16, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 101, 113, 117, 97, 108, 1, 13, 4, 0, 23, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 1, 13, 4, 0, 35, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 111, 114, 45, 101, 113, 117, 97, 108, 45, 116, 111, 1, 13, 4, 0, 20, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 108, 101, 115, 115, 45, 116, 104, 97, 110, 1, 13, 4, 0, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 111, 114, 45, 101, 113, 117, 97, 108, 45, 116, 111, 1, 13, 1, 64, 2, 13, 99, 104, 105, 108, 100, 45, 119, 111, 114, 107, 101, 114, 49, 11, 13, 99, 104, 105, 108, 100, 45, 119, 111, 114, 107, 101, 114, 50, 11, 0, 12, 4, 0, 14, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 97, 110, 100, 1, 14, 4, 0, 13, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 111, 114, 1, 14, 1, 64, 1, 12, 99, 104, 105, 108, 100, 45, 119, 111, 114, 107, 101, 114, 11, 0, 12, 4, 0, 14, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 110, 111, 116, 1, 15, 1, 106, 1, 3, 1, 115, 1, 64, 1, 2, 116, 49, 119, 0, 16, 4, 0, 19, 103, 101, 116, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 1, 17, 3, 1, 31, 116, 105, 109, 101, 108, 105, 110, 101, 58, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 97, 112, 105, 5, 4, 2, 3, 0, 1, 5, 101, 118, 101, 110, 116, 2, 3, 0, 1, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 2, 3, 0, 2, 28, 116, 121, 112, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 45, 119, 111, 114, 107, 101, 114, 1, 66, 44, 2, 3, 2, 1, 2, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 2, 3, 2, 1, 5, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 2, 3, 2, 1, 6, 4, 0, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 4, 2, 3, 2, 1, 7, 4, 0, 28, 116, 121, 112, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 45, 119, 111, 114, 107, 101, 114, 3, 0, 6, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 8, 1, 114, 2, 16, 119, 111, 114, 107, 101, 114, 45, 105, 100, 45, 112, 114, 101, 102, 105, 120, 115, 11, 116, 101, 109, 112, 108, 97, 116, 101, 45, 105, 100, 115, 4, 0, 6, 115, 101, 114, 118, 101, 114, 3, 0, 10, 1, 107, 11, 1, 114, 2, 6, 115, 101, 114, 118, 101, 114, 12, 17, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 110, 97, 109, 101, 115, 4, 0, 29, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 110, 97, 109, 101, 3, 0, 13, 1, 114, 3, 6, 115, 101, 114, 118, 101, 114, 12, 4, 108, 101, 102, 116, 9, 5, 114, 105, 103, 104, 116, 9, 4, 0, 23, 98, 105, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 115, 101, 114, 118, 101, 114, 3, 0, 15, 1, 114, 2, 6, 115, 101, 114, 118, 101, 114, 12, 8, 116, 105, 109, 101, 108, 105, 110, 101, 9, 4, 0, 20, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 115, 101, 114, 118, 101, 114, 3, 0, 17, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 19, 1, 109, 5, 8, 101, 113, 117, 97, 108, 45, 116, 111, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 18, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 15, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 4, 0, 28, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 3, 0, 21, 1, 114, 4, 2, 111, 112, 22, 8, 116, 105, 109, 101, 108, 105, 110, 101, 9, 5, 118, 97, 108, 117, 101, 1, 6, 115, 101, 114, 118, 101, 114, 12, 4, 0, 26, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 101, 100, 3, 0, 23, 1, 114, 2, 8, 116, 105, 109, 101, 108, 105, 110, 101, 9, 6, 115, 101, 114, 118, 101, 114, 12, 4, 0, 16, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 101, 103, 97, 116, 101, 100, 3, 0, 25, 1, 114, 2, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 5, 6, 115, 101, 114, 118, 101, 114, 12, 4, 0, 27, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 27, 1, 114, 2, 8, 102, 105, 108, 116, 101, 114, 101, 100, 28, 4, 116, 105, 109, 101, 119, 4, 0, 34, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 119, 105, 116, 104, 105, 110, 3, 0, 29, 1, 113, 8, 24, 116, 108, 45, 108, 97, 116, 101, 115, 116, 45, 101, 118, 101, 110, 116, 45, 116, 111, 45, 115, 116, 97, 116, 101, 1, 14, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 28, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 30, 0, 19, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 1, 24, 0, 17, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 101, 103, 97, 116, 105, 111, 110, 1, 26, 0, 17, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 119, 104, 101, 114, 101, 1, 18, 0, 24, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 105, 110, 45, 99, 117, 114, 45, 115, 116, 97, 116, 101, 1, 18, 0, 6, 116, 108, 45, 97, 110, 100, 1, 16, 0, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 31, 1, 112, 32, 1, 114, 1, 5, 110, 111, 100, 101, 115, 33, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 34, 1, 112, 7, 1, 114, 1, 5, 110, 111, 100, 101, 115, 36, 4, 0, 23, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 45, 119, 111, 114, 107, 101, 114, 115, 3, 0, 37, 1, 114, 2, 23, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 45, 119, 111, 114, 107, 101, 114, 115, 36, 13, 114, 101, 115, 117, 108, 116, 45, 119, 111, 114, 107, 101, 114, 7, 4, 0, 14, 119, 111, 114, 107, 101, 114, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 39, 1, 106, 1, 40, 1, 115, 1, 64, 1, 8, 116, 105, 109, 101, 108, 105, 110, 101, 35, 0, 41, 4, 0, 19, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 42, 3, 1, 17, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 47, 97, 112, 105, 5, 8, 2, 3, 0, 0, 3, 117, 114, 105, 2, 3, 0, 3, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 2, 3, 0, 3, 5, 101, 118, 101, 110, 116, 2, 3, 0, 3, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 2, 3, 0, 3, 28, 116, 121, 112, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 45, 119, 111, 114, 107, 101, 114, 2, 3, 0, 3, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 2, 3, 0, 3, 6, 115, 101, 114, 118, 101, 114, 2, 3, 0, 3, 29, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 110, 97, 109, 101, 2, 3, 0, 3, 23, 98, 105, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 115, 101, 114, 118, 101, 114, 2, 3, 0, 3, 20, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 115, 101, 114, 118, 101, 114, 2, 3, 0, 3, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 2, 3, 0, 3, 28, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 2, 3, 0, 3, 26, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 101, 100, 2, 3, 0, 3, 16, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 101, 103, 97, 116, 101, 100, 2, 3, 0, 3, 27, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 2, 3, 0, 3, 34, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 119, 105, 116, 104, 105, 110, 2, 3, 0, 3, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 2, 3, 0, 3, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 2, 3, 0, 3, 23, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 45, 119, 111, 114, 107, 101, 114, 115, 2, 3, 0, 3, 14, 119, 111, 114, 107, 101, 114, 45, 100, 101, 116, 97, 105, 108, 115, 1, 66, 48, 2, 3, 2, 1, 9, 4, 0, 3, 117, 114, 105, 3, 0, 0, 2, 3, 2, 1, 10, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 2, 2, 3, 2, 1, 11, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 4, 2, 3, 2, 1, 12, 4, 0, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 6, 2, 3, 2, 1, 13, 4, 0, 28, 116, 121, 112, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 114, 101, 115, 117, 108, 116, 45, 119, 111, 114, 107, 101, 114, 3, 0, 8, 2, 3, 2, 1, 14, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 10, 2, 3, 2, 1, 15, 4, 0, 6, 115, 101, 114, 118, 101, 114, 3, 0, 12, 2, 3, 2, 1, 16, 4, 0, 29, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 110, 97, 109, 101, 3, 0, 14, 2, 3, 2, 1, 17, 4, 0, 23, 98, 105, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 115, 101, 114, 118, 101, 114, 3, 0, 16, 2, 3, 2, 1, 18, 4, 0, 20, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 115, 101, 114, 118, 101, 114, 3, 0, 18, 2, 3, 2, 1, 19, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 20, 2, 3, 2, 1, 20, 4, 0, 28, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 3, 0, 22, 2, 3, 2, 1, 21, 4, 0, 26, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 101, 100, 3, 0, 24, 2, 3, 2, 1, 22, 4, 0, 16, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 101, 103, 97, 116, 101, 100, 3, 0, 26, 2, 3, 2, 1, 23, 4, 0, 27, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 28, 2, 3, 2, 1, 24, 4, 0, 34, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 119, 105, 116, 104, 105, 110, 3, 0, 30, 2, 3, 2, 1, 25, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 32, 2, 3, 2, 1, 26, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 34, 2, 3, 2, 1, 27, 4, 0, 23, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 45, 119, 111, 114, 107, 101, 114, 115, 3, 0, 36, 2, 3, 2, 1, 28, 4, 0, 14, 119, 111, 114, 107, 101, 114, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 38, 4, 0, 3, 97, 112, 105, 3, 1, 1, 105, 40, 1, 64, 1, 8, 108, 111, 99, 97, 116, 105, 111, 110, 1, 0, 41, 4, 0, 16, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 97, 112, 105, 1, 42, 1, 104, 40, 1, 106, 1, 39, 1, 115, 1, 64, 2, 4, 115, 101, 108, 102, 43, 8, 116, 105, 109, 101, 108, 105, 110, 101, 35, 0, 44, 4, 0, 31, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 45, 3, 1, 28, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 45, 115, 116, 117, 98, 47, 115, 116, 117, 98, 45, 99, 111, 114, 101, 5, 29, 1, 66, 5, 2, 3, 2, 1, 28, 4, 0, 14, 119, 111, 114, 107, 101, 114, 45, 100, 101, 116, 97, 105, 108, 115, 3, 0, 0, 1, 106, 1, 1, 1, 115, 1, 64, 3, 16, 99, 111, 114, 101, 45, 116, 101, 109, 112, 108, 97, 116, 101, 45, 105, 100, 115, 16, 108, 101, 97, 102, 45, 116, 101, 109, 112, 108, 97, 116, 101, 45, 105, 100, 115, 26, 101, 118, 101, 110, 116, 45, 116, 111, 45, 115, 116, 97, 116, 101, 45, 116, 101, 109, 112, 97, 108, 116, 101, 45, 105, 100, 115, 0, 2, 4, 0, 3, 114, 117, 110, 1, 3, 4, 1, 19, 116, 105, 109, 101, 108, 105, 110, 101, 58, 100, 114, 105, 118, 101, 114, 47, 97, 112, 105, 5, 30, 4, 1, 22, 116, 105, 109, 101, 108, 105, 110, 101, 58, 100, 114, 105, 118, 101, 114, 47, 100, 114, 105, 118, 101, 114, 4, 0, 11, 12, 1, 0, 6, 100, 114, 105, 118, 101, 114, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];
                                
                                #[inline(never)]
                                #[doc(hidden)]
                                #[cfg(target_arch = "wasm32")]
                                pub fn __link_section() {}
                                