// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod golem {
  pub mod timeline {
    
    #[allow(clippy::all)]
    pub mod api {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// use timeline:rawevents/api.{event-value, event};
      pub type NodeIndex = i32;
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, PartialEq)]
      pub enum TimelinePrimitiveOp {
        GreaterThan,
        GreaterThanEqual,
        LessThan,
        LessThanEqual,
      }
      impl ::core::fmt::Debug for TimelinePrimitiveOp {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            TimelinePrimitiveOp::GreaterThan => {
              f.debug_tuple("TimelinePrimitiveOp::GreaterThan").finish()
            }
            TimelinePrimitiveOp::GreaterThanEqual => {
              f.debug_tuple("TimelinePrimitiveOp::GreaterThanEqual").finish()
            }
            TimelinePrimitiveOp::LessThan => {
              f.debug_tuple("TimelinePrimitiveOp::LessThan").finish()
            }
            TimelinePrimitiveOp::LessThanEqual => {
              f.debug_tuple("TimelinePrimitiveOp::LessThanEqual").finish()
            }
          }
        }
      }
      
      impl TimelinePrimitiveOp{
        pub(crate) unsafe fn _lift(val: u8) -> TimelinePrimitiveOp{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }
          
          match val {
            0 => TimelinePrimitiveOp::GreaterThan,
            1 => TimelinePrimitiveOp::GreaterThanEqual,
            2 => TimelinePrimitiveOp::LessThan,
            3 => TimelinePrimitiveOp::LessThanEqual,
            
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      #[repr(C)]
      #[derive(Clone, Copy)]
      pub struct PrimitiveTimeline {
        pub op: TimelinePrimitiveOp,
        pub timeline: NodeIndex,
      }
      impl ::core::fmt::Debug for PrimitiveTimeline {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("PrimitiveTimeline").field("op", &self.op).field("timeline", &self.timeline).finish()
        }
      }
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, PartialEq)]
      pub enum FilterOp {
        Equal,
        GreaterThan,
        LessThan,
      }
      impl ::core::fmt::Debug for FilterOp {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            FilterOp::Equal => {
              f.debug_tuple("FilterOp::Equal").finish()
            }
            FilterOp::GreaterThan => {
              f.debug_tuple("FilterOp::GreaterThan").finish()
            }
            FilterOp::LessThan => {
              f.debug_tuple("FilterOp::LessThan").finish()
            }
          }
        }
      }
      
      impl FilterOp{
        pub(crate) unsafe fn _lift(val: u8) -> FilterOp{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }
          
          match val {
            0 => FilterOp::Equal,
            1 => FilterOp::GreaterThan,
            2 => FilterOp::LessThan,
            
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      #[derive(Clone)]
      pub struct EventColumnPredicateInfo {
        pub col_name: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for EventColumnPredicateInfo {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("EventColumnPredicateInfo").field("col-name", &self.col_name).finish()
        }
      }
      #[derive(Clone)]
      pub struct FilteredTimeline {
        pub filter: FilterOp,
        pub node: NodeIndex,
        pub event_predicate: EventColumnPredicateInfo,
      }
      impl ::core::fmt::Debug for FilteredTimeline {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("FilteredTimeline").field("filter", &self.filter).field("node", &self.node).field("event-predicate", &self.event_predicate).finish()
        }
      }
      #[derive(Clone)]
      pub struct FilteredTimelineWithin {
        pub filtered: FilteredTimeline,
        pub time: u64,
      }
      impl ::core::fmt::Debug for FilteredTimelineWithin {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("FilteredTimelineWithin").field("filtered", &self.filtered).field("time", &self.time).finish()
        }
      }
      #[derive(Clone)]
      pub enum TimelineNode{
        Leaf,
        Primitive(PrimitiveTimeline),
        NotNode(NodeIndex),
        TlHasExisted(FilteredTimeline),
        TlHasExistedWithin(FilteredTimelineWithin),
        TlDurationWhere(FilteredTimeline),
        TlDurationInCurState(FilteredTimeline),
      }
      impl ::core::fmt::Debug for TimelineNode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            TimelineNode::Leaf => {
              f.debug_tuple("TimelineNode::Leaf").finish()
            }
            TimelineNode::Primitive(e) => {
              f.debug_tuple("TimelineNode::Primitive").field(e).finish()
            }
            TimelineNode::NotNode(e) => {
              f.debug_tuple("TimelineNode::NotNode").field(e).finish()
            }
            TimelineNode::TlHasExisted(e) => {
              f.debug_tuple("TimelineNode::TlHasExisted").field(e).finish()
            }
            TimelineNode::TlHasExistedWithin(e) => {
              f.debug_tuple("TimelineNode::TlHasExistedWithin").field(e).finish()
            }
            TimelineNode::TlDurationWhere(e) => {
              f.debug_tuple("TimelineNode::TlDurationWhere").field(e).finish()
            }
            TimelineNode::TlDurationInCurState(e) => {
              f.debug_tuple("TimelineNode::TlDurationInCurState").field(e).finish()
            }
          }
        }
      }
      #[derive(Clone)]
      pub struct TimelineOp {
        pub nodes: wit_bindgen::rt::vec::Vec::<TimelineNode>,
      }
      impl ::core::fmt::Debug for TimelineOp {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("TimelineOp").field("nodes", &self.nodes).finish()
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn initialize_timeline(timeline: &TimelineOp,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let TimelineOp{ nodes:nodes0, } = timeline;
          let vec15 = nodes0;
          let len15 = vec15.len() as i32;
          let layout15 = alloc::Layout::from_size_align_unchecked(vec15.len() * 32, 8);
          let result15 = if layout15.size() != 0
          {
            let ptr = alloc::alloc(layout15);
            if ptr.is_null()
            {
              alloc::handle_alloc_error(layout15);
            }
            ptr
          }else {{
            ::core::ptr::null_mut()
          }};
          for (i, e) in vec15.into_iter().enumerate() {
            let base = result15 as i32 + (i as i32) * 32;
            {
              match e {
                TimelineNode::Leaf=> {
                  {
                    *((base + 0) as *mut u8) = (0i32) as u8;
                  }
                }
                TimelineNode::Primitive(e) => {
                  *((base + 0) as *mut u8) = (1i32) as u8;
                  let PrimitiveTimeline{ op:op1, timeline:timeline1, } = e;
                  *((base + 8) as *mut u8) = (op1.clone() as i32) as u8;
                  *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(timeline1);
                },
                TimelineNode::NotNode(e) => {
                  *((base + 0) as *mut u8) = (2i32) as u8;
                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                },
                TimelineNode::TlHasExisted(e) => {
                  *((base + 0) as *mut u8) = (3i32) as u8;
                  let FilteredTimeline{ filter:filter2, node:node2, event_predicate:event_predicate2, } = e;
                  *((base + 8) as *mut u8) = (filter2.clone() as i32) as u8;
                  *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(node2);
                  let EventColumnPredicateInfo{ col_name:col_name3, } = event_predicate2;
                  let vec4 = col_name3;
                  let ptr4 = vec4.as_ptr() as i32;
                  let len4 = vec4.len() as i32;
                  *((base + 20) as *mut i32) = len4;
                  *((base + 16) as *mut i32) = ptr4;
                },
                TimelineNode::TlHasExistedWithin(e) => {
                  *((base + 0) as *mut u8) = (4i32) as u8;
                  let FilteredTimelineWithin{ filtered:filtered5, time:time5, } = e;
                  let FilteredTimeline{ filter:filter6, node:node6, event_predicate:event_predicate6, } = filtered5;
                  *((base + 8) as *mut u8) = (filter6.clone() as i32) as u8;
                  *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(node6);
                  let EventColumnPredicateInfo{ col_name:col_name7, } = event_predicate6;
                  let vec8 = col_name7;
                  let ptr8 = vec8.as_ptr() as i32;
                  let len8 = vec8.len() as i32;
                  *((base + 20) as *mut i32) = len8;
                  *((base + 16) as *mut i32) = ptr8;
                  *((base + 24) as *mut i64) = wit_bindgen::rt::as_i64(time5);
                },
                TimelineNode::TlDurationWhere(e) => {
                  *((base + 0) as *mut u8) = (5i32) as u8;
                  let FilteredTimeline{ filter:filter9, node:node9, event_predicate:event_predicate9, } = e;
                  *((base + 8) as *mut u8) = (filter9.clone() as i32) as u8;
                  *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(node9);
                  let EventColumnPredicateInfo{ col_name:col_name10, } = event_predicate9;
                  let vec11 = col_name10;
                  let ptr11 = vec11.as_ptr() as i32;
                  let len11 = vec11.len() as i32;
                  *((base + 20) as *mut i32) = len11;
                  *((base + 16) as *mut i32) = ptr11;
                },
                TimelineNode::TlDurationInCurState(e) => {
                  *((base + 0) as *mut u8) = (6i32) as u8;
                  let FilteredTimeline{ filter:filter12, node:node12, event_predicate:event_predicate12, } = e;
                  *((base + 8) as *mut u8) = (filter12.clone() as i32) as u8;
                  *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(node12);
                  let EventColumnPredicateInfo{ col_name:col_name13, } = event_predicate12;
                  let vec14 = col_name13;
                  let ptr14 = vec14.as_ptr() as i32;
                  let len14 = vec14.len() as i32;
                  *((base + 20) as *mut i32) = len14;
                  *((base + 16) as *mut i32) = ptr14;
                },
              }
            }
          }
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "golem:timeline/api")]
          extern "C" {
            #[link_name = "initialize-timeline"]
            fn wit_import(_: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, ){ unreachable!() }
          wit_import(result15 as i32, len15);
          if layout15.size() != 0 {
            alloc::dealloc(result15, layout15);
          }
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod timeline {
    pub mod rawevents {
      
      #[allow(clippy::all)]
      pub mod api {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "timeline:rawevents/api#run"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_run() {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::run();
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn run();
        }
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:rawevents"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1619] = [3, 0, 9, 114, 97, 119, 101, 118, 101, 110, 116, 115, 0, 97, 115, 109, 13, 0, 1, 0, 7, 188, 5, 1, 65, 5, 1, 66, 21, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 0, 1, 109, 4, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 18, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 15, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 4, 0, 21, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 105, 109, 105, 116, 105, 118, 101, 45, 111, 112, 3, 0, 2, 1, 114, 2, 2, 111, 112, 3, 8, 116, 105, 109, 101, 108, 105, 110, 101, 1, 4, 0, 18, 112, 114, 105, 109, 105, 116, 105, 118, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 0, 4, 1, 114, 2, 2, 111, 112, 3, 3, 105, 110, 100, 1, 4, 0, 18, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 105, 109, 105, 116, 105, 118, 101, 3, 0, 6, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 9, 102, 105, 108, 116, 101, 114, 45, 111, 112, 3, 0, 8, 1, 114, 1, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 4, 0, 27, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 3, 0, 10, 1, 114, 3, 6, 102, 105, 108, 116, 101, 114, 9, 4, 110, 111, 100, 101, 1, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 11, 4, 0, 17, 102, 105, 108, 116, 101, 114, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 0, 12, 1, 114, 2, 8, 102, 105, 108, 116, 101, 114, 101, 100, 13, 4, 116, 105, 109, 101, 119, 4, 0, 24, 102, 105, 108, 116, 101, 114, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 105, 110, 3, 0, 14, 1, 113, 7, 4, 108, 101, 97, 102, 0, 0, 9, 112, 114, 105, 109, 105, 116, 105, 118, 101, 1, 5, 0, 8, 110, 111, 116, 45, 110, 111, 100, 101, 1, 1, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 13, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 15, 0, 17, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 119, 104, 101, 114, 101, 1, 13, 0, 24, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 105, 110, 45, 99, 117, 114, 45, 115, 116, 97, 116, 101, 1, 13, 0, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 16, 1, 112, 17, 1, 114, 1, 5, 110, 111, 100, 101, 115, 18, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 19, 3, 1, 18, 103, 111, 108, 101, 109, 58, 116, 105, 109, 101, 108, 105, 110, 101, 47, 97, 112, 105, 5, 0, 2, 3, 0, 0, 27, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 1, 66, 4, 2, 3, 2, 1, 1, 4, 0, 27, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 3, 0, 0, 1, 64, 0, 1, 0, 4, 0, 3, 114, 117, 110, 1, 2, 4, 1, 22, 116, 105, 109, 101, 108, 105, 110, 101, 58, 114, 97, 119, 101, 118, 101, 110, 116, 115, 47, 97, 112, 105, 5, 2, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 135, 6, 1, 65, 2, 1, 65, 5, 1, 66, 23, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 0, 1, 109, 4, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 18, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 15, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 4, 0, 21, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 105, 109, 105, 116, 105, 118, 101, 45, 111, 112, 3, 0, 2, 1, 114, 2, 2, 111, 112, 3, 8, 116, 105, 109, 101, 108, 105, 110, 101, 1, 4, 0, 18, 112, 114, 105, 109, 105, 116, 105, 118, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 0, 4, 1, 114, 2, 2, 111, 112, 3, 3, 105, 110, 100, 1, 4, 0, 18, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 105, 109, 105, 116, 105, 118, 101, 3, 0, 6, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 9, 102, 105, 108, 116, 101, 114, 45, 111, 112, 3, 0, 8, 1, 114, 1, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 4, 0, 27, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 3, 0, 10, 1, 114, 3, 6, 102, 105, 108, 116, 101, 114, 9, 4, 110, 111, 100, 101, 1, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 11, 4, 0, 17, 102, 105, 108, 116, 101, 114, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 0, 12, 1, 114, 2, 8, 102, 105, 108, 116, 101, 114, 101, 100, 13, 4, 116, 105, 109, 101, 119, 4, 0, 24, 102, 105, 108, 116, 101, 114, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 105, 110, 3, 0, 14, 1, 113, 7, 4, 108, 101, 97, 102, 0, 0, 9, 112, 114, 105, 109, 105, 116, 105, 118, 101, 1, 5, 0, 8, 110, 111, 116, 45, 110, 111, 100, 101, 1, 1, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 13, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 15, 0, 17, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 119, 104, 101, 114, 101, 1, 13, 0, 24, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 105, 110, 45, 99, 117, 114, 45, 115, 116, 97, 116, 101, 1, 13, 0, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 16, 1, 112, 17, 1, 114, 1, 5, 110, 111, 100, 101, 115, 18, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 19, 1, 64, 1, 8, 116, 105, 109, 101, 108, 105, 110, 101, 20, 1, 0, 4, 0, 19, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 21, 3, 1, 18, 103, 111, 108, 101, 109, 58, 116, 105, 109, 101, 108, 105, 110, 101, 47, 97, 112, 105, 5, 0, 2, 3, 0, 0, 27, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 1, 66, 4, 2, 3, 2, 1, 1, 4, 0, 27, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 3, 0, 0, 1, 64, 0, 1, 0, 4, 0, 3, 114, 117, 110, 1, 2, 4, 1, 22, 116, 105, 109, 101, 108, 105, 110, 101, 58, 114, 97, 119, 101, 118, 101, 110, 116, 115, 47, 97, 112, 105, 5, 2, 4, 1, 28, 116, 105, 109, 101, 108, 105, 110, 101, 58, 114, 97, 119, 101, 118, 101, 110, 116, 115, 47, 114, 97, 119, 101, 118, 101, 110, 116, 115, 4, 0, 11, 15, 1, 0, 9, 114, 97, 119, 101, 118, 101, 110, 116, 115, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
