package timeline:core;

interface api {
  use timeline:event-processor/api.{event-value, event, event-predicate};

  type node-index = s32;

  record timeline-op {
    nodes: list<timeline-node>,
  }

  variant timeline-node {
    tl-latest-event-to-state(server-with-event-column-name),
    tl-has-existed(server-with-event-predicate),
    tl-has-existed-within(server-with-event-predicate-within),
    timeline-comparison(timeline-constant-compared),
    timeline-negation(timeline-negated),
    tl-duration-where(timeline-with-server),
    tl-duration-in-cur-state(timeline-with-server),
  }

 record server-with-event-column-name {
   server: server,
   event-column-name: string
 }

 record timeline-with-server {
    server: server,
    timeline: node-index
  }

  // A user can provide a prefix to each worker
  // however it is the engine to decide the exact worker-id which
  // will be prefixed by worker-id-prefix
  // In future, we can allow users to simply use prefix
  // to aggregate workers (to reduce number of workers)
  record server {
    worker-id-prefix: string,
    template-id: string
  }

  record execution-result-worker {
    worker-id: string,
    template-id: string
  }

  record worker-id {
    name: string
  }

  // Comparators used to compare a timeline with a constant
  enum timeline-constant-comparator {
    greater-than,
    greater-than-equal,
    less-than,
    less-than-equal,
  }

  /// A  timeline-constant-compared corresponds to classic timeline operations
  // in the paper
  // A primitive timeline is also maintained in a separate worker/server
  record timeline-constant-compared {
    op: timeline-constant-comparator,
    timeline: node-index,
    value: event-value,
    server: server
  }

  record timeline-negated{
    timeline: node-index,
    server: server
  }

  // A filtered timeline is operation on state dynamic timelines
  // applied with an event filter
  // TLHasExistedWithIn(col("userAction" ) == "seek")
  // seek and col("userAction) is event-predicate
  // and == is filter-op
  // A filtered timeline is also maintained in a separate worker/server
  record server-with-event-predicate {
    event-predicate: event-predicate,
    server: server
  }

  record server-with-event-predicate-within {
    filtered: server-with-event-predicate,
    time: u64,
  }

  initialize-timeline: func(timeline: timeline-op) -> result<execution-result-worker, string>;
}

world core {
  import timeline:event-processor-stub/stub-event-processor;
  import timeline:timeline-processor-stub/stub-timeline-processor;
  export api;
}

