// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod golem {
    #[allow(dead_code)]
    pub mod rpc {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            pub type NodeIndex = i32;
            #[derive(Clone)]
            pub struct Uri {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Uri {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Uri").field("value", &self.value).finish()
                }
            }
            #[derive(Clone)]
            pub enum WitNode {
                RecordValue(_rt::Vec<NodeIndex>),
                VariantValue((u32, Option<NodeIndex>)),
                EnumValue(u32),
                FlagsValue(_rt::Vec<bool>),
                TupleValue(_rt::Vec<NodeIndex>),
                ListValue(_rt::Vec<NodeIndex>),
                OptionValue(Option<NodeIndex>),
                ResultValue(Result<Option<NodeIndex>, Option<NodeIndex>>),
                PrimU8(u8),
                PrimU16(u16),
                PrimU32(u32),
                PrimU64(u64),
                PrimS8(i8),
                PrimS16(i16),
                PrimS32(i32),
                PrimS64(i64),
                PrimFloat32(f32),
                PrimFloat64(f64),
                PrimChar(char),
                PrimBool(bool),
                PrimString(_rt::String),
                Handle((Uri, u64)),
            }
            impl ::core::fmt::Debug for WitNode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        WitNode::RecordValue(e) => {
                            f.debug_tuple("WitNode::RecordValue").field(e).finish()
                        }
                        WitNode::VariantValue(e) => {
                            f.debug_tuple("WitNode::VariantValue").field(e).finish()
                        }
                        WitNode::EnumValue(e) => {
                            f.debug_tuple("WitNode::EnumValue").field(e).finish()
                        }
                        WitNode::FlagsValue(e) => {
                            f.debug_tuple("WitNode::FlagsValue").field(e).finish()
                        }
                        WitNode::TupleValue(e) => {
                            f.debug_tuple("WitNode::TupleValue").field(e).finish()
                        }
                        WitNode::ListValue(e) => {
                            f.debug_tuple("WitNode::ListValue").field(e).finish()
                        }
                        WitNode::OptionValue(e) => {
                            f.debug_tuple("WitNode::OptionValue").field(e).finish()
                        }
                        WitNode::ResultValue(e) => {
                            f.debug_tuple("WitNode::ResultValue").field(e).finish()
                        }
                        WitNode::PrimU8(e) => f.debug_tuple("WitNode::PrimU8").field(e).finish(),
                        WitNode::PrimU16(e) => f.debug_tuple("WitNode::PrimU16").field(e).finish(),
                        WitNode::PrimU32(e) => f.debug_tuple("WitNode::PrimU32").field(e).finish(),
                        WitNode::PrimU64(e) => f.debug_tuple("WitNode::PrimU64").field(e).finish(),
                        WitNode::PrimS8(e) => f.debug_tuple("WitNode::PrimS8").field(e).finish(),
                        WitNode::PrimS16(e) => f.debug_tuple("WitNode::PrimS16").field(e).finish(),
                        WitNode::PrimS32(e) => f.debug_tuple("WitNode::PrimS32").field(e).finish(),
                        WitNode::PrimS64(e) => f.debug_tuple("WitNode::PrimS64").field(e).finish(),
                        WitNode::PrimFloat32(e) => {
                            f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
                        }
                        WitNode::PrimFloat64(e) => {
                            f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
                        }
                        WitNode::PrimChar(e) => {
                            f.debug_tuple("WitNode::PrimChar").field(e).finish()
                        }
                        WitNode::PrimBool(e) => {
                            f.debug_tuple("WitNode::PrimBool").field(e).finish()
                        }
                        WitNode::PrimString(e) => {
                            f.debug_tuple("WitNode::PrimString").field(e).finish()
                        }
                        WitNode::Handle(e) => f.debug_tuple("WitNode::Handle").field(e).finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub struct WitValue {
                pub nodes: _rt::Vec<WitNode>,
            }
            impl ::core::fmt::Debug for WitValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
                }
            }
            #[derive(Clone)]
            pub enum RpcError {
                ProtocolError(_rt::String),
                Denied(_rt::String),
                NotFound(_rt::String),
                RemoteInternalError(_rt::String),
            }
            impl ::core::fmt::Debug for RpcError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        RpcError::ProtocolError(e) => {
                            f.debug_tuple("RpcError::ProtocolError").field(e).finish()
                        }
                        RpcError::Denied(e) => f.debug_tuple("RpcError::Denied").field(e).finish(),
                        RpcError::NotFound(e) => {
                            f.debug_tuple("RpcError::NotFound").field(e).finish()
                        }
                        RpcError::RemoteInternalError(e) => {
                            f.debug_tuple("RpcError::RemoteInternalError").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for RpcError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for RpcError {}

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct WasmRpc {
                handle: _rt::Resource<WasmRpc>,
            }

            impl WasmRpc {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for WasmRpc {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]wasm-rpc"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInvokeResult {
                handle: _rt::Resource<FutureInvokeResult>,
            }

            impl FutureInvokeResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for FutureInvokeResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]future-invoke-result"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(location: &Uri) -> Self {
                    unsafe {
                        let Uri { value: value0 } = location;
                        let vec1 = value0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]wasm-rpc"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr1.cast_mut(), len1);
                        WasmRpc::from_handle(ret as u32)
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<WitValue, RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec4.len() * 1,
                                                        1,
                                                    );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list
                                                    .extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke-and-await"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                            ptr13,
                        );
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = {
                                    let l15 = *ptr13.add(4).cast::<*mut u8>();
                                    let l16 = *ptr13.add(8).cast::<usize>();
                                    let base62 = l15;
                                    let len62 = l16;
                                    let mut result62 = _rt::Vec::with_capacity(len62);
                                    for i in 0..len62 {
                                        let base = base62.add(i * 24);
                                        let e62 = {
                                            let l17 = i32::from(*base.add(0).cast::<u8>());
                                            let v61 = match l17 {
                                                0 => {
                                                    let e61 = {
                                                        let l18 = *base.add(8).cast::<*mut u8>();
                                                        let l19 = *base.add(12).cast::<usize>();
                                                        let len20 = l19;

                                                        _rt::Vec::from_raw_parts(
                                                            l18.cast(),
                                                            len20,
                                                            len20,
                                                        )
                                                    };
                                                    WitNode::RecordValue(e61)
                                                }
                                                1 => {
                                                    let e61 =
                                                        {
                                                            let l21 = *base.add(8).cast::<i32>();
                                                            let l22 = i32::from(
                                                                *base.add(12).cast::<u8>(),
                                                            );

                                                            (l21 as u32, match l22 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l23 = *base.add(16).cast::<i32>();

                                            l23
                                          };
                                          Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                      })
                                                        };
                                                    WitNode::VariantValue(e61)
                                                }
                                                2 => {
                                                    let e61 = {
                                                        let l24 = *base.add(8).cast::<i32>();

                                                        l24 as u32
                                                    };
                                                    WitNode::EnumValue(e61)
                                                }
                                                3 => {
                                                    let e61 = {
                                                        let l25 = *base.add(8).cast::<*mut u8>();
                                                        let l26 = *base.add(12).cast::<usize>();
                                                        let base28 = l25;
                                                        let len28 = l26;
                                                        let mut result28 =
                                                            _rt::Vec::with_capacity(len28);
                                                        for i in 0..len28 {
                                                            let base = base28.add(i * 1);
                                                            let e28 = {
                                                                let l27 = i32::from(
                                                                    *base.add(0).cast::<u8>(),
                                                                );

                                                                _rt::bool_lift(l27 as u8)
                                                            };
                                                            result28.push(e28);
                                                        }
                                                        _rt::cabi_dealloc(base28, len28 * 1, 1);

                                                        result28
                                                    };
                                                    WitNode::FlagsValue(e61)
                                                }
                                                4 => {
                                                    let e61 = {
                                                        let l29 = *base.add(8).cast::<*mut u8>();
                                                        let l30 = *base.add(12).cast::<usize>();
                                                        let len31 = l30;

                                                        _rt::Vec::from_raw_parts(
                                                            l29.cast(),
                                                            len31,
                                                            len31,
                                                        )
                                                    };
                                                    WitNode::TupleValue(e61)
                                                }
                                                5 => {
                                                    let e61 = {
                                                        let l32 = *base.add(8).cast::<*mut u8>();
                                                        let l33 = *base.add(12).cast::<usize>();
                                                        let len34 = l33;

                                                        _rt::Vec::from_raw_parts(
                                                            l32.cast(),
                                                            len34,
                                                            len34,
                                                        )
                                                    };
                                                    WitNode::ListValue(e61)
                                                }
                                                6 => {
                                                    let e61 = {
                                                        let l35 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        match l35 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l36 =
                                                                        *base.add(12).cast::<i32>();

                                                                    l36
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::OptionValue(e61)
                                                }
                                                7 => {
                                                    let e61 = {
                                                        let l37 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        match l37 {
                                                            0 => {
                                                                let e = {
                                                                    let l38 = i32::from(
                                                                        *base.add(12).cast::<u8>(),
                                                                    );

                                                                    match l38 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l39 = *base.add(16).cast::<i32>();

                                                  l39
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                                                };
                                                                Ok(e)
                                                            }
                                                            1 => {
                                                                let e = {
                                                                    let l40 = i32::from(
                                                                        *base.add(12).cast::<u8>(),
                                                                    );

                                                                    match l40 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l41 = *base.add(16).cast::<i32>();

                                                  l41
                                                };
                                                Some(e)
                                              }
                                              _ => _rt::invalid_enum_discriminant(),
                                            }
                                                                };
                                                                Err(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::ResultValue(e61)
                                                }
                                                8 => {
                                                    let e61 = {
                                                        let l42 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        l42 as u8
                                                    };
                                                    WitNode::PrimU8(e61)
                                                }
                                                9 => {
                                                    let e61 = {
                                                        let l43 =
                                                            i32::from(*base.add(8).cast::<u16>());

                                                        l43 as u16
                                                    };
                                                    WitNode::PrimU16(e61)
                                                }
                                                10 => {
                                                    let e61 = {
                                                        let l44 = *base.add(8).cast::<i32>();

                                                        l44 as u32
                                                    };
                                                    WitNode::PrimU32(e61)
                                                }
                                                11 => {
                                                    let e61 = {
                                                        let l45 = *base.add(8).cast::<i64>();

                                                        l45 as u64
                                                    };
                                                    WitNode::PrimU64(e61)
                                                }
                                                12 => {
                                                    let e61 = {
                                                        let l46 =
                                                            i32::from(*base.add(8).cast::<i8>());

                                                        l46 as i8
                                                    };
                                                    WitNode::PrimS8(e61)
                                                }
                                                13 => {
                                                    let e61 = {
                                                        let l47 =
                                                            i32::from(*base.add(8).cast::<i16>());

                                                        l47 as i16
                                                    };
                                                    WitNode::PrimS16(e61)
                                                }
                                                14 => {
                                                    let e61 = {
                                                        let l48 = *base.add(8).cast::<i32>();

                                                        l48
                                                    };
                                                    WitNode::PrimS32(e61)
                                                }
                                                15 => {
                                                    let e61 = {
                                                        let l49 = *base.add(8).cast::<i64>();

                                                        l49
                                                    };
                                                    WitNode::PrimS64(e61)
                                                }
                                                16 => {
                                                    let e61 = {
                                                        let l50 = *base.add(8).cast::<f32>();

                                                        l50
                                                    };
                                                    WitNode::PrimFloat32(e61)
                                                }
                                                17 => {
                                                    let e61 = {
                                                        let l51 = *base.add(8).cast::<f64>();

                                                        l51
                                                    };
                                                    WitNode::PrimFloat64(e61)
                                                }
                                                18 => {
                                                    let e61 = {
                                                        let l52 = *base.add(8).cast::<i32>();

                                                        _rt::char_lift(l52 as u32)
                                                    };
                                                    WitNode::PrimChar(e61)
                                                }
                                                19 => {
                                                    let e61 = {
                                                        let l53 =
                                                            i32::from(*base.add(8).cast::<u8>());

                                                        _rt::bool_lift(l53 as u8)
                                                    };
                                                    WitNode::PrimBool(e61)
                                                }
                                                20 => {
                                                    let e61 = {
                                                        let l54 = *base.add(8).cast::<*mut u8>();
                                                        let l55 = *base.add(12).cast::<usize>();
                                                        let len56 = l55;
                                                        let bytes56 = _rt::Vec::from_raw_parts(
                                                            l54.cast(),
                                                            len56,
                                                            len56,
                                                        );

                                                        _rt::string_lift(bytes56)
                                                    };
                                                    WitNode::PrimString(e61)
                                                }
                                                n => {
                                                    debug_assert_eq!(
                                                        n, 21,
                                                        "invalid enum discriminant"
                                                    );
                                                    let e61 = {
                                                        let l57 = *base.add(8).cast::<*mut u8>();
                                                        let l58 = *base.add(12).cast::<usize>();
                                                        let len59 = l58;
                                                        let bytes59 = _rt::Vec::from_raw_parts(
                                                            l57.cast(),
                                                            len59,
                                                            len59,
                                                        );
                                                        let l60 = *base.add(16).cast::<i64>();

                                                        (
                                                            Uri {
                                                                value: _rt::string_lift(bytes59),
                                                            },
                                                            l60 as u64,
                                                        )
                                                    };
                                                    WitNode::Handle(e61)
                                                }
                                            };

                                            v61
                                        };
                                        result62.push(e62);
                                    }
                                    _rt::cabi_dealloc(base62, len62 * 24, 8);

                                    WitValue { nodes: result62 }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l63 = i32::from(*ptr13.add(4).cast::<u8>());
                                    let v76 = match l63 {
                                        0 => {
                                            let e76 = {
                                                let l64 = *ptr13.add(8).cast::<*mut u8>();
                                                let l65 = *ptr13.add(12).cast::<usize>();
                                                let len66 = l65;
                                                let bytes66 = _rt::Vec::from_raw_parts(
                                                    l64.cast(),
                                                    len66,
                                                    len66,
                                                );

                                                _rt::string_lift(bytes66)
                                            };
                                            RpcError::ProtocolError(e76)
                                        }
                                        1 => {
                                            let e76 = {
                                                let l67 = *ptr13.add(8).cast::<*mut u8>();
                                                let l68 = *ptr13.add(12).cast::<usize>();
                                                let len69 = l68;
                                                let bytes69 = _rt::Vec::from_raw_parts(
                                                    l67.cast(),
                                                    len69,
                                                    len69,
                                                );

                                                _rt::string_lift(bytes69)
                                            };
                                            RpcError::Denied(e76)
                                        }
                                        2 => {
                                            let e76 = {
                                                let l70 = *ptr13.add(8).cast::<*mut u8>();
                                                let l71 = *ptr13.add(12).cast::<usize>();
                                                let len72 = l71;
                                                let bytes72 = _rt::Vec::from_raw_parts(
                                                    l70.cast(),
                                                    len72,
                                                    len72,
                                                );

                                                _rt::string_lift(bytes72)
                                            };
                                            RpcError::NotFound(e76)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e76 = {
                                                let l73 = *ptr13.add(8).cast::<*mut u8>();
                                                let l74 = *ptr13.add(12).cast::<usize>();
                                                let len75 = l74;
                                                let bytes75 = _rt::Vec::from_raw_parts(
                                                    l73.cast(),
                                                    len75,
                                                    len75,
                                                );

                                                _rt::string_lift(bytes75)
                                            };
                                            RpcError::RemoteInternalError(e76)
                                        }
                                    };

                                    v76
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<(), RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec4.len() * 1,
                                                        1,
                                                    );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list
                                                    .extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                            ptr13,
                        );
                        let l14 = i32::from(*ptr13.add(0).cast::<u8>());
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l14 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l15 = i32::from(*ptr13.add(4).cast::<u8>());
                                    let v28 = match l15 {
                                        0 => {
                                            let e28 = {
                                                let l16 = *ptr13.add(8).cast::<*mut u8>();
                                                let l17 = *ptr13.add(12).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );

                                                _rt::string_lift(bytes18)
                                            };
                                            RpcError::ProtocolError(e28)
                                        }
                                        1 => {
                                            let e28 = {
                                                let l19 = *ptr13.add(8).cast::<*mut u8>();
                                                let l20 = *ptr13.add(12).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );

                                                _rt::string_lift(bytes21)
                                            };
                                            RpcError::Denied(e28)
                                        }
                                        2 => {
                                            let e28 = {
                                                let l22 = *ptr13.add(8).cast::<*mut u8>();
                                                let l23 = *ptr13.add(12).cast::<usize>();
                                                let len24 = l23;
                                                let bytes24 = _rt::Vec::from_raw_parts(
                                                    l22.cast(),
                                                    len24,
                                                    len24,
                                                );

                                                _rt::string_lift(bytes24)
                                            };
                                            RpcError::NotFound(e28)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e28 = {
                                                let l25 = *ptr13.add(8).cast::<*mut u8>();
                                                let l26 = *ptr13.add(12).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );

                                                _rt::string_lift(bytes27)
                                            };
                                            RpcError::RemoteInternalError(e28)
                                        }
                                    };

                                    v28
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn async_invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> FutureInvokeResult {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12.add(i * 8);
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len() * 24,
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    {
                                        ::core::ptr::null_mut()
                                    }
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11.add(i * 24);
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(12).cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 =
                                                    _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec4.len() * 1,
                                                        1,
                                                    );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr =
                                                        _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    {
                                                        ::core::ptr::null_mut()
                                                    }
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        })
                                                            as u8;
                                                    }
                                                }
                                                *base.add(12).cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list
                                                    .extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(12).cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(12).cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() =
                                                            _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                *base.add(16).cast::<i32>() =
                                                                    _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() =
                                                    (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                })
                                                    as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(12).cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(12).cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base.add(16).cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base.add(4).cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]wasm-rpc.async-invoke-and-await"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result12,
                            len12,
                        );
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        FutureInvokeResult::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]future-invoke-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<WitValue, RpcError>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 20]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]future-invoke-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(4).cast::<u8>());

                                    match l2 {
                                        0 => {
                                            let e = {
                                                let l3 = *ptr0.add(8).cast::<*mut u8>();
                                                let l4 = *ptr0.add(12).cast::<usize>();
                                                let base50 = l3;
                                                let len50 = l4;
                                                let mut result50 = _rt::Vec::with_capacity(len50);
                                                for i in 0..len50 {
                                                    let base = base50.add(i * 24);
                                                    let e50 = {
                                                        let l5 =
                                                            i32::from(*base.add(0).cast::<u8>());
                                                        let v49 = match l5 {
                                                            0 => {
                                                                let e49 = {
                                                                    let l6 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l7 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len8 = l7;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l6.cast(),
                                                                        len8,
                                                                        len8,
                                                                    )
                                                                };
                                                                WitNode::RecordValue(e49)
                                                            }
                                                            1 => {
                                                                let e49 = {
                                                                    let l9 =
                                                                        *base.add(8).cast::<i32>();
                                                                    let l10 = i32::from(
                                                                        *base.add(12).cast::<u8>(),
                                                                    );

                                                                    (l9 as u32, match l10 {
                                                                  0 => None,
                                                                  1 => {
                                                                    let e = {
                                                                      let l11 = *base.add(16).cast::<i32>();

                                                                      l11
                                                                    };
                                                                    Some(e)
                                                                  }
                                                                  _ => _rt::invalid_enum_discriminant(),
                                                                })
                                                                };
                                                                WitNode::VariantValue(e49)
                                                            }
                                                            2 => {
                                                                let e49 = {
                                                                    let l12 =
                                                                        *base.add(8).cast::<i32>();

                                                                    l12 as u32
                                                                };
                                                                WitNode::EnumValue(e49)
                                                            }
                                                            3 => {
                                                                let e49 = {
                                                                    let l13 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l14 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let base16 = l13;
                                                                    let len16 = l14;
                                                                    let mut result16 =
                                                                        _rt::Vec::with_capacity(
                                                                            len16,
                                                                        );
                                                                    for i in 0..len16 {
                                                                        let base =
                                                                            base16.add(i * 1);
                                                                        let e16 = {
                                                                            let l15 = i32::from(
                                                                                *base
                                                                                    .add(0)
                                                                                    .cast::<u8>(),
                                                                            );

                                                                            _rt::bool_lift(
                                                                                l15 as u8,
                                                                            )
                                                                        };
                                                                        result16.push(e16);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base16,
                                                                        len16 * 1,
                                                                        1,
                                                                    );

                                                                    result16
                                                                };
                                                                WitNode::FlagsValue(e49)
                                                            }
                                                            4 => {
                                                                let e49 = {
                                                                    let l17 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l18 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len19 = l18;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l17.cast(),
                                                                        len19,
                                                                        len19,
                                                                    )
                                                                };
                                                                WitNode::TupleValue(e49)
                                                            }
                                                            5 => {
                                                                let e49 = {
                                                                    let l20 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l21 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len22 = l21;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l20.cast(),
                                                                        len22,
                                                                        len22,
                                                                    )
                                                                };
                                                                WitNode::ListValue(e49)
                                                            }
                                                            6 => {
                                                                let e49 = {
                                                                    let l23 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    match l23 {
                                                                  0 => None,
                                                                  1 => {
                                                                    let e = {
                                                                      let l24 = *base.add(12).cast::<i32>();

                                                                      l24
                                                                    };
                                                                    Some(e)
                                                                  }
                                                                  _ => _rt::invalid_enum_discriminant(),
                                                                }
                                                                };
                                                                WitNode::OptionValue(e49)
                                                            }
                                                            7 => {
                                                                let e49 = {
                                                                    let l25 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    match l25 {
                                                                  0 => {
                                                                    let e = {
                                                                      let l26 = i32::from(*base.add(12).cast::<u8>());

                                                                      match l26 {
                                                                        0 => None,
                                                                        1 => {
                                                                          let e = {
                                                                            let l27 = *base.add(16).cast::<i32>();

                                                                            l27
                                                                          };
                                                                          Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                      }
                                                                    };
                                                                    Ok(e)
                                                                  }
                                                                  1 => {
                                                                    let e = {
                                                                      let l28 = i32::from(*base.add(12).cast::<u8>());

                                                                      match l28 {
                                                                        0 => None,
                                                                        1 => {
                                                                          let e = {
                                                                            let l29 = *base.add(16).cast::<i32>();

                                                                            l29
                                                                          };
                                                                          Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                      }
                                                                    };
                                                                    Err(e)
                                                                  }
                                                                  _ => _rt::invalid_enum_discriminant(),
                                                                }
                                                                };
                                                                WitNode::ResultValue(e49)
                                                            }
                                                            8 => {
                                                                let e49 = {
                                                                    let l30 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    l30 as u8
                                                                };
                                                                WitNode::PrimU8(e49)
                                                            }
                                                            9 => {
                                                                let e49 = {
                                                                    let l31 = i32::from(
                                                                        *base.add(8).cast::<u16>(),
                                                                    );

                                                                    l31 as u16
                                                                };
                                                                WitNode::PrimU16(e49)
                                                            }
                                                            10 => {
                                                                let e49 = {
                                                                    let l32 =
                                                                        *base.add(8).cast::<i32>();

                                                                    l32 as u32
                                                                };
                                                                WitNode::PrimU32(e49)
                                                            }
                                                            11 => {
                                                                let e49 = {
                                                                    let l33 =
                                                                        *base.add(8).cast::<i64>();

                                                                    l33 as u64
                                                                };
                                                                WitNode::PrimU64(e49)
                                                            }
                                                            12 => {
                                                                let e49 = {
                                                                    let l34 = i32::from(
                                                                        *base.add(8).cast::<i8>(),
                                                                    );

                                                                    l34 as i8
                                                                };
                                                                WitNode::PrimS8(e49)
                                                            }
                                                            13 => {
                                                                let e49 = {
                                                                    let l35 = i32::from(
                                                                        *base.add(8).cast::<i16>(),
                                                                    );

                                                                    l35 as i16
                                                                };
                                                                WitNode::PrimS16(e49)
                                                            }
                                                            14 => {
                                                                let e49 = {
                                                                    let l36 =
                                                                        *base.add(8).cast::<i32>();

                                                                    l36
                                                                };
                                                                WitNode::PrimS32(e49)
                                                            }
                                                            15 => {
                                                                let e49 = {
                                                                    let l37 =
                                                                        *base.add(8).cast::<i64>();

                                                                    l37
                                                                };
                                                                WitNode::PrimS64(e49)
                                                            }
                                                            16 => {
                                                                let e49 = {
                                                                    let l38 =
                                                                        *base.add(8).cast::<f32>();

                                                                    l38
                                                                };
                                                                WitNode::PrimFloat32(e49)
                                                            }
                                                            17 => {
                                                                let e49 = {
                                                                    let l39 =
                                                                        *base.add(8).cast::<f64>();

                                                                    l39
                                                                };
                                                                WitNode::PrimFloat64(e49)
                                                            }
                                                            18 => {
                                                                let e49 = {
                                                                    let l40 =
                                                                        *base.add(8).cast::<i32>();

                                                                    _rt::char_lift(l40 as u32)
                                                                };
                                                                WitNode::PrimChar(e49)
                                                            }
                                                            19 => {
                                                                let e49 = {
                                                                    let l41 = i32::from(
                                                                        *base.add(8).cast::<u8>(),
                                                                    );

                                                                    _rt::bool_lift(l41 as u8)
                                                                };
                                                                WitNode::PrimBool(e49)
                                                            }
                                                            20 => {
                                                                let e49 = {
                                                                    let l42 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l43 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len44 = l43;
                                                                    let bytes44 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l42.cast(),
                                                                            len44,
                                                                            len44,
                                                                        );

                                                                    _rt::string_lift(bytes44)
                                                                };
                                                                WitNode::PrimString(e49)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(
                                                                    n, 21,
                                                                    "invalid enum discriminant"
                                                                );
                                                                let e49 = {
                                                                    let l45 = *base
                                                                        .add(8)
                                                                        .cast::<*mut u8>();
                                                                    let l46 = *base
                                                                        .add(12)
                                                                        .cast::<usize>();
                                                                    let len47 = l46;
                                                                    let bytes47 =
                                                                        _rt::Vec::from_raw_parts(
                                                                            l45.cast(),
                                                                            len47,
                                                                            len47,
                                                                        );
                                                                    let l48 =
                                                                        *base.add(16).cast::<i64>();

                                                                    (
                                                                        Uri {
                                                                            value: _rt::string_lift(
                                                                                bytes47,
                                                                            ),
                                                                        },
                                                                        l48 as u64,
                                                                    )
                                                                };
                                                                WitNode::Handle(e49)
                                                            }
                                                        };

                                                        v49
                                                    };
                                                    result50.push(e50);
                                                }
                                                _rt::cabi_dealloc(base50, len50 * 24, 8);

                                                WitValue { nodes: result50 }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l51 = i32::from(*ptr0.add(8).cast::<u8>());
                                                let v64 = match l51 {
                                                    0 => {
                                                        let e64 = {
                                                            let l52 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l53 = *ptr0.add(16).cast::<usize>();
                                                            let len54 = l53;
                                                            let bytes54 = _rt::Vec::from_raw_parts(
                                                                l52.cast(),
                                                                len54,
                                                                len54,
                                                            );

                                                            _rt::string_lift(bytes54)
                                                        };
                                                        RpcError::ProtocolError(e64)
                                                    }
                                                    1 => {
                                                        let e64 = {
                                                            let l55 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l56 = *ptr0.add(16).cast::<usize>();
                                                            let len57 = l56;
                                                            let bytes57 = _rt::Vec::from_raw_parts(
                                                                l55.cast(),
                                                                len57,
                                                                len57,
                                                            );

                                                            _rt::string_lift(bytes57)
                                                        };
                                                        RpcError::Denied(e64)
                                                    }
                                                    2 => {
                                                        let e64 = {
                                                            let l58 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l59 = *ptr0.add(16).cast::<usize>();
                                                            let len60 = l59;
                                                            let bytes60 = _rt::Vec::from_raw_parts(
                                                                l58.cast(),
                                                                len60,
                                                                len60,
                                                            );

                                                            _rt::string_lift(bytes60)
                                                        };
                                                        RpcError::NotFound(e64)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(
                                                            n, 3,
                                                            "invalid enum discriminant"
                                                        );
                                                        let e64 = {
                                                            let l61 =
                                                                *ptr0.add(12).cast::<*mut u8>();
                                                            let l62 = *ptr0.add(16).cast::<usize>();
                                                            let len63 = l62;
                                                            let bytes63 = _rt::Vec::from_raw_parts(
                                                                l61.cast(),
                                                                len63,
                                                                len63,
                                                            );

                                                            _rt::string_lift(bytes63)
                                                        };
                                                        RpcError::RemoteInternalError(e64)
                                                    }
                                                };

                                                v64
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod timeline {
    #[allow(dead_code)]
    pub mod event_processor {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum EventValue {
                StringValue(_rt::String),
                IntValue(i64),
                FloatValue(f64),
                BoolValue(bool),
            }
            impl ::core::fmt::Debug for EventValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        EventValue::StringValue(e) => {
                            f.debug_tuple("EventValue::StringValue").field(e).finish()
                        }
                        EventValue::IntValue(e) => {
                            f.debug_tuple("EventValue::IntValue").field(e).finish()
                        }
                        EventValue::FloatValue(e) => {
                            f.debug_tuple("EventValue::FloatValue").field(e).finish()
                        }
                        EventValue::BoolValue(e) => {
                            f.debug_tuple("EventValue::BoolValue").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct Event {
                pub time: u64,
                pub event: _rt::Vec<(_rt::String, EventValue)>,
            }
            impl ::core::fmt::Debug for Event {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Event")
                        .field("time", &self.time)
                        .field("event", &self.event)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct TimePeriod {
                pub t1: u64,
                pub t2: Option<u64>,
            }
            impl ::core::fmt::Debug for TimePeriod {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TimePeriod")
                        .field("t1", &self.t1)
                        .field("t2", &self.t2)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TimelineResultPoint {
                pub time_period: TimePeriod,
                pub value: EventValue,
            }
            impl ::core::fmt::Debug for TimelineResultPoint {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TimelineResultPoint")
                        .field("time-period", &self.time_period)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TimelineResult {
                pub results: _rt::Vec<TimelineResultPoint>,
            }
            impl ::core::fmt::Debug for TimelineResult {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TimelineResult").field("results", &self.results).finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum EventPredicateOp {
                Equal,
                GreaterThan,
                LessThan,
            }
            impl ::core::fmt::Debug for EventPredicateOp {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        EventPredicateOp::Equal => {
                            f.debug_tuple("EventPredicateOp::Equal").finish()
                        }
                        EventPredicateOp::GreaterThan => {
                            f.debug_tuple("EventPredicateOp::GreaterThan").finish()
                        }
                        EventPredicateOp::LessThan => {
                            f.debug_tuple("EventPredicateOp::LessThan").finish()
                        }
                    }
                }
            }

            impl EventPredicateOp {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> EventPredicateOp {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => EventPredicateOp::Equal,
                        1 => EventPredicateOp::GreaterThan,
                        2 => EventPredicateOp::LessThan,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct EventPredicate {
                pub col_name: _rt::String,
                pub value: EventValue,
                pub op: EventPredicateOp,
            }
            impl ::core::fmt::Debug for EventPredicate {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("EventPredicate")
                        .field("col-name", &self.col_name)
                        .field("value", &self.value)
                        .field("op", &self.op)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_latest_event_state(
                event_col_name: &str,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = event_col_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-latest-event-state"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<*mut u8>();
                                let l4 = *ptr1.add(8).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                _rt::string_lift(bytes5)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = *ptr1.add(4).cast::<*mut u8>();
                                let l7 = *ptr1.add(8).cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                _rt::string_lift(bytes8)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_tl_has_existed(
                event_predicate: &EventPredicate,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let EventPredicate { col_name: col_name0, value: value0, op: op0 } =
                        event_predicate;
                    let vec1 = col_name0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result3_0, result3_1, result3_2) = match value0 {
                        EventValue::StringValue(e) => {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();

                            (
                                0i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr2.cast_mut());
                                    t
                                },
                                len2,
                            )
                        }
                        EventValue::IntValue(e) => {
                            (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                        }
                        EventValue::FloatValue(e) => (
                            2i32,
                            ::core::mem::MaybeUninit::new((_rt::as_f64(e)).to_bits() as i64 as u64),
                            0usize,
                        ),
                        EventValue::BoolValue(e) => (
                            3i32,
                            ::core::mem::MaybeUninit::new(i64::from(match e {
                                true => 1,
                                false => 0,
                            }) as u64),
                            0usize,
                        ),
                    };
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-tl-has-existed"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr1.cast_mut(),
                        len1,
                        result3_0,
                        result3_1,
                        result3_2,
                        op0.clone() as i32,
                        ptr4,
                    );
                    let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                    match l5 {
                        0 => {
                            let e = {
                                let l6 = *ptr4.add(4).cast::<*mut u8>();
                                let l7 = *ptr4.add(8).cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                _rt::string_lift(bytes8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l9 = *ptr4.add(4).cast::<*mut u8>();
                                let l10 = *ptr4.add(8).cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                                _rt::string_lift(bytes11)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_tl_has_existed_within(
                event_predicate: &EventPredicate,
                time: u64,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let EventPredicate { col_name: col_name0, value: value0, op: op0 } =
                        event_predicate;
                    let vec1 = col_name0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result3_0, result3_1, result3_2) = match value0 {
                        EventValue::StringValue(e) => {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();

                            (
                                0i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr2.cast_mut());
                                    t
                                },
                                len2,
                            )
                        }
                        EventValue::IntValue(e) => {
                            (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                        }
                        EventValue::FloatValue(e) => (
                            2i32,
                            ::core::mem::MaybeUninit::new((_rt::as_f64(e)).to_bits() as i64 as u64),
                            0usize,
                        ),
                        EventValue::BoolValue(e) => (
                            3i32,
                            ::core::mem::MaybeUninit::new(i64::from(match e {
                                true => 1,
                                false => 0,
                            }) as u64),
                            0usize,
                        ),
                    };
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-tl-has-existed-within"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: i64,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: i64,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr1.cast_mut(),
                        len1,
                        result3_0,
                        result3_1,
                        result3_2,
                        op0.clone() as i32,
                        _rt::as_i64(&time),
                        ptr4,
                    );
                    let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                    match l5 {
                        0 => {
                            let e = {
                                let l6 = *ptr4.add(4).cast::<*mut u8>();
                                let l7 = *ptr4.add(8).cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                _rt::string_lift(bytes8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l9 = *ptr4.add(4).cast::<*mut u8>();
                                let l10 = *ptr4.add(8).cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                                _rt::string_lift(bytes11)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn add_event(event: &Event) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let Event { time: time0, event: event0 } = event;
                    let vec4 = event0;
                    let len4 = vec4.len();
                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(vec4.len() * 24, 8);
                    let result4 = if layout4.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout4);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec4.into_iter().enumerate() {
                        let base = result4.add(i * 24);
                        {
                            let (t1_0, t1_1) = e;
                            let vec2 = t1_0;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base.add(4).cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                            match t1_1 {
                                EventValue::StringValue(e) => {
                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec3 = e;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    *base.add(20).cast::<usize>() = len3;
                                    *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                EventValue::IntValue(e) => {
                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                    *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                }
                                EventValue::FloatValue(e) => {
                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                    *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                }
                                EventValue::BoolValue(e) => {
                                    *base.add(8).cast::<u8>() = (3i32) as u8;
                                    *base.add(16).cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    })
                                        as u8;
                                }
                            }
                        }
                    }
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "add-event"]
                        fn wit_import(_: i64, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(time0), result4, len4, ptr5);
                    let l6 = i32::from(*ptr5.add(0).cast::<u8>());
                    if layout4.size() != 0 {
                        _rt::alloc::dealloc(result4.cast(), layout4);
                    }
                    match l6 {
                        0 => {
                            let e = {
                                let l7 = *ptr5.add(4).cast::<*mut u8>();
                                let l8 = *ptr5.add(8).cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                _rt::string_lift(bytes9)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l10 = *ptr5.add(4).cast::<*mut u8>();
                                let l11 = *ptr5.add(8).cast::<usize>();
                                let len12 = l11;
                                let bytes12 = _rt::Vec::from_raw_parts(l10.cast(), len12, len12);

                                _rt::string_lift(bytes12)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn latest_event_to_state(t1: u64) -> Result<TimelineResult, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "latest-event-to-state"]
                        fn wit_import(_: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&t1), ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<*mut u8>();
                                let l3 = *ptr0.add(8).cast::<usize>();
                                let base15 = l2;
                                let len15 = l3;
                                let mut result15 = _rt::Vec::with_capacity(len15);
                                for i in 0..len15 {
                                    let base = base15.add(i * 40);
                                    let e15 = {
                                        let l4 = *base.add(0).cast::<i64>();
                                        let l5 = i32::from(*base.add(8).cast::<u8>());
                                        let l7 = i32::from(*base.add(24).cast::<u8>());
                                        let v14 = match l7 {
                                            0 => {
                                                let e14 = {
                                                    let l8 = *base.add(32).cast::<*mut u8>();
                                                    let l9 = *base.add(36).cast::<usize>();
                                                    let len10 = l9;
                                                    let bytes10 = _rt::Vec::from_raw_parts(
                                                        l8.cast(),
                                                        len10,
                                                        len10,
                                                    );

                                                    _rt::string_lift(bytes10)
                                                };
                                                EventValue::StringValue(e14)
                                            }
                                            1 => {
                                                let e14 = {
                                                    let l11 = *base.add(32).cast::<i64>();

                                                    l11
                                                };
                                                EventValue::IntValue(e14)
                                            }
                                            2 => {
                                                let e14 = {
                                                    let l12 = *base.add(32).cast::<f64>();

                                                    l12
                                                };
                                                EventValue::FloatValue(e14)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                let e14 = {
                                                    let l13 = i32::from(*base.add(32).cast::<u8>());

                                                    _rt::bool_lift(l13 as u8)
                                                };
                                                EventValue::BoolValue(e14)
                                            }
                                        };

                                        TimelineResultPoint {
                                            time_period: TimePeriod {
                                                t1: l4 as u64,
                                                t2: match l5 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l6 = *base.add(16).cast::<i64>();

                                                            l6 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            value: v14,
                                        }
                                    };
                                    result15.push(e15);
                                }
                                _rt::cabi_dealloc(base15, len15 * 40, 8);

                                TimelineResult { results: result15 }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l16 = *ptr0.add(4).cast::<*mut u8>();
                                let l17 = *ptr0.add(8).cast::<usize>();
                                let len18 = l17;
                                let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                _rt::string_lift(bytes18)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn tl_has_existed(t1: u64) -> Result<TimelineResult, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "tl-has-existed"]
                        fn wit_import(_: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&t1), ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<*mut u8>();
                                let l3 = *ptr0.add(8).cast::<usize>();
                                let base15 = l2;
                                let len15 = l3;
                                let mut result15 = _rt::Vec::with_capacity(len15);
                                for i in 0..len15 {
                                    let base = base15.add(i * 40);
                                    let e15 = {
                                        let l4 = *base.add(0).cast::<i64>();
                                        let l5 = i32::from(*base.add(8).cast::<u8>());
                                        let l7 = i32::from(*base.add(24).cast::<u8>());
                                        let v14 = match l7 {
                                            0 => {
                                                let e14 = {
                                                    let l8 = *base.add(32).cast::<*mut u8>();
                                                    let l9 = *base.add(36).cast::<usize>();
                                                    let len10 = l9;
                                                    let bytes10 = _rt::Vec::from_raw_parts(
                                                        l8.cast(),
                                                        len10,
                                                        len10,
                                                    );

                                                    _rt::string_lift(bytes10)
                                                };
                                                EventValue::StringValue(e14)
                                            }
                                            1 => {
                                                let e14 = {
                                                    let l11 = *base.add(32).cast::<i64>();

                                                    l11
                                                };
                                                EventValue::IntValue(e14)
                                            }
                                            2 => {
                                                let e14 = {
                                                    let l12 = *base.add(32).cast::<f64>();

                                                    l12
                                                };
                                                EventValue::FloatValue(e14)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                let e14 = {
                                                    let l13 = i32::from(*base.add(32).cast::<u8>());

                                                    _rt::bool_lift(l13 as u8)
                                                };
                                                EventValue::BoolValue(e14)
                                            }
                                        };

                                        TimelineResultPoint {
                                            time_period: TimePeriod {
                                                t1: l4 as u64,
                                                t2: match l5 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l6 = *base.add(16).cast::<i64>();

                                                            l6 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            value: v14,
                                        }
                                    };
                                    result15.push(e15);
                                }
                                _rt::cabi_dealloc(base15, len15 * 40, 8);

                                TimelineResult { results: result15 }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l16 = *ptr0.add(4).cast::<*mut u8>();
                                let l17 = *ptr0.add(8).cast::<usize>();
                                let len18 = l17;
                                let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                _rt::string_lift(bytes18)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn tl_has_existed_within(t1: u64) -> Result<TimelineResult, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "tl-has-existed-within"]
                        fn wit_import(_: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&t1), ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<*mut u8>();
                                let l3 = *ptr0.add(8).cast::<usize>();
                                let base15 = l2;
                                let len15 = l3;
                                let mut result15 = _rt::Vec::with_capacity(len15);
                                for i in 0..len15 {
                                    let base = base15.add(i * 40);
                                    let e15 = {
                                        let l4 = *base.add(0).cast::<i64>();
                                        let l5 = i32::from(*base.add(8).cast::<u8>());
                                        let l7 = i32::from(*base.add(24).cast::<u8>());
                                        let v14 = match l7 {
                                            0 => {
                                                let e14 = {
                                                    let l8 = *base.add(32).cast::<*mut u8>();
                                                    let l9 = *base.add(36).cast::<usize>();
                                                    let len10 = l9;
                                                    let bytes10 = _rt::Vec::from_raw_parts(
                                                        l8.cast(),
                                                        len10,
                                                        len10,
                                                    );

                                                    _rt::string_lift(bytes10)
                                                };
                                                EventValue::StringValue(e14)
                                            }
                                            1 => {
                                                let e14 = {
                                                    let l11 = *base.add(32).cast::<i64>();

                                                    l11
                                                };
                                                EventValue::IntValue(e14)
                                            }
                                            2 => {
                                                let e14 = {
                                                    let l12 = *base.add(32).cast::<f64>();

                                                    l12
                                                };
                                                EventValue::FloatValue(e14)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                let e14 = {
                                                    let l13 = i32::from(*base.add(32).cast::<u8>());

                                                    _rt::bool_lift(l13 as u8)
                                                };
                                                EventValue::BoolValue(e14)
                                            }
                                        };

                                        TimelineResultPoint {
                                            time_period: TimePeriod {
                                                t1: l4 as u64,
                                                t2: match l5 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l6 = *base.add(16).cast::<i64>();

                                                            l6 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            value: v14,
                                        }
                                    };
                                    result15.push(e15);
                                }
                                _rt::cabi_dealloc(base15, len15 * 40, 8);

                                TimelineResult { results: result15 }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l16 = *ptr0.add(4).cast::<*mut u8>();
                                let l17 = *ptr0.add(8).cast::<usize>();
                                let len18 = l17;
                                let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                _rt::string_lift(bytes18)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod wasi {
    #[allow(dead_code)]
    pub mod io {
        #[allow(dead_code, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// `pollable` epresents a single I/O event which may be ready, or not.

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }

            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self { handle: _rt::Resource::from_handle(handle) }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the readiness of a pollable. This function never blocks.
                ///
                /// Returns `true` when the pollable is ready, and `false` otherwise.
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// `block` returns immediately if the pollable is ready, and otherwise
                /// blocks until ready.
                ///
                /// This function is equivalent to calling `poll.poll` on a list
                /// containing only this pollable.
                pub fn block(&self) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                        extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import(_: i32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Poll for completion on a set of pollables.
            ///
            /// This function takes a list of pollables, which identify I/O sources of
            /// interest, and waits until one or more of the events is ready for I/O.
            ///
            /// The result `list<u32>` contains one or more indices of handles in the
            /// argument list that is ready for I/O.
            ///
            /// If the list contains more elements than can be indexed with a `u32`
            /// value, this function traps.
            ///
            /// A timeout can be implemented by adding a pollable from the
            /// wasi-clocks API to the list.
            ///
            /// This function does not return a `result`; polling in itself does not
            /// do any I/O so it doesn't fail. If any of the I/O sources identified by
            /// the pollables has an error, it is indicated by marking the source as
            /// being reaedy for I/O.
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(vec0.len() * 4, 4);
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
                    extern "C" {
                        #[link_name = "poll"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(result0, len0, ptr1);
                    let l2 = *ptr1.add(0).cast::<*mut u8>();
                    let l3 = *ptr1.add(4).cast::<usize>();
                    let len4 = l3;
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod timeline {
        #[allow(dead_code)]
        pub mod event_processor_stub {
            #[allow(dead_code, clippy::all)]
            pub mod stub_event_processor {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type GolemRpcUri = super::super::super::super::golem::rpc::types::Uri;
                pub type WasiIoPollable = super::super::super::super::wasi::io::poll::Pollable;
                pub type Event = super::super::super::super::timeline::event_processor::api::Event;
                pub type TimelineResult =
                    super::super::super::super::timeline::event_processor::api::TimelineResult;
                pub type EventPredicate =
                    super::super::super::super::timeline::event_processor::api::EventPredicate;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureInitializeLatestEventStateResult {
                    handle: _rt::Resource<FutureInitializeLatestEventStateResult>,
                }

                type _FutureInitializeLatestEventStateResultRep<T> = Option<T>;

                impl FutureInitializeLatestEventStateResult {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `FutureInitializeLatestEventStateResult`.
                    pub fn new<T: GuestFutureInitializeLatestEventStateResult>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _FutureInitializeLatestEventStateResultRep<T> = Some(val);
                        let ptr: *mut _FutureInitializeLatestEventStateResultRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestFutureInitializeLatestEventStateResult>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestFutureInitializeLatestEventStateResult>(
                        &mut self,
                    ) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestFutureInitializeLatestEventStateResult>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestFutureInitializeLatestEventStateResult` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(
                            handle as *mut _FutureInitializeLatestEventStateResultRep<T>,
                        );
                    }

                    fn as_ptr<T: GuestFutureInitializeLatestEventStateResult>(
                        &self,
                    ) -> *mut _FutureInitializeLatestEventStateResultRep<T> {
                        FutureInitializeLatestEventStateResult::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`FutureInitializeLatestEventStateResult`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureInitializeLatestEventStateResultBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a FutureInitializeLatestEventStateResult>,
                }

                impl<'a> FutureInitializeLatestEventStateResultBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestFutureInitializeLatestEventStateResult>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(
                        &self,
                    ) -> *mut _FutureInitializeLatestEventStateResultRep<T> {
                        FutureInitializeLatestEventStateResult::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for FutureInitializeLatestEventStateResult {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]future-initialize-latest-event-state-result"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureInitializeTlHasExistedResult {
                    handle: _rt::Resource<FutureInitializeTlHasExistedResult>,
                }

                type _FutureInitializeTlHasExistedResultRep<T> = Option<T>;

                impl FutureInitializeTlHasExistedResult {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `FutureInitializeTlHasExistedResult`.
                    pub fn new<T: GuestFutureInitializeTlHasExistedResult>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _FutureInitializeTlHasExistedResultRep<T> = Some(val);
                        let ptr: *mut _FutureInitializeTlHasExistedResultRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestFutureInitializeTlHasExistedResult>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestFutureInitializeTlHasExistedResult>(
                        &mut self,
                    ) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestFutureInitializeTlHasExistedResult>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestFutureInitializeTlHasExistedResult` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(
                            handle as *mut _FutureInitializeTlHasExistedResultRep<T>,
                        );
                    }

                    fn as_ptr<T: GuestFutureInitializeTlHasExistedResult>(
                        &self,
                    ) -> *mut _FutureInitializeTlHasExistedResultRep<T> {
                        FutureInitializeTlHasExistedResult::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`FutureInitializeTlHasExistedResult`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureInitializeTlHasExistedResultBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a FutureInitializeTlHasExistedResult>,
                }

                impl<'a> FutureInitializeTlHasExistedResultBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestFutureInitializeTlHasExistedResult>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _FutureInitializeTlHasExistedResultRep<T> {
                        FutureInitializeTlHasExistedResult::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for FutureInitializeTlHasExistedResult {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]future-initialize-tl-has-existed-result"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureInitializeTlHasExistedWithinResult {
                    handle: _rt::Resource<FutureInitializeTlHasExistedWithinResult>,
                }

                type _FutureInitializeTlHasExistedWithinResultRep<T> = Option<T>;

                impl FutureInitializeTlHasExistedWithinResult {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `FutureInitializeTlHasExistedWithinResult`.
                    pub fn new<T: GuestFutureInitializeTlHasExistedWithinResult>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _FutureInitializeTlHasExistedWithinResultRep<T> = Some(val);
                        let ptr: *mut _FutureInitializeTlHasExistedWithinResultRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestFutureInitializeTlHasExistedWithinResult>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestFutureInitializeTlHasExistedWithinResult>(
                        &mut self,
                    ) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestFutureInitializeTlHasExistedWithinResult>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestFutureInitializeTlHasExistedWithinResult` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(
                            handle as *mut _FutureInitializeTlHasExistedWithinResultRep<T>,
                        );
                    }

                    fn as_ptr<T: GuestFutureInitializeTlHasExistedWithinResult>(
                        &self,
                    ) -> *mut _FutureInitializeTlHasExistedWithinResultRep<T> {
                        FutureInitializeTlHasExistedWithinResult::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`FutureInitializeTlHasExistedWithinResult`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureInitializeTlHasExistedWithinResultBorrow<'a> {
                    rep: *mut u8,
                    _marker:
                        core::marker::PhantomData<&'a FutureInitializeTlHasExistedWithinResult>,
                }

                impl<'a> FutureInitializeTlHasExistedWithinResultBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestFutureInitializeTlHasExistedWithinResult>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(
                        &self,
                    ) -> *mut _FutureInitializeTlHasExistedWithinResultRep<T> {
                        FutureInitializeTlHasExistedWithinResult::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for FutureInitializeTlHasExistedWithinResult {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]future-initialize-tl-has-existed-within-result"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureAddEventResult {
                    handle: _rt::Resource<FutureAddEventResult>,
                }

                type _FutureAddEventResultRep<T> = Option<T>;

                impl FutureAddEventResult {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `FutureAddEventResult`.
                    pub fn new<T: GuestFutureAddEventResult>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _FutureAddEventResultRep<T> = Some(val);
                        let ptr: *mut _FutureAddEventResultRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestFutureAddEventResult>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestFutureAddEventResult>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestFutureAddEventResult>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestFutureAddEventResult` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _FutureAddEventResultRep<T>);
                    }

                    fn as_ptr<T: GuestFutureAddEventResult>(
                        &self,
                    ) -> *mut _FutureAddEventResultRep<T> {
                        FutureAddEventResult::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`FutureAddEventResult`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureAddEventResultBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a FutureAddEventResult>,
                }

                impl<'a> FutureAddEventResultBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestFutureAddEventResult>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _FutureAddEventResultRep<T> {
                        FutureAddEventResult::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for FutureAddEventResult {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]future-add-event-result"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureLatestEventToStateResult {
                    handle: _rt::Resource<FutureLatestEventToStateResult>,
                }

                type _FutureLatestEventToStateResultRep<T> = Option<T>;

                impl FutureLatestEventToStateResult {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `FutureLatestEventToStateResult`.
                    pub fn new<T: GuestFutureLatestEventToStateResult>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _FutureLatestEventToStateResultRep<T> = Some(val);
                        let ptr: *mut _FutureLatestEventToStateResultRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestFutureLatestEventToStateResult>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestFutureLatestEventToStateResult>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestFutureLatestEventToStateResult>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestFutureLatestEventToStateResult` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(
                            handle as *mut _FutureLatestEventToStateResultRep<T>,
                        );
                    }

                    fn as_ptr<T: GuestFutureLatestEventToStateResult>(
                        &self,
                    ) -> *mut _FutureLatestEventToStateResultRep<T> {
                        FutureLatestEventToStateResult::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`FutureLatestEventToStateResult`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureLatestEventToStateResultBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a FutureLatestEventToStateResult>,
                }

                impl<'a> FutureLatestEventToStateResultBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestFutureLatestEventToStateResult>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _FutureLatestEventToStateResultRep<T> {
                        FutureLatestEventToStateResult::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for FutureLatestEventToStateResult {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]future-latest-event-to-state-result"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureTlHasExistedResult {
                    handle: _rt::Resource<FutureTlHasExistedResult>,
                }

                type _FutureTlHasExistedResultRep<T> = Option<T>;

                impl FutureTlHasExistedResult {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `FutureTlHasExistedResult`.
                    pub fn new<T: GuestFutureTlHasExistedResult>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _FutureTlHasExistedResultRep<T> = Some(val);
                        let ptr: *mut _FutureTlHasExistedResultRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestFutureTlHasExistedResult>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestFutureTlHasExistedResult>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestFutureTlHasExistedResult>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestFutureTlHasExistedResult` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _FutureTlHasExistedResultRep<T>);
                    }

                    fn as_ptr<T: GuestFutureTlHasExistedResult>(
                        &self,
                    ) -> *mut _FutureTlHasExistedResultRep<T> {
                        FutureTlHasExistedResult::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`FutureTlHasExistedResult`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureTlHasExistedResultBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a FutureTlHasExistedResult>,
                }

                impl<'a> FutureTlHasExistedResultBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestFutureTlHasExistedResult>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _FutureTlHasExistedResultRep<T> {
                        FutureTlHasExistedResult::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for FutureTlHasExistedResult {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]future-tl-has-existed-result"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureTlHasExistedWithinResult {
                    handle: _rt::Resource<FutureTlHasExistedWithinResult>,
                }

                type _FutureTlHasExistedWithinResultRep<T> = Option<T>;

                impl FutureTlHasExistedWithinResult {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `FutureTlHasExistedWithinResult`.
                    pub fn new<T: GuestFutureTlHasExistedWithinResult>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _FutureTlHasExistedWithinResultRep<T> = Some(val);
                        let ptr: *mut _FutureTlHasExistedWithinResultRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestFutureTlHasExistedWithinResult>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestFutureTlHasExistedWithinResult>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestFutureTlHasExistedWithinResult>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestFutureTlHasExistedWithinResult` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(
                            handle as *mut _FutureTlHasExistedWithinResultRep<T>,
                        );
                    }

                    fn as_ptr<T: GuestFutureTlHasExistedWithinResult>(
                        &self,
                    ) -> *mut _FutureTlHasExistedWithinResultRep<T> {
                        FutureTlHasExistedWithinResult::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`FutureTlHasExistedWithinResult`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct FutureTlHasExistedWithinResultBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a FutureTlHasExistedWithinResult>,
                }

                impl<'a> FutureTlHasExistedWithinResultBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestFutureTlHasExistedWithinResult>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _FutureTlHasExistedWithinResultRep<T> {
                        FutureTlHasExistedWithinResult::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for FutureTlHasExistedWithinResult {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]future-tl-has-existed-within-result"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Api {
                    handle: _rt::Resource<Api>,
                }

                type _ApiRep<T> = Option<T>;

                impl Api {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Api`.
                    pub fn new<T: GuestApi>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ApiRep<T> = Some(val);
                        let ptr: *mut _ApiRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestApi>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestApi>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestApi>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestApi` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _ApiRep<T>);
                    }

                    fn as_ptr<T: GuestApi>(&self) -> *mut _ApiRep<T> {
                        Api::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Api`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ApiBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Api>,
                }

                impl<'a> ApiBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestApi>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _ApiRep<T> {
                        Api::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Api {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]api"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_initialize_latest_event_state_result_subscribe_cabi<
                    T: GuestFutureInitializeLatestEventStateResult,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::subscribe(
                        FutureInitializeLatestEventStateResultBorrow::lift(arg0 as u32 as usize)
                            .get(),
                    );
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_initialize_latest_event_state_result_get_cabi<
                    T: GuestFutureInitializeLatestEventStateResult,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get(
                        FutureInitializeLatestEventStateResultBorrow::lift(arg0 as u32 as usize)
                            .get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Ok(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec2 = (e.into_bytes()).into_boxed_slice();
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    ::core::mem::forget(vec2);
                                    *ptr1.add(12).cast::<usize>() = len2;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                Err(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1.add(12).cast::<usize>() = len3;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_future_initialize_latest_event_state_result_get<
                    T: GuestFutureInitializeLatestEventStateResult,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                _ => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_initialize_tl_has_existed_result_subscribe_cabi<
                    T: GuestFutureInitializeTlHasExistedResult,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::subscribe(
                        FutureInitializeTlHasExistedResultBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_initialize_tl_has_existed_result_get_cabi<
                    T: GuestFutureInitializeTlHasExistedResult,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get(
                        FutureInitializeTlHasExistedResultBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Ok(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec2 = (e.into_bytes()).into_boxed_slice();
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    ::core::mem::forget(vec2);
                                    *ptr1.add(12).cast::<usize>() = len2;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                Err(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1.add(12).cast::<usize>() = len3;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_future_initialize_tl_has_existed_result_get<
                    T: GuestFutureInitializeTlHasExistedResult,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                _ => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_initialize_tl_has_existed_within_result_subscribe_cabi<
                    T: GuestFutureInitializeTlHasExistedWithinResult,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::subscribe(
                        FutureInitializeTlHasExistedWithinResultBorrow::lift(arg0 as u32 as usize)
                            .get(),
                    );
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_initialize_tl_has_existed_within_result_get_cabi<
                    T: GuestFutureInitializeTlHasExistedWithinResult,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get(
                        FutureInitializeTlHasExistedWithinResultBorrow::lift(arg0 as u32 as usize)
                            .get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Ok(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec2 = (e.into_bytes()).into_boxed_slice();
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    ::core::mem::forget(vec2);
                                    *ptr1.add(12).cast::<usize>() = len2;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                Err(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1.add(12).cast::<usize>() = len3;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_future_initialize_tl_has_existed_within_result_get<
                    T: GuestFutureInitializeTlHasExistedWithinResult,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                _ => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_add_event_result_subscribe_cabi<
                    T: GuestFutureAddEventResult,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::subscribe(FutureAddEventResultBorrow::lift(arg0 as u32 as usize).get());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_add_event_result_get_cabi<
                    T: GuestFutureAddEventResult,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::get(FutureAddEventResultBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Ok(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    let vec2 = (e.into_bytes()).into_boxed_slice();
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    ::core::mem::forget(vec2);
                                    *ptr1.add(12).cast::<usize>() = len2;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                Err(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1.add(12).cast::<usize>() = len3;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_future_add_event_result_get<
                    T: GuestFutureAddEventResult,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                _ => {
                                    let l4 = *arg0.add(8).cast::<*mut u8>();
                                    let l5 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_latest_event_to_state_result_subscribe_cabi<
                    T: GuestFutureLatestEventToStateResult,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::subscribe(
                        FutureLatestEventToStateResultBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_latest_event_to_state_result_get_cabi<
                    T: GuestFutureLatestEventToStateResult,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get(
                        FutureLatestEventToStateResultBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Ok(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    let super::super::super::super::timeline::event_processor::api::TimelineResult{ results:results2, } = e;
                                    let vec7 = results2;
                                    let len7 = vec7.len();
                                    let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec7.len() * 40,
                                        8,
                                    );
                                    let result7 = if layout7.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout7);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec7.into_iter().enumerate() {
                                        let base = result7.add(i * 40);
                                        {
                                            let super::super::super::super::timeline::event_processor::api::TimelineResultPoint{ time_period:time_period3, value:value3, } = e;
                                            let super::super::super::super::timeline::event_processor::api::TimePeriod{ t1:t14, t2:t24, } = time_period3;
                                            *base.add(0).cast::<i64>() = _rt::as_i64(t14);
                                            match t24 {
                                                Some(e) => {
                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                None => {
                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            use super::super::super::super::timeline::event_processor::api::EventValue as V6;
                                            match value3 {
                                                V6::StringValue(e) => {
                                                    *base.add(24).cast::<u8>() = (0i32) as u8;
                                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                                    let len5 = vec5.len();
                                                    ::core::mem::forget(vec5);
                                                    *base.add(36).cast::<usize>() = len5;
                                                    *base.add(32).cast::<*mut u8>() =
                                                        ptr5.cast_mut();
                                                }
                                                V6::IntValue(e) => {
                                                    *base.add(24).cast::<u8>() = (1i32) as u8;
                                                    *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V6::FloatValue(e) => {
                                                    *base.add(24).cast::<u8>() = (2i32) as u8;
                                                    *base.add(32).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V6::BoolValue(e) => {
                                                    *base.add(24).cast::<u8>() = (3i32) as u8;
                                                    *base.add(32).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8;
                                                }
                                            }
                                        }
                                    }
                                    *ptr1.add(12).cast::<usize>() = len7;
                                    *ptr1.add(8).cast::<*mut u8>() = result7;
                                }
                                Err(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr1.add(12).cast::<usize>() = len8;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_future_latest_event_to_state_result_get<
                    T: GuestFutureLatestEventToStateResult,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l5 = *arg0.add(8).cast::<*mut u8>();
                                    let l6 = *arg0.add(12).cast::<usize>();
                                    let base7 = l5;
                                    let len7 = l6;
                                    for i in 0..len7 {
                                        let base = base7.add(i * 40);
                                        {
                                            let l2 = i32::from(*base.add(24).cast::<u8>());
                                            match l2 {
                                                0 => {
                                                    let l3 = *base.add(32).cast::<*mut u8>();
                                                    let l4 = *base.add(36).cast::<usize>();
                                                    _rt::cabi_dealloc(l3, l4, 1);
                                                }
                                                1 => (),
                                                2 => (),
                                                _ => (),
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base7, len7 * 40, 8);
                                }
                                _ => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_tl_has_existed_result_subscribe_cabi<
                    T: GuestFutureTlHasExistedResult,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::subscribe(
                        FutureTlHasExistedResultBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_tl_has_existed_result_get_cabi<
                    T: GuestFutureTlHasExistedResult,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::get(FutureTlHasExistedResultBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Ok(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    let super::super::super::super::timeline::event_processor::api::TimelineResult{ results:results2, } = e;
                                    let vec7 = results2;
                                    let len7 = vec7.len();
                                    let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec7.len() * 40,
                                        8,
                                    );
                                    let result7 = if layout7.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout7);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec7.into_iter().enumerate() {
                                        let base = result7.add(i * 40);
                                        {
                                            let super::super::super::super::timeline::event_processor::api::TimelineResultPoint{ time_period:time_period3, value:value3, } = e;
                                            let super::super::super::super::timeline::event_processor::api::TimePeriod{ t1:t14, t2:t24, } = time_period3;
                                            *base.add(0).cast::<i64>() = _rt::as_i64(t14);
                                            match t24 {
                                                Some(e) => {
                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                None => {
                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            use super::super::super::super::timeline::event_processor::api::EventValue as V6;
                                            match value3 {
                                                V6::StringValue(e) => {
                                                    *base.add(24).cast::<u8>() = (0i32) as u8;
                                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                                    let len5 = vec5.len();
                                                    ::core::mem::forget(vec5);
                                                    *base.add(36).cast::<usize>() = len5;
                                                    *base.add(32).cast::<*mut u8>() =
                                                        ptr5.cast_mut();
                                                }
                                                V6::IntValue(e) => {
                                                    *base.add(24).cast::<u8>() = (1i32) as u8;
                                                    *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V6::FloatValue(e) => {
                                                    *base.add(24).cast::<u8>() = (2i32) as u8;
                                                    *base.add(32).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V6::BoolValue(e) => {
                                                    *base.add(24).cast::<u8>() = (3i32) as u8;
                                                    *base.add(32).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8;
                                                }
                                            }
                                        }
                                    }
                                    *ptr1.add(12).cast::<usize>() = len7;
                                    *ptr1.add(8).cast::<*mut u8>() = result7;
                                }
                                Err(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr1.add(12).cast::<usize>() = len8;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_future_tl_has_existed_result_get<
                    T: GuestFutureTlHasExistedResult,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l5 = *arg0.add(8).cast::<*mut u8>();
                                    let l6 = *arg0.add(12).cast::<usize>();
                                    let base7 = l5;
                                    let len7 = l6;
                                    for i in 0..len7 {
                                        let base = base7.add(i * 40);
                                        {
                                            let l2 = i32::from(*base.add(24).cast::<u8>());
                                            match l2 {
                                                0 => {
                                                    let l3 = *base.add(32).cast::<*mut u8>();
                                                    let l4 = *base.add(36).cast::<usize>();
                                                    _rt::cabi_dealloc(l3, l4, 1);
                                                }
                                                1 => (),
                                                2 => (),
                                                _ => (),
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base7, len7 * 40, 8);
                                }
                                _ => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_tl_has_existed_within_result_subscribe_cabi<
                    T: GuestFutureTlHasExistedWithinResult,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::subscribe(
                        FutureTlHasExistedWithinResultBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_future_tl_has_existed_within_result_get_cabi<
                    T: GuestFutureTlHasExistedWithinResult,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get(
                        FutureTlHasExistedWithinResultBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Ok(e) => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                    let super::super::super::super::timeline::event_processor::api::TimelineResult{ results:results2, } = e;
                                    let vec7 = results2;
                                    let len7 = vec7.len();
                                    let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec7.len() * 40,
                                        8,
                                    );
                                    let result7 = if layout7.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout7);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec7.into_iter().enumerate() {
                                        let base = result7.add(i * 40);
                                        {
                                            let super::super::super::super::timeline::event_processor::api::TimelineResultPoint{ time_period:time_period3, value:value3, } = e;
                                            let super::super::super::super::timeline::event_processor::api::TimePeriod{ t1:t14, t2:t24, } = time_period3;
                                            *base.add(0).cast::<i64>() = _rt::as_i64(t14);
                                            match t24 {
                                                Some(e) => {
                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                None => {
                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            use super::super::super::super::timeline::event_processor::api::EventValue as V6;
                                            match value3 {
                                                V6::StringValue(e) => {
                                                    *base.add(24).cast::<u8>() = (0i32) as u8;
                                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                                    let len5 = vec5.len();
                                                    ::core::mem::forget(vec5);
                                                    *base.add(36).cast::<usize>() = len5;
                                                    *base.add(32).cast::<*mut u8>() =
                                                        ptr5.cast_mut();
                                                }
                                                V6::IntValue(e) => {
                                                    *base.add(24).cast::<u8>() = (1i32) as u8;
                                                    *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V6::FloatValue(e) => {
                                                    *base.add(24).cast::<u8>() = (2i32) as u8;
                                                    *base.add(32).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V6::BoolValue(e) => {
                                                    *base.add(24).cast::<u8>() = (3i32) as u8;
                                                    *base.add(32).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    })
                                                        as u8;
                                                }
                                            }
                                        }
                                    }
                                    *ptr1.add(12).cast::<usize>() = len7;
                                    *ptr1.add(8).cast::<*mut u8>() = result7;
                                }
                                Err(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr1.add(12).cast::<usize>() = len8;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                            };
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_future_tl_has_existed_within_result_get<
                    T: GuestFutureTlHasExistedWithinResult,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l5 = *arg0.add(8).cast::<*mut u8>();
                                    let l6 = *arg0.add(12).cast::<usize>();
                                    let base7 = l5;
                                    let len7 = l6;
                                    for i in 0..len7 {
                                        let base = base7.add(i * 40);
                                        {
                                            let l2 = i32::from(*base.add(24).cast::<u8>());
                                            match l2 {
                                                0 => {
                                                    let l3 = *base.add(32).cast::<*mut u8>();
                                                    let l4 = *base.add(36).cast::<usize>();
                                                    _rt::cabi_dealloc(l3, l4, 1);
                                                }
                                                1 => (),
                                                2 => (),
                                                _ => (),
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base7, len7 * 40, 8);
                                }
                                _ => {
                                    let l8 = *arg0.add(8).cast::<*mut u8>();
                                    let l9 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_api_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 =
                        Api::new(T::new(super::super::super::super::golem::rpc::types::Uri {
                            value: _rt::string_lift(bytes0),
                        }));
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_blocking_initialize_latest_event_state_cabi<
                    T: GuestApi,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::blocking_initialize_latest_event_state(
                        ApiBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec4 = (e.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr2.add(8).cast::<usize>() = len4;
                            *ptr2.add(4).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_blocking_initialize_latest_event_state<
                    T: GuestApi,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_initialize_latest_event_state_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::initialize_latest_event_state(
                        ApiBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_blocking_initialize_tl_has_existed_cabi<
                    T: GuestApi,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                    arg4: ::core::mem::MaybeUninit<u64>,
                    arg5: usize,
                    arg6: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    use super::super::super::super::timeline::event_processor::api::EventValue as V2;
                    let v2 = match arg3 {
                        0 => {
                            let e2 = {
                                let len1 = arg5;
                                let bytes1 = _rt::Vec::from_raw_parts(
                                    arg4.as_ptr().cast::<*mut u8>().read().cast(),
                                    len1,
                                    len1,
                                );

                                _rt::string_lift(bytes1)
                            };
                            V2::StringValue(e2)
                        }
                        1 => {
                            let e2 = arg4.assume_init() as i64;
                            V2::IntValue(e2)
                        }
                        2 => {
                            let e2 = f64::from_bits(arg4.assume_init() as i64 as u64);
                            V2::FloatValue(e2)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e2 = _rt::bool_lift(arg4.assume_init() as i64 as i32 as u8);
                            V2::BoolValue(e2)
                        }
                    };
                    let result3 = T::blocking_initialize_tl_has_existed(ApiBorrow::lift(arg0 as u32 as usize).get(), super::super::super::super::timeline::event_processor::api::EventPredicate{
                    col_name: _rt::string_lift(bytes0),
                    value: v2,
                    op: super::super::super::super::timeline::event_processor::api::EventPredicateOp::_lift(arg6 as u8),
                  });
                    let ptr4 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            let vec5 = (e.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *ptr4.add(8).cast::<usize>() = len5;
                            *ptr4.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr4.add(8).cast::<usize>() = len6;
                            *ptr4.add(4).cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_blocking_initialize_tl_has_existed<
                    T: GuestApi,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_initialize_tl_has_existed_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                    arg4: ::core::mem::MaybeUninit<u64>,
                    arg5: usize,
                    arg6: i32,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    use super::super::super::super::timeline::event_processor::api::EventValue as V2;
                    let v2 = match arg3 {
                        0 => {
                            let e2 = {
                                let len1 = arg5;
                                let bytes1 = _rt::Vec::from_raw_parts(
                                    arg4.as_ptr().cast::<*mut u8>().read().cast(),
                                    len1,
                                    len1,
                                );

                                _rt::string_lift(bytes1)
                            };
                            V2::StringValue(e2)
                        }
                        1 => {
                            let e2 = arg4.assume_init() as i64;
                            V2::IntValue(e2)
                        }
                        2 => {
                            let e2 = f64::from_bits(arg4.assume_init() as i64 as u64);
                            V2::FloatValue(e2)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e2 = _rt::bool_lift(arg4.assume_init() as i64 as i32 as u8);
                            V2::BoolValue(e2)
                        }
                    };
                    let result3 = T::initialize_tl_has_existed(ApiBorrow::lift(arg0 as u32 as usize).get(), super::super::super::super::timeline::event_processor::api::EventPredicate{
                  col_name: _rt::string_lift(bytes0),
                  value: v2,
                  op: super::super::super::super::timeline::event_processor::api::EventPredicateOp::_lift(arg6 as u8),
                });
                    (result3).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_blocking_initialize_tl_has_existed_within_cabi<
                    T: GuestApi,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                    arg4: ::core::mem::MaybeUninit<u64>,
                    arg5: usize,
                    arg6: i32,
                    arg7: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    use super::super::super::super::timeline::event_processor::api::EventValue as V2;
                    let v2 = match arg3 {
                        0 => {
                            let e2 = {
                                let len1 = arg5;
                                let bytes1 = _rt::Vec::from_raw_parts(
                                    arg4.as_ptr().cast::<*mut u8>().read().cast(),
                                    len1,
                                    len1,
                                );

                                _rt::string_lift(bytes1)
                            };
                            V2::StringValue(e2)
                        }
                        1 => {
                            let e2 = arg4.assume_init() as i64;
                            V2::IntValue(e2)
                        }
                        2 => {
                            let e2 = f64::from_bits(arg4.assume_init() as i64 as u64);
                            V2::FloatValue(e2)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e2 = _rt::bool_lift(arg4.assume_init() as i64 as i32 as u8);
                            V2::BoolValue(e2)
                        }
                    };
                    let result3 = T::blocking_initialize_tl_has_existed_within(ApiBorrow::lift(arg0 as u32 as usize).get(), super::super::super::super::timeline::event_processor::api::EventPredicate{
                col_name: _rt::string_lift(bytes0),
                value: v2,
                op: super::super::super::super::timeline::event_processor::api::EventPredicateOp::_lift(arg6 as u8),
              }, arg7 as u64);
                    let ptr4 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            let vec5 = (e.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *ptr4.add(8).cast::<usize>() = len5;
                            *ptr4.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr4.add(8).cast::<usize>() = len6;
                            *ptr4.add(4).cast::<*mut u8>() = ptr6.cast_mut();
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_blocking_initialize_tl_has_existed_within<
                    T: GuestApi,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_initialize_tl_has_existed_within_cabi<
                    T: GuestApi,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                    arg4: ::core::mem::MaybeUninit<u64>,
                    arg5: usize,
                    arg6: i32,
                    arg7: i64,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    use super::super::super::super::timeline::event_processor::api::EventValue as V2;
                    let v2 = match arg3 {
                        0 => {
                            let e2 = {
                                let len1 = arg5;
                                let bytes1 = _rt::Vec::from_raw_parts(
                                    arg4.as_ptr().cast::<*mut u8>().read().cast(),
                                    len1,
                                    len1,
                                );

                                _rt::string_lift(bytes1)
                            };
                            V2::StringValue(e2)
                        }
                        1 => {
                            let e2 = arg4.assume_init() as i64;
                            V2::IntValue(e2)
                        }
                        2 => {
                            let e2 = f64::from_bits(arg4.assume_init() as i64 as u64);
                            V2::FloatValue(e2)
                        }
                        n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e2 = _rt::bool_lift(arg4.assume_init() as i64 as i32 as u8);
                            V2::BoolValue(e2)
                        }
                    };
                    let result3 = T::initialize_tl_has_existed_within(ApiBorrow::lift(arg0 as u32 as usize).get(), super::super::super::super::timeline::event_processor::api::EventPredicate{
              col_name: _rt::string_lift(bytes0),
              value: v2,
              op: super::super::super::super::timeline::event_processor::api::EventPredicateOp::_lift(arg6 as u8),
            }, arg7 as u64);
                    (result3).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_blocking_add_event_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: i64,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base11 = arg2;
                    let len11 = arg3;
                    let mut result11 = _rt::Vec::with_capacity(len11);
                    for i in 0..len11 {
                        let base = base11.add(i * 24);
                        let e11 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = i32::from(*base.add(8).cast::<u8>());
                            use super::super::super::super::timeline::event_processor::api::EventValue as V10;
                            let v10 = match l3 {
                                0 => {
                                    let e10 = {
                                        let l4 = *base.add(16).cast::<*mut u8>();
                                        let l5 = *base.add(20).cast::<usize>();
                                        let len6 = l5;
                                        let bytes6 =
                                            _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                        _rt::string_lift(bytes6)
                                    };
                                    V10::StringValue(e10)
                                }
                                1 => {
                                    let e10 = {
                                        let l7 = *base.add(16).cast::<i64>();

                                        l7
                                    };
                                    V10::IntValue(e10)
                                }
                                2 => {
                                    let e10 = {
                                        let l8 = *base.add(16).cast::<f64>();

                                        l8
                                    };
                                    V10::FloatValue(e10)
                                }
                                n => {
                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                    let e10 = {
                                        let l9 = i32::from(*base.add(16).cast::<u8>());

                                        _rt::bool_lift(l9 as u8)
                                    };
                                    V10::BoolValue(e10)
                                }
                            };

                            (_rt::string_lift(bytes2), v10)
                        };
                        result11.push(e11);
                    }
                    _rt::cabi_dealloc(base11, len11 * 24, 8);
                    let result12 = T::blocking_add_event(
                        ApiBorrow::lift(arg0 as u32 as usize).get(),
                        super::super::super::super::timeline::event_processor::api::Event {
                            time: arg1 as u64,
                            event: result11,
                        },
                    );
                    let ptr13 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result12 {
                        Ok(e) => {
                            *ptr13.add(0).cast::<u8>() = (0i32) as u8;
                            let vec14 = (e.into_bytes()).into_boxed_slice();
                            let ptr14 = vec14.as_ptr().cast::<u8>();
                            let len14 = vec14.len();
                            ::core::mem::forget(vec14);
                            *ptr13.add(8).cast::<usize>() = len14;
                            *ptr13.add(4).cast::<*mut u8>() = ptr14.cast_mut();
                        }
                        Err(e) => {
                            *ptr13.add(0).cast::<u8>() = (1i32) as u8;
                            let vec15 = (e.into_bytes()).into_boxed_slice();
                            let ptr15 = vec15.as_ptr().cast::<u8>();
                            let len15 = vec15.len();
                            ::core::mem::forget(vec15);
                            *ptr13.add(8).cast::<usize>() = len15;
                            *ptr13.add(4).cast::<*mut u8>() = ptr15.cast_mut();
                        }
                    };
                    ptr13
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_blocking_add_event<T: GuestApi>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_add_event_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: i64,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base11 = arg2;
                    let len11 = arg3;
                    let mut result11 = _rt::Vec::with_capacity(len11);
                    for i in 0..len11 {
                        let base = base11.add(i * 24);
                        let e11 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = i32::from(*base.add(8).cast::<u8>());
                            use super::super::super::super::timeline::event_processor::api::EventValue as V10;
                            let v10 = match l3 {
                                0 => {
                                    let e10 = {
                                        let l4 = *base.add(16).cast::<*mut u8>();
                                        let l5 = *base.add(20).cast::<usize>();
                                        let len6 = l5;
                                        let bytes6 =
                                            _rt::Vec::from_raw_parts(l4.cast(), len6, len6);

                                        _rt::string_lift(bytes6)
                                    };
                                    V10::StringValue(e10)
                                }
                                1 => {
                                    let e10 = {
                                        let l7 = *base.add(16).cast::<i64>();

                                        l7
                                    };
                                    V10::IntValue(e10)
                                }
                                2 => {
                                    let e10 = {
                                        let l8 = *base.add(16).cast::<f64>();

                                        l8
                                    };
                                    V10::FloatValue(e10)
                                }
                                n => {
                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                    let e10 = {
                                        let l9 = i32::from(*base.add(16).cast::<u8>());

                                        _rt::bool_lift(l9 as u8)
                                    };
                                    V10::BoolValue(e10)
                                }
                            };

                            (_rt::string_lift(bytes2), v10)
                        };
                        result11.push(e11);
                    }
                    _rt::cabi_dealloc(base11, len11 * 24, 8);
                    let result12 = T::add_event(
                        ApiBorrow::lift(arg0 as u32 as usize).get(),
                        super::super::super::super::timeline::event_processor::api::Event {
                            time: arg1 as u64,
                            event: result11,
                        },
                    );
                    (result12).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_blocking_latest_event_to_state_cabi<
                    T: GuestApi,
                >(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::blocking_latest_event_to_state(
                        ApiBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::timeline::event_processor::api::TimelineResult{ results:results2, } = e;
                            let vec7 = results2;
                            let len7 = vec7.len();
                            let layout7 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec7.len() * 40, 8);
                            let result7 = if layout7.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout7);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec7.into_iter().enumerate() {
                                let base = result7.add(i * 40);
                                {
                                    let super::super::super::super::timeline::event_processor::api::TimelineResultPoint{ time_period:time_period3, value:value3, } = e;
                                    let super::super::super::super::timeline::event_processor::api::TimePeriod{ t1:t14, t2:t24, } = time_period3;
                                    *base.add(0).cast::<i64>() = _rt::as_i64(t14);
                                    match t24 {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    use super::super::super::super::timeline::event_processor::api::EventValue as V6;
                                    match value3 {
                                        V6::StringValue(e) => {
                                            *base.add(24).cast::<u8>() = (0i32) as u8;
                                            let vec5 = (e.into_bytes()).into_boxed_slice();
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();
                                            ::core::mem::forget(vec5);
                                            *base.add(36).cast::<usize>() = len5;
                                            *base.add(32).cast::<*mut u8>() = ptr5.cast_mut();
                                        }
                                        V6::IntValue(e) => {
                                            *base.add(24).cast::<u8>() = (1i32) as u8;
                                            *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                        }
                                        V6::FloatValue(e) => {
                                            *base.add(24).cast::<u8>() = (2i32) as u8;
                                            *base.add(32).cast::<f64>() = _rt::as_f64(e);
                                        }
                                        V6::BoolValue(e) => {
                                            *base.add(24).cast::<u8>() = (3i32) as u8;
                                            *base.add(32).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            })
                                                as u8;
                                        }
                                    }
                                }
                            }
                            *ptr1.add(8).cast::<usize>() = len7;
                            *ptr1.add(4).cast::<*mut u8>() = result7;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let vec8 = (e.into_bytes()).into_boxed_slice();
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            ::core::mem::forget(vec8);
                            *ptr1.add(8).cast::<usize>() = len8;
                            *ptr1.add(4).cast::<*mut u8>() = ptr8.cast_mut();
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_blocking_latest_event_to_state<
                    T: GuestApi,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l4 = *arg0.add(4).cast::<*mut u8>();
                            let l5 = *arg0.add(8).cast::<usize>();
                            let base6 = l4;
                            let len6 = l5;
                            for i in 0..len6 {
                                let base = base6.add(i * 40);
                                {
                                    let l1 = i32::from(*base.add(24).cast::<u8>());
                                    match l1 {
                                        0 => {
                                            let l2 = *base.add(32).cast::<*mut u8>();
                                            let l3 = *base.add(36).cast::<usize>();
                                            _rt::cabi_dealloc(l2, l3, 1);
                                        }
                                        1 => (),
                                        2 => (),
                                        _ => (),
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base6, len6 * 40, 8);
                        }
                        _ => {
                            let l7 = *arg0.add(4).cast::<*mut u8>();
                            let l8 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l7, l8, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_latest_event_to_state_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::latest_event_to_state(
                        ApiBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                    );
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_blocking_tl_has_existed_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::blocking_tl_has_existed(
                        ApiBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::timeline::event_processor::api::TimelineResult{ results:results2, } = e;
                            let vec7 = results2;
                            let len7 = vec7.len();
                            let layout7 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec7.len() * 40, 8);
                            let result7 = if layout7.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout7);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec7.into_iter().enumerate() {
                                let base = result7.add(i * 40);
                                {
                                    let super::super::super::super::timeline::event_processor::api::TimelineResultPoint{ time_period:time_period3, value:value3, } = e;
                                    let super::super::super::super::timeline::event_processor::api::TimePeriod{ t1:t14, t2:t24, } = time_period3;
                                    *base.add(0).cast::<i64>() = _rt::as_i64(t14);
                                    match t24 {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    use super::super::super::super::timeline::event_processor::api::EventValue as V6;
                                    match value3 {
                                        V6::StringValue(e) => {
                                            *base.add(24).cast::<u8>() = (0i32) as u8;
                                            let vec5 = (e.into_bytes()).into_boxed_slice();
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();
                                            ::core::mem::forget(vec5);
                                            *base.add(36).cast::<usize>() = len5;
                                            *base.add(32).cast::<*mut u8>() = ptr5.cast_mut();
                                        }
                                        V6::IntValue(e) => {
                                            *base.add(24).cast::<u8>() = (1i32) as u8;
                                            *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                        }
                                        V6::FloatValue(e) => {
                                            *base.add(24).cast::<u8>() = (2i32) as u8;
                                            *base.add(32).cast::<f64>() = _rt::as_f64(e);
                                        }
                                        V6::BoolValue(e) => {
                                            *base.add(24).cast::<u8>() = (3i32) as u8;
                                            *base.add(32).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            })
                                                as u8;
                                        }
                                    }
                                }
                            }
                            *ptr1.add(8).cast::<usize>() = len7;
                            *ptr1.add(4).cast::<*mut u8>() = result7;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let vec8 = (e.into_bytes()).into_boxed_slice();
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            ::core::mem::forget(vec8);
                            *ptr1.add(8).cast::<usize>() = len8;
                            *ptr1.add(4).cast::<*mut u8>() = ptr8.cast_mut();
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_blocking_tl_has_existed<T: GuestApi>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l4 = *arg0.add(4).cast::<*mut u8>();
                            let l5 = *arg0.add(8).cast::<usize>();
                            let base6 = l4;
                            let len6 = l5;
                            for i in 0..len6 {
                                let base = base6.add(i * 40);
                                {
                                    let l1 = i32::from(*base.add(24).cast::<u8>());
                                    match l1 {
                                        0 => {
                                            let l2 = *base.add(32).cast::<*mut u8>();
                                            let l3 = *base.add(36).cast::<usize>();
                                            _rt::cabi_dealloc(l2, l3, 1);
                                        }
                                        1 => (),
                                        2 => (),
                                        _ => (),
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base6, len6 * 40, 8);
                        }
                        _ => {
                            let l7 = *arg0.add(4).cast::<*mut u8>();
                            let l8 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l7, l8, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_tl_has_existed_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::tl_has_existed(ApiBorrow::lift(arg0 as u32 as usize).get(), arg1 as u64);
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_blocking_tl_has_existed_within_cabi<
                    T: GuestApi,
                >(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::blocking_tl_has_existed_within(
                        ApiBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::timeline::event_processor::api::TimelineResult{ results:results2, } = e;
                            let vec7 = results2;
                            let len7 = vec7.len();
                            let layout7 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec7.len() * 40, 8);
                            let result7 = if layout7.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout7);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec7.into_iter().enumerate() {
                                let base = result7.add(i * 40);
                                {
                                    let super::super::super::super::timeline::event_processor::api::TimelineResultPoint{ time_period:time_period3, value:value3, } = e;
                                    let super::super::super::super::timeline::event_processor::api::TimePeriod{ t1:t14, t2:t24, } = time_period3;
                                    *base.add(0).cast::<i64>() = _rt::as_i64(t14);
                                    match t24 {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    use super::super::super::super::timeline::event_processor::api::EventValue as V6;
                                    match value3 {
                                        V6::StringValue(e) => {
                                            *base.add(24).cast::<u8>() = (0i32) as u8;
                                            let vec5 = (e.into_bytes()).into_boxed_slice();
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();
                                            ::core::mem::forget(vec5);
                                            *base.add(36).cast::<usize>() = len5;
                                            *base.add(32).cast::<*mut u8>() = ptr5.cast_mut();
                                        }
                                        V6::IntValue(e) => {
                                            *base.add(24).cast::<u8>() = (1i32) as u8;
                                            *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                        }
                                        V6::FloatValue(e) => {
                                            *base.add(24).cast::<u8>() = (2i32) as u8;
                                            *base.add(32).cast::<f64>() = _rt::as_f64(e);
                                        }
                                        V6::BoolValue(e) => {
                                            *base.add(24).cast::<u8>() = (3i32) as u8;
                                            *base.add(32).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            })
                                                as u8;
                                        }
                                    }
                                }
                            }
                            *ptr1.add(8).cast::<usize>() = len7;
                            *ptr1.add(4).cast::<*mut u8>() = result7;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let vec8 = (e.into_bytes()).into_boxed_slice();
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            ::core::mem::forget(vec8);
                            *ptr1.add(8).cast::<usize>() = len8;
                            *ptr1.add(4).cast::<*mut u8>() = ptr8.cast_mut();
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_api_blocking_tl_has_existed_within<
                    T: GuestApi,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l4 = *arg0.add(4).cast::<*mut u8>();
                            let l5 = *arg0.add(8).cast::<usize>();
                            let base6 = l4;
                            let len6 = l5;
                            for i in 0..len6 {
                                let base = base6.add(i * 40);
                                {
                                    let l1 = i32::from(*base.add(24).cast::<u8>());
                                    match l1 {
                                        0 => {
                                            let l2 = *base.add(32).cast::<*mut u8>();
                                            let l3 = *base.add(36).cast::<usize>();
                                            _rt::cabi_dealloc(l2, l3, 1);
                                        }
                                        1 => (),
                                        2 => (),
                                        _ => (),
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base6, len6 * 40, 8);
                        }
                        _ => {
                            let l7 = *arg0.add(4).cast::<*mut u8>();
                            let l8 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l7, l8, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_api_tl_has_existed_within_cabi<T: GuestApi>(
                    arg0: *mut u8,
                    arg1: i64,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::tl_has_existed_within(
                        ApiBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u64,
                    );
                    (result0).take_handle() as i32
                }
                pub trait Guest {
                    type FutureInitializeLatestEventStateResult: GuestFutureInitializeLatestEventStateResult;
                    type FutureInitializeTlHasExistedResult: GuestFutureInitializeTlHasExistedResult;
                    type FutureInitializeTlHasExistedWithinResult: GuestFutureInitializeTlHasExistedWithinResult;
                    type FutureAddEventResult: GuestFutureAddEventResult;
                    type FutureLatestEventToStateResult: GuestFutureLatestEventToStateResult;
                    type FutureTlHasExistedResult: GuestFutureTlHasExistedResult;
                    type FutureTlHasExistedWithinResult: GuestFutureTlHasExistedWithinResult;
                    type Api: GuestApi;
                }
                pub trait GuestFutureInitializeLatestEventStateResult: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]future-initialize-latest-event-state-result"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]future-initialize-latest-event-state-result"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn subscribe(&self) -> WasiIoPollable;
                    fn get(&self) -> Option<Result<_rt::String, _rt::String>>;
                }
                pub trait GuestFutureInitializeTlHasExistedResult: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]future-initialize-tl-has-existed-result"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]future-initialize-tl-has-existed-result"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn subscribe(&self) -> WasiIoPollable;
                    fn get(&self) -> Option<Result<_rt::String, _rt::String>>;
                }
                pub trait GuestFutureInitializeTlHasExistedWithinResult: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]future-initialize-tl-has-existed-within-result"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]future-initialize-tl-has-existed-within-result"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn subscribe(&self) -> WasiIoPollable;
                    fn get(&self) -> Option<Result<_rt::String, _rt::String>>;
                }
                pub trait GuestFutureAddEventResult: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]future-add-event-result"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]future-add-event-result"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn subscribe(&self) -> WasiIoPollable;
                    fn get(&self) -> Option<Result<_rt::String, _rt::String>>;
                }
                pub trait GuestFutureLatestEventToStateResult: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]future-latest-event-to-state-result"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]future-latest-event-to-state-result"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn subscribe(&self) -> WasiIoPollable;
                    fn get(&self) -> Option<Result<TimelineResult, _rt::String>>;
                }
                pub trait GuestFutureTlHasExistedResult: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]future-tl-has-existed-result"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]future-tl-has-existed-result"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn subscribe(&self) -> WasiIoPollable;
                    fn get(&self) -> Option<Result<TimelineResult, _rt::String>>;
                }
                pub trait GuestFutureTlHasExistedWithinResult: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]future-tl-has-existed-within-result"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]future-tl-has-existed-within-result"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn subscribe(&self) -> WasiIoPollable;
                    fn get(&self) -> Option<Result<TimelineResult, _rt::String>>;
                }
                pub trait GuestApi: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]api"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]timeline:event-processor-stub/stub-event-processor"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]api"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn new(location: GolemRpcUri) -> Self;
                    fn blocking_initialize_latest_event_state(
                        &self,
                        event_col_name: _rt::String,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_latest_event_state(
                        &self,
                        event_col_name: _rt::String,
                    ) -> FutureInitializeLatestEventStateResult;
                    fn blocking_initialize_tl_has_existed(
                        &self,
                        event_predicate: EventPredicate,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_tl_has_existed(
                        &self,
                        event_predicate: EventPredicate,
                    ) -> FutureInitializeTlHasExistedResult;
                    fn blocking_initialize_tl_has_existed_within(
                        &self,
                        event_predicate: EventPredicate,
                        time: u64,
                    ) -> Result<_rt::String, _rt::String>;
                    fn initialize_tl_has_existed_within(
                        &self,
                        event_predicate: EventPredicate,
                        time: u64,
                    ) -> FutureInitializeTlHasExistedWithinResult;
                    fn blocking_add_event(&self, event: Event) -> Result<_rt::String, _rt::String>;
                    fn add_event(&self, event: Event) -> FutureAddEventResult;
                    fn blocking_latest_event_to_state(
                        &self,
                        t1: u64,
                    ) -> Result<TimelineResult, _rt::String>;
                    fn latest_event_to_state(&self, t1: u64) -> FutureLatestEventToStateResult;
                    fn blocking_tl_has_existed(
                        &self,
                        t1: u64,
                    ) -> Result<TimelineResult, _rt::String>;
                    fn tl_has_existed(&self, t1: u64) -> FutureTlHasExistedResult;
                    fn blocking_tl_has_existed_within(
                        &self,
                        t1: u64,
                    ) -> Result<TimelineResult, _rt::String>;
                    fn tl_has_existed_within(&self, t1: u64) -> FutureTlHasExistedWithinResult;
                }
                #[doc(hidden)]

                macro_rules! __export_timeline_event_processor_stub_stub_event_processor_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]future-initialize-latest-event-state-result.subscribe"]
    unsafe extern "C" fn export_method_future_initialize_latest_event_state_result_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_future_initialize_latest_event_state_result_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::FutureInitializeLatestEventStateResult>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]future-initialize-latest-event-state-result.get"]
    unsafe extern "C" fn export_method_future_initialize_latest_event_state_result_get(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_future_initialize_latest_event_state_result_get_cabi::<<$ty as $($path_to_types)*::Guest>::FutureInitializeLatestEventStateResult>(arg0)
    }
    #[export_name = "cabi_post_timeline:event-processor-stub/stub-event-processor#[method]future-initialize-latest-event-state-result.get"]
    unsafe extern "C" fn _post_return_method_future_initialize_latest_event_state_result_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_future_initialize_latest_event_state_result_get::<<$ty as $($path_to_types)*::Guest>::FutureInitializeLatestEventStateResult>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]future-initialize-tl-has-existed-result.subscribe"]
    unsafe extern "C" fn export_method_future_initialize_tl_has_existed_result_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_future_initialize_tl_has_existed_result_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::FutureInitializeTlHasExistedResult>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]future-initialize-tl-has-existed-result.get"]
    unsafe extern "C" fn export_method_future_initialize_tl_has_existed_result_get(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_future_initialize_tl_has_existed_result_get_cabi::<<$ty as $($path_to_types)*::Guest>::FutureInitializeTlHasExistedResult>(arg0)
    }
    #[export_name = "cabi_post_timeline:event-processor-stub/stub-event-processor#[method]future-initialize-tl-has-existed-result.get"]
    unsafe extern "C" fn _post_return_method_future_initialize_tl_has_existed_result_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_future_initialize_tl_has_existed_result_get::<<$ty as $($path_to_types)*::Guest>::FutureInitializeTlHasExistedResult>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]future-initialize-tl-has-existed-within-result.subscribe"]
    unsafe extern "C" fn export_method_future_initialize_tl_has_existed_within_result_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_future_initialize_tl_has_existed_within_result_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::FutureInitializeTlHasExistedWithinResult>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]future-initialize-tl-has-existed-within-result.get"]
    unsafe extern "C" fn export_method_future_initialize_tl_has_existed_within_result_get(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_future_initialize_tl_has_existed_within_result_get_cabi::<<$ty as $($path_to_types)*::Guest>::FutureInitializeTlHasExistedWithinResult>(arg0)
    }
    #[export_name = "cabi_post_timeline:event-processor-stub/stub-event-processor#[method]future-initialize-tl-has-existed-within-result.get"]
    unsafe extern "C" fn _post_return_method_future_initialize_tl_has_existed_within_result_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_future_initialize_tl_has_existed_within_result_get::<<$ty as $($path_to_types)*::Guest>::FutureInitializeTlHasExistedWithinResult>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]future-add-event-result.subscribe"]
    unsafe extern "C" fn export_method_future_add_event_result_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_future_add_event_result_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::FutureAddEventResult>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]future-add-event-result.get"]
    unsafe extern "C" fn export_method_future_add_event_result_get(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_future_add_event_result_get_cabi::<<$ty as $($path_to_types)*::Guest>::FutureAddEventResult>(arg0)
    }
    #[export_name = "cabi_post_timeline:event-processor-stub/stub-event-processor#[method]future-add-event-result.get"]
    unsafe extern "C" fn _post_return_method_future_add_event_result_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_future_add_event_result_get::<<$ty as $($path_to_types)*::Guest>::FutureAddEventResult>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]future-latest-event-to-state-result.subscribe"]
    unsafe extern "C" fn export_method_future_latest_event_to_state_result_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_future_latest_event_to_state_result_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::FutureLatestEventToStateResult>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]future-latest-event-to-state-result.get"]
    unsafe extern "C" fn export_method_future_latest_event_to_state_result_get(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_future_latest_event_to_state_result_get_cabi::<<$ty as $($path_to_types)*::Guest>::FutureLatestEventToStateResult>(arg0)
    }
    #[export_name = "cabi_post_timeline:event-processor-stub/stub-event-processor#[method]future-latest-event-to-state-result.get"]
    unsafe extern "C" fn _post_return_method_future_latest_event_to_state_result_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_future_latest_event_to_state_result_get::<<$ty as $($path_to_types)*::Guest>::FutureLatestEventToStateResult>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]future-tl-has-existed-result.subscribe"]
    unsafe extern "C" fn export_method_future_tl_has_existed_result_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_future_tl_has_existed_result_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::FutureTlHasExistedResult>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]future-tl-has-existed-result.get"]
    unsafe extern "C" fn export_method_future_tl_has_existed_result_get(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_future_tl_has_existed_result_get_cabi::<<$ty as $($path_to_types)*::Guest>::FutureTlHasExistedResult>(arg0)
    }
    #[export_name = "cabi_post_timeline:event-processor-stub/stub-event-processor#[method]future-tl-has-existed-result.get"]
    unsafe extern "C" fn _post_return_method_future_tl_has_existed_result_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_future_tl_has_existed_result_get::<<$ty as $($path_to_types)*::Guest>::FutureTlHasExistedResult>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]future-tl-has-existed-within-result.subscribe"]
    unsafe extern "C" fn export_method_future_tl_has_existed_within_result_subscribe(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_future_tl_has_existed_within_result_subscribe_cabi::<<$ty as $($path_to_types)*::Guest>::FutureTlHasExistedWithinResult>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]future-tl-has-existed-within-result.get"]
    unsafe extern "C" fn export_method_future_tl_has_existed_within_result_get(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_future_tl_has_existed_within_result_get_cabi::<<$ty as $($path_to_types)*::Guest>::FutureTlHasExistedWithinResult>(arg0)
    }
    #[export_name = "cabi_post_timeline:event-processor-stub/stub-event-processor#[method]future-tl-has-existed-within-result.get"]
    unsafe extern "C" fn _post_return_method_future_tl_has_existed_within_result_get(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_future_tl_has_existed_within_result_get::<<$ty as $($path_to_types)*::Guest>::FutureTlHasExistedWithinResult>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[constructor]api"]
    unsafe extern "C" fn export_constructor_api(arg0: *mut u8,arg1: usize,) -> i32 {
      $($path_to_types)*::_export_constructor_api_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]api.blocking-initialize-latest-event-state"]
    unsafe extern "C" fn export_method_api_blocking_initialize_latest_event_state(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_api_blocking_initialize_latest_event_state_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1, arg2)
    }
    #[export_name = "cabi_post_timeline:event-processor-stub/stub-event-processor#[method]api.blocking-initialize-latest-event-state"]
    unsafe extern "C" fn _post_return_method_api_blocking_initialize_latest_event_state(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_api_blocking_initialize_latest_event_state::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]api.initialize-latest-event-state"]
    unsafe extern "C" fn export_method_api_initialize_latest_event_state(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> i32 {
      $($path_to_types)*::_export_method_api_initialize_latest_event_state_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1, arg2)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]api.blocking-initialize-tl-has-existed"]
    unsafe extern "C" fn export_method_api_blocking_initialize_tl_has_existed(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: i32,arg4: ::core::mem::MaybeUninit::<u64>,arg5: usize,arg6: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_api_blocking_initialize_tl_has_existed_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
    }
    #[export_name = "cabi_post_timeline:event-processor-stub/stub-event-processor#[method]api.blocking-initialize-tl-has-existed"]
    unsafe extern "C" fn _post_return_method_api_blocking_initialize_tl_has_existed(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_api_blocking_initialize_tl_has_existed::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]api.initialize-tl-has-existed"]
    unsafe extern "C" fn export_method_api_initialize_tl_has_existed(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: i32,arg4: ::core::mem::MaybeUninit::<u64>,arg5: usize,arg6: i32,) -> i32 {
      $($path_to_types)*::_export_method_api_initialize_tl_has_existed_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]api.blocking-initialize-tl-has-existed-within"]
    unsafe extern "C" fn export_method_api_blocking_initialize_tl_has_existed_within(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: i32,arg4: ::core::mem::MaybeUninit::<u64>,arg5: usize,arg6: i32,arg7: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_api_blocking_initialize_tl_has_existed_within_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    }
    #[export_name = "cabi_post_timeline:event-processor-stub/stub-event-processor#[method]api.blocking-initialize-tl-has-existed-within"]
    unsafe extern "C" fn _post_return_method_api_blocking_initialize_tl_has_existed_within(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_api_blocking_initialize_tl_has_existed_within::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]api.initialize-tl-has-existed-within"]
    unsafe extern "C" fn export_method_api_initialize_tl_has_existed_within(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: i32,arg4: ::core::mem::MaybeUninit::<u64>,arg5: usize,arg6: i32,arg7: i64,) -> i32 {
      $($path_to_types)*::_export_method_api_initialize_tl_has_existed_within_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]api.blocking-add-event"]
    unsafe extern "C" fn export_method_api_blocking_add_event(arg0: *mut u8,arg1: i64,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_api_blocking_add_event_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_timeline:event-processor-stub/stub-event-processor#[method]api.blocking-add-event"]
    unsafe extern "C" fn _post_return_method_api_blocking_add_event(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_api_blocking_add_event::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]api.add-event"]
    unsafe extern "C" fn export_method_api_add_event(arg0: *mut u8,arg1: i64,arg2: *mut u8,arg3: usize,) -> i32 {
      $($path_to_types)*::_export_method_api_add_event_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]api.blocking-latest-event-to-state"]
    unsafe extern "C" fn export_method_api_blocking_latest_event_to_state(arg0: *mut u8,arg1: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_api_blocking_latest_event_to_state_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1)
    }
    #[export_name = "cabi_post_timeline:event-processor-stub/stub-event-processor#[method]api.blocking-latest-event-to-state"]
    unsafe extern "C" fn _post_return_method_api_blocking_latest_event_to_state(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_api_blocking_latest_event_to_state::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]api.latest-event-to-state"]
    unsafe extern "C" fn export_method_api_latest_event_to_state(arg0: *mut u8,arg1: i64,) -> i32 {
      $($path_to_types)*::_export_method_api_latest_event_to_state_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]api.blocking-tl-has-existed"]
    unsafe extern "C" fn export_method_api_blocking_tl_has_existed(arg0: *mut u8,arg1: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_api_blocking_tl_has_existed_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1)
    }
    #[export_name = "cabi_post_timeline:event-processor-stub/stub-event-processor#[method]api.blocking-tl-has-existed"]
    unsafe extern "C" fn _post_return_method_api_blocking_tl_has_existed(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_api_blocking_tl_has_existed::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]api.tl-has-existed"]
    unsafe extern "C" fn export_method_api_tl_has_existed(arg0: *mut u8,arg1: i64,) -> i32 {
      $($path_to_types)*::_export_method_api_tl_has_existed_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]api.blocking-tl-has-existed-within"]
    unsafe extern "C" fn export_method_api_blocking_tl_has_existed_within(arg0: *mut u8,arg1: i64,) -> *mut u8 {
      $($path_to_types)*::_export_method_api_blocking_tl_has_existed_within_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1)
    }
    #[export_name = "cabi_post_timeline:event-processor-stub/stub-event-processor#[method]api.blocking-tl-has-existed-within"]
    unsafe extern "C" fn _post_return_method_api_blocking_tl_has_existed_within(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_api_blocking_tl_has_existed_within::<<$ty as $($path_to_types)*::Guest>::Api>(arg0)
    }
    #[export_name = "timeline:event-processor-stub/stub-event-processor#[method]api.tl-has-existed-within"]
    unsafe extern "C" fn export_method_api_tl_has_existed_within(arg0: *mut u8,arg1: i64,) -> i32 {
      $($path_to_types)*::_export_method_api_tl_has_existed_within_cabi::<<$ty as $($path_to_types)*::Guest>::Api>(arg0, arg1)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "timeline:event-processor-stub/stub-event-processor#[dtor]future-initialize-latest-event-state-result"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::FutureInitializeLatestEventStateResult::dtor::<
        <$ty as $($path_to_types)*::Guest>::FutureInitializeLatestEventStateResult
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "timeline:event-processor-stub/stub-event-processor#[dtor]future-initialize-tl-has-existed-result"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::FutureInitializeTlHasExistedResult::dtor::<
        <$ty as $($path_to_types)*::Guest>::FutureInitializeTlHasExistedResult
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "timeline:event-processor-stub/stub-event-processor#[dtor]future-initialize-tl-has-existed-within-result"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::FutureInitializeTlHasExistedWithinResult::dtor::<
        <$ty as $($path_to_types)*::Guest>::FutureInitializeTlHasExistedWithinResult
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "timeline:event-processor-stub/stub-event-processor#[dtor]future-add-event-result"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::FutureAddEventResult::dtor::<
        <$ty as $($path_to_types)*::Guest>::FutureAddEventResult
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "timeline:event-processor-stub/stub-event-processor#[dtor]future-latest-event-to-state-result"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::FutureLatestEventToStateResult::dtor::<
        <$ty as $($path_to_types)*::Guest>::FutureLatestEventToStateResult
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "timeline:event-processor-stub/stub-event-processor#[dtor]future-tl-has-existed-result"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::FutureTlHasExistedResult::dtor::<
        <$ty as $($path_to_types)*::Guest>::FutureTlHasExistedResult
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "timeline:event-processor-stub/stub-event-processor#[dtor]future-tl-has-existed-within-result"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::FutureTlHasExistedWithinResult::dtor::<
        <$ty as $($path_to_types)*::Guest>::FutureTlHasExistedWithinResult
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "timeline:event-processor-stub/stub-event-processor#[dtor]api"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::Api::dtor::<
        <$ty as $($path_to_types)*::Guest>::Api
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub(crate) use __export_timeline_event_processor_stub_stub_event_processor_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self { handle: AtomicU32::new(handle), _marker: marker::PhantomData }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::alloc;
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }

    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }

    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }

    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }

    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub unsafe fn char_lift(val: u32) -> char {
        if cfg!(debug_assertions) {
            core::char::from_u32(val).unwrap()
        } else {
            core::char::from_u32_unchecked(val)
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_wasm_rpc_stub_event_processor_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::timeline::event_processor_stub::stub_event_processor::__export_timeline_event_processor_stub_stub_event_processor_cabi!($ty with_types_in $($path_to_types_root)*::exports::timeline::event_processor_stub::stub_event_processor);
  )
}
#[doc(inline)]
pub(crate) use __export_wasm_rpc_stub_event_processor_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:wasm-rpc-stub-event-processor:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 4652] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x98#\x01A\x02\x01A\x11\
\x01B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\x04\0\x16[\
method]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[method]pollab\
le.block\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04poll\x01\x06\x03\
\x01\x12wasi:io/poll@0.2.0\x05\0\x02\x03\0\0\x08pollable\x01B*\x02\x03\x02\x01\x01\
\x04\0\x08pollable\x03\0\0\x01z\x04\0\x0anode-index\x03\0\x02\x01r\x01\x05values\
\x04\0\x03uri\x03\0\x04\x01p\x03\x01k\x03\x01o\x02y\x07\x01p\x7f\x01j\x01\x07\x01\
\x07\x01o\x02\x05w\x01q\x16\x0crecord-value\x01\x06\0\x0dvariant-value\x01\x08\0\
\x0aenum-value\x01y\0\x0bflags-value\x01\x09\0\x0btuple-value\x01\x06\0\x0alist-\
value\x01\x06\0\x0coption-value\x01\x07\0\x0cresult-value\x01\x0a\0\x07prim-u8\x01\
}\0\x08prim-u16\x01{\0\x08prim-u32\x01y\0\x08prim-u64\x01w\0\x07prim-s8\x01~\0\x08\
prim-s16\x01|\0\x08prim-s32\x01z\0\x08prim-s64\x01x\0\x0cprim-float32\x01v\0\x0c\
prim-float64\x01u\0\x09prim-char\x01t\0\x09prim-bool\x01\x7f\0\x0bprim-string\x01\
s\0\x06handle\x01\x0b\0\x04\0\x08wit-node\x03\0\x0c\x01p\x0d\x01r\x01\x05nodes\x0e\
\x04\0\x09wit-value\x03\0\x0f\x01q\x04\x0eprotocol-error\x01s\0\x06denied\x01s\0\
\x09not-found\x01s\0\x15remote-internal-error\x01s\0\x04\0\x09rpc-error\x03\0\x11\
\x04\0\x08wasm-rpc\x03\x01\x04\0\x14future-invoke-result\x03\x01\x01i\x13\x01@\x01\
\x08location\x05\0\x15\x04\0\x15[constructor]wasm-rpc\x01\x16\x01h\x13\x01p\x10\x01\
j\x01\x10\x01\x12\x01@\x03\x04self\x17\x0dfunction-names\x0ffunction-params\x18\0\
\x19\x04\0![method]wasm-rpc.invoke-and-await\x01\x1a\x01j\0\x01\x12\x01@\x03\x04\
self\x17\x0dfunction-names\x0ffunction-params\x18\0\x1b\x04\0\x17[method]wasm-rp\
c.invoke\x01\x1c\x01i\x14\x01@\x03\x04self\x17\x0dfunction-names\x0ffunction-par\
ams\x18\0\x1d\x04\0'[method]wasm-rpc.async-invoke-and-await\x01\x1e\x01h\x14\x01\
i\x01\x01@\x01\x04self\x1f\0\x20\x04\0&[method]future-invoke-result.subscribe\x01\
!\x01k\x19\x01@\x01\x04self\x1f\0\"\x04\0\x20[method]future-invoke-result.get\x01\
#\x03\x01\x15golem:rpc/types@0.1.0\x05\x02\x01B\x20\x01q\x04\x0cstring-value\x01\
s\0\x09int-value\x01x\0\x0bfloat-value\x01u\0\x0abool-value\x01\x7f\0\x04\0\x0be\
vent-value\x03\0\0\x01o\x02s\x01\x01p\x02\x01r\x02\x04timew\x05event\x03\x04\0\x05\
event\x03\0\x04\x01kw\x01r\x02\x02t1w\x02t2\x06\x04\0\x0btime-period\x03\0\x07\x01\
r\x02\x0btime-period\x08\x05value\x01\x04\0\x15timeline-result-point\x03\0\x09\x01\
p\x0a\x01r\x01\x07results\x0b\x04\0\x0ftimeline-result\x03\0\x0c\x01m\x03\x05equ\
al\x0cgreater-than\x09less-than\x04\0\x12event-predicate-op\x03\0\x0e\x01r\x03\x08\
col-names\x05value\x01\x02op\x0f\x04\0\x0fevent-predicate\x03\0\x10\x01j\x01s\x01\
s\x01@\x01\x0eevent-col-names\0\x12\x04\0\x1dinitialize-latest-event-state\x01\x13\
\x01@\x01\x0fevent-predicate\x11\0\x12\x04\0\x19initialize-tl-has-existed\x01\x14\
\x01@\x02\x0fevent-predicate\x11\x04timew\0\x12\x04\0\x20initialize-tl-has-exist\
ed-within\x01\x15\x01@\x01\x05event\x05\0\x12\x04\0\x09add-event\x01\x16\x01j\x01\
\x0d\x01s\x01@\x01\x02t1w\0\x17\x04\0\x15latest-event-to-state\x01\x18\x04\0\x0e\
tl-has-existed\x01\x18\x04\0\x15tl-has-existed-within\x01\x18\x03\x01\x1ctimelin\
e:event-processor/api\x05\x03\x02\x03\0\x01\x03uri\x02\x03\0\x02\x0bevent-value\x02\
\x03\0\x02\x05event\x02\x03\0\x02\x0btime-period\x02\x03\0\x02\x15timeline-resul\
t-point\x02\x03\0\x02\x0ftimeline-result\x02\x03\0\x02\x12event-predicate-op\x02\
\x03\0\x02\x0fevent-predicate\x01Bg\x02\x03\x02\x01\x04\x04\0\x0dgolem-rpc-uri\x03\
\0\0\x02\x03\x02\x01\x01\x04\0\x10wasi-io-pollable\x03\0\x02\x02\x03\x02\x01\x05\
\x04\0\x0bevent-value\x03\0\x04\x02\x03\x02\x01\x06\x04\0\x05event\x03\0\x06\x02\
\x03\x02\x01\x07\x04\0\x0btime-period\x03\0\x08\x02\x03\x02\x01\x08\x04\0\x15tim\
eline-result-point\x03\0\x0a\x02\x03\x02\x01\x09\x04\0\x0ftimeline-result\x03\0\x0c\
\x02\x03\x02\x01\x0a\x04\0\x12event-predicate-op\x03\0\x0e\x02\x03\x02\x01\x0b\x04\
\0\x0fevent-predicate\x03\0\x10\x04\0+future-initialize-latest-event-state-resul\
t\x03\x01\x04\0'future-initialize-tl-has-existed-result\x03\x01\x04\0.future-ini\
tialize-tl-has-existed-within-result\x03\x01\x04\0\x17future-add-event-result\x03\
\x01\x04\0#future-latest-event-to-state-result\x03\x01\x04\0\x1cfuture-tl-has-ex\
isted-result\x03\x01\x04\0#future-tl-has-existed-within-result\x03\x01\x04\0\x03\
api\x03\x01\x01h\x12\x01i\x03\x01@\x01\x04self\x1a\0\x1b\x04\0=[method]future-in\
itialize-latest-event-state-result.subscribe\x01\x1c\x01j\x01s\x01s\x01k\x1d\x01\
@\x01\x04self\x1a\0\x1e\x04\07[method]future-initialize-latest-event-state-resul\
t.get\x01\x1f\x01h\x13\x01@\x01\x04self\x20\0\x1b\x04\09[method]future-initializ\
e-tl-has-existed-result.subscribe\x01!\x01@\x01\x04self\x20\0\x1e\x04\03[method]\
future-initialize-tl-has-existed-result.get\x01\"\x01h\x14\x01@\x01\x04self#\0\x1b\
\x04\0@[method]future-initialize-tl-has-existed-within-result.subscribe\x01$\x01\
@\x01\x04self#\0\x1e\x04\0:[method]future-initialize-tl-has-existed-within-resul\
t.get\x01%\x01h\x15\x01@\x01\x04self&\0\x1b\x04\0)[method]future-add-event-resul\
t.subscribe\x01'\x01@\x01\x04self&\0\x1e\x04\0#[method]future-add-event-result.g\
et\x01(\x01h\x16\x01@\x01\x04self)\0\x1b\x04\05[method]future-latest-event-to-st\
ate-result.subscribe\x01*\x01j\x01\x0d\x01s\x01k+\x01@\x01\x04self)\0,\x04\0/[me\
thod]future-latest-event-to-state-result.get\x01-\x01h\x17\x01@\x01\x04self.\0\x1b\
\x04\0.[method]future-tl-has-existed-result.subscribe\x01/\x01@\x01\x04self.\0,\x04\
\0([method]future-tl-has-existed-result.get\x010\x01h\x18\x01@\x01\x04self1\0\x1b\
\x04\05[method]future-tl-has-existed-within-result.subscribe\x012\x01@\x01\x04se\
lf1\0,\x04\0/[method]future-tl-has-existed-within-result.get\x013\x01i\x19\x01@\x01\
\x08location\x01\04\x04\0\x10[constructor]api\x015\x01h\x19\x01@\x02\x04self6\x0e\
event-col-names\0\x1d\x04\02[method]api.blocking-initialize-latest-event-state\x01\
7\x01i\x12\x01@\x02\x04self6\x0eevent-col-names\08\x04\0)[method]api.initialize-\
latest-event-state\x019\x01@\x02\x04self6\x0fevent-predicate\x11\0\x1d\x04\0.[me\
thod]api.blocking-initialize-tl-has-existed\x01:\x01i\x13\x01@\x02\x04self6\x0fe\
vent-predicate\x11\0;\x04\0%[method]api.initialize-tl-has-existed\x01<\x01@\x03\x04\
self6\x0fevent-predicate\x11\x04timew\0\x1d\x04\05[method]api.blocking-initializ\
e-tl-has-existed-within\x01=\x01i\x14\x01@\x03\x04self6\x0fevent-predicate\x11\x04\
timew\0>\x04\0,[method]api.initialize-tl-has-existed-within\x01?\x01@\x02\x04sel\
f6\x05event\x07\0\x1d\x04\0\x1e[method]api.blocking-add-event\x01@\x01i\x15\x01@\
\x02\x04self6\x05event\x07\0\xc1\0\x04\0\x15[method]api.add-event\x01B\x01@\x02\x04\
self6\x02t1w\0+\x04\0*[method]api.blocking-latest-event-to-state\x01C\x01i\x16\x01\
@\x02\x04self6\x02t1w\0\xc4\0\x04\0![method]api.latest-event-to-state\x01E\x04\0\
#[method]api.blocking-tl-has-existed\x01C\x01i\x17\x01@\x02\x04self6\x02t1w\0\xc6\
\0\x04\0\x1a[method]api.tl-has-existed\x01G\x04\0*[method]api.blocking-tl-has-ex\
isted-within\x01C\x01i\x18\x01@\x02\x04self6\x02t1w\0\xc8\0\x04\0![method]api.tl\
-has-existed-within\x01I\x04\x012timeline:event-processor-stub/stub-event-proces\
sor\x05\x0c\x04\x01;timeline:event-processor-stub/wasm-rpc-stub-event-processor\x04\
\0\x0b#\x01\0\x1dwasm-rpc-stub-event-processor\x03\0\0\0G\x09producers\x01\x0cpr\
ocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
