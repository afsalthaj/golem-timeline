// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod exports {
  pub mod timeline {
    pub mod event_processor {
      
      #[allow(clippy::all)]
      pub mod api {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        #[derive(Clone)]
        pub enum EventValue{
          StringValue(wit_bindgen::rt::string::String),
          IntValue(i64),
          FloatValue(f64),
          BoolValue(bool),
        }
        impl ::core::fmt::Debug for EventValue {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              EventValue::StringValue(e) => {
                f.debug_tuple("EventValue::StringValue").field(e).finish()
              }
              EventValue::IntValue(e) => {
                f.debug_tuple("EventValue::IntValue").field(e).finish()
              }
              EventValue::FloatValue(e) => {
                f.debug_tuple("EventValue::FloatValue").field(e).finish()
              }
              EventValue::BoolValue(e) => {
                f.debug_tuple("EventValue::BoolValue").field(e).finish()
              }
            }
          }
        }
        #[derive(Clone)]
        pub struct Event {
          pub time: u64,
          pub event: wit_bindgen::rt::vec::Vec::<(wit_bindgen::rt::string::String,EventValue,)>,
        }
        impl ::core::fmt::Debug for Event {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Event").field("time", &self.time).field("event", &self.event).finish()
          }
        }
        #[derive(Clone)]
        pub struct WorkerId {
          pub name: wit_bindgen::rt::string::String,
        }
        impl ::core::fmt::Debug for WorkerId {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("WorkerId").field("name", &self.name).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "timeline:event-processor/api#initialize"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_initialize(arg0: i32,arg1: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            let result1 = <_GuestImpl as Guest>::initialize(WorkerId{
              name: wit_bindgen::rt::string_lift(bytes0),
            });
            let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
            match result1 {
              Ok(e) => { {
                *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                let vec3 = (e.into_bytes()).into_boxed_slice();
                let ptr3 = vec3.as_ptr() as i32;
                let len3 = vec3.len() as i32;
                ::core::mem::forget(vec3);
                *((ptr2 + 8) as *mut i32) = len3;
                *((ptr2 + 4) as *mut i32) = ptr3;
              } },
              Err(e) => { {
                *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                let vec4 = (e.into_bytes()).into_boxed_slice();
                let ptr4 = vec4.as_ptr() as i32;
                let len4 = vec4.len() as i32;
                ::core::mem::forget(vec4);
                *((ptr2 + 8) as *mut i32) = len4;
                *((ptr2 + 4) as *mut i32) = ptr4;
              } },
            };ptr2
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_timeline:event-processor/api#initialize"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_initialize(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l1 = *((arg0 + 4) as *const i32);
                  let l2 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                },
                _ => {
                  let l3 = *((arg0 + 4) as *const i32);
                  let l4 = *((arg0 + 8) as *const i32);
                  wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                },
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "timeline:event-processor/api#get-events"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_get_events() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::get_events();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let vec7 = result0;
            let len7 = vec7.len() as i32;
            let layout7 = alloc::Layout::from_size_align_unchecked(vec7.len() * 16, 8);
            let result7 = if layout7.size() != 0
            {
              let ptr = alloc::alloc(layout7);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout7);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec7.into_iter().enumerate() {
              let base = result7 as i32 + (i as i32) * 16;
              {
                let Event{ time:time2, event:event2, } = e;
                *((base + 0) as *mut i64) = wit_bindgen::rt::as_i64(time2);
                let vec6 = event2;
                let len6 = vec6.len() as i32;
                let layout6 = alloc::Layout::from_size_align_unchecked(vec6.len() * 24, 8);
                let result6 = if layout6.size() != 0
                {
                  let ptr = alloc::alloc(layout6);
                  if ptr.is_null()
                  {
                    alloc::handle_alloc_error(layout6);
                  }
                  ptr
                }else {{
                  ::core::ptr::null_mut()
                }};
                for (i, e) in vec6.into_iter().enumerate() {
                  let base = result6 as i32 + (i as i32) * 24;
                  {
                    let (t3_0, t3_1, ) = e;
                    let vec4 = (t3_0.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr() as i32;
                    let len4 = vec4.len() as i32;
                    ::core::mem::forget(vec4);
                    *((base + 4) as *mut i32) = len4;
                    *((base + 0) as *mut i32) = ptr4;
                    match t3_1 {
                      EventValue::StringValue(e) => {
                        *((base + 8) as *mut u8) = (0i32) as u8;
                        let vec5 = (e.into_bytes()).into_boxed_slice();
                        let ptr5 = vec5.as_ptr() as i32;
                        let len5 = vec5.len() as i32;
                        ::core::mem::forget(vec5);
                        *((base + 20) as *mut i32) = len5;
                        *((base + 16) as *mut i32) = ptr5;
                      },
                      EventValue::IntValue(e) => {
                        *((base + 8) as *mut u8) = (1i32) as u8;
                        *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(e);
                      },
                      EventValue::FloatValue(e) => {
                        *((base + 8) as *mut u8) = (2i32) as u8;
                        *((base + 16) as *mut f64) = wit_bindgen::rt::as_f64(e);
                      },
                      EventValue::BoolValue(e) => {
                        *((base + 8) as *mut u8) = (3i32) as u8;
                        *((base + 16) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                      },
                    }
                  }
                }
                *((base + 12) as *mut i32) = len6;
                *((base + 8) as *mut i32) = result6 as i32;
              }
            }
            *((ptr1 + 4) as *mut i32) = len7;
            *((ptr1 + 0) as *mut i32) = result7 as i32;
            ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_timeline:event-processor/api#get-events"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_get_events(arg0: i32,) {
              let l8 = *((arg0 + 0) as *const i32);
              let l9 = *((arg0 + 4) as *const i32);
              let base10 = l8;
              let len10 = l9;
              for i in 0..len10 {
                let base = base10 + i *16;
                {
                  let l5 = *((base + 8) as *const i32);
                  let l6 = *((base + 12) as *const i32);
                  let base7 = l5;
                  let len7 = l6;
                  for i in 0..len7 {
                    let base = base7 + i *24;
                    {
                      let l0 = *((base + 0) as *const i32);
                      let l1 = *((base + 4) as *const i32);
                      wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
                      let l2 = i32::from(*((base + 8) as *const u8));
                      match l2 {
                        0 => {
                          let l3 = *((base + 16) as *const i32);
                          let l4 = *((base + 20) as *const i32);
                          wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                        },
                        1 => (),
                        2 => (),
                        _ => (),
                      }
                    }
                  }
                  wit_bindgen::rt::dealloc(base7, (len7 as usize) * 24, 8);
                }
              }
              wit_bindgen::rt::dealloc(base10, (len10 as usize) * 16, 8);
            }
          };
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn initialize(worker: WorkerId,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>;
          fn get_events() -> wit_bindgen::rt::vec::Vec::<Event>;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 12]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:event-processor"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 670] = [3, 0, 15, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 0, 97, 115, 109, 13, 0, 1, 0, 7, 233, 1, 1, 65, 2, 1, 66, 14, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 1, 111, 2, 115, 1, 1, 112, 2, 1, 114, 2, 4, 116, 105, 109, 101, 119, 5, 101, 118, 101, 110, 116, 3, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 4, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 6, 1, 106, 1, 115, 1, 115, 1, 64, 1, 6, 119, 111, 114, 107, 101, 114, 7, 0, 8, 4, 0, 10, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 1, 9, 1, 112, 5, 1, 64, 0, 0, 10, 4, 0, 10, 103, 101, 116, 45, 101, 118, 101, 110, 116, 115, 1, 11, 4, 1, 28, 116, 105, 109, 101, 108, 105, 110, 101, 58, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 97, 112, 105, 5, 0, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 153, 2, 1, 65, 2, 1, 65, 2, 1, 66, 14, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 1, 111, 2, 115, 1, 1, 112, 2, 1, 114, 2, 4, 116, 105, 109, 101, 119, 5, 101, 118, 101, 110, 116, 3, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 4, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 6, 1, 106, 1, 115, 1, 115, 1, 64, 1, 6, 119, 111, 114, 107, 101, 114, 7, 0, 8, 4, 0, 10, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 1, 9, 1, 112, 5, 1, 64, 0, 0, 10, 4, 0, 10, 103, 101, 116, 45, 101, 118, 101, 110, 116, 115, 1, 11, 4, 1, 28, 116, 105, 109, 101, 108, 105, 110, 101, 58, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 97, 112, 105, 5, 0, 4, 1, 40, 116, 105, 109, 101, 108, 105, 110, 101, 58, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 4, 0, 11, 21, 1, 0, 15, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
