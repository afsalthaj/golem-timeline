package timeline:event-processor;

interface api {

  record event {
    time: u64,
    event: list<tuple<string, event-value>>
  }

  variant event-value {
    string-value(string),
    int-value(s64),
    float-value(f64),
    bool-value(bool),
  }

  record time-period {
    t1: u64,
    t2: option<u64>
  }

  record timeline-result-point {
    time-period: time-period,
    value: event-value
  }

  record timeline-result {
    results: list<timeline-result-point>
  }

  enum event-predicate-op{
    equal,
    greater-than,
    less-than,
  }

  record event-predicate {
    col-name: string,
    value: event-value,
    op: event-predicate-op
  }

  initialize-latest-event-state: func(event-col-name: string) -> result<string, string>;
  initialize-tl-has-existed: func(event-predicate: event-predicate) -> result<string, string>;
  initialize-tl-has-existed-within: func(event-predicate: event-predicate, time: u64) -> result<string, string>;
  add-event: func(event: event) -> result<string, string>;
  latest-event-to-state: func(t1: u64) -> result<timeline-result, string>;
  tl-has-existed: func(t1: u64) -> result<timeline-result, string>;
  tl-has-existed-within: func(t1: u64) -> result<timeline-result, string>;

}

world event-processor {
  export api;
}
