package timeline:core-stub;

interface stub-core {
  use golem:rpc/types@0.1.0.{uri as golem-rpc-uri};
  use wasi:io/poll@0.2.0.{pollable as wasi-io-pollable};
  use timeline:core/api.{event-value};
  use timeline:core/api.{event};
  use timeline:core/api.{event-predicate};
  use timeline:core/api.{typed-timeline-result-worker};
  use timeline:core/api.{node-index};
  use timeline:core/api.{server};
  use timeline:core/api.{server-with-event-column-name};
  use timeline:core/api.{bi-timeline-with-server};
  use timeline:core/api.{timeline-with-server};
  use timeline:core/api.{worker-id};
  use timeline:core/api.{timeline-constant-comparator};
  use timeline:core/api.{timeline-constant-compared};
  use timeline:core/api.{timeline-negated};
  use timeline:core/api.{server-with-event-predicate};
  use timeline:core/api.{server-with-event-predicate-within};
  use timeline:core/api.{timeline-node};
  use timeline:core/api.{timeline-op};
  use timeline:core/api.{event-processor-workers};
  use timeline:core/api.{worker-details};

  resource future-initialize-timeline-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<worker-details, string>>;
  }
  resource future-hello-world-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<string>;
  }
  resource api {
    constructor(location: golem-rpc-uri);
    blocking-initialize-timeline: func(timeline: timeline-op) -> result<worker-details, string>;
    initialize-timeline: func(timeline: timeline-op) -> future-initialize-timeline-result;
    blocking-hello-world: func() -> string;
    hello-world: func() -> future-hello-world-result;
  }

}

world wasm-rpc-stub-core {
  export stub-core;
}
