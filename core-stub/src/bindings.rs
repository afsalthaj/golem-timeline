// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod golem {
  pub mod rpc {
    
    #[allow(clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type NodeIndex = i32;
      #[derive(Clone)]
      pub struct Uri {
        pub value: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Uri {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Uri").field("value", &self.value).finish()
        }
      }
      #[derive(Clone)]
      pub enum WitNode{
        RecordValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        VariantValue((u32,Option<NodeIndex>,)),
        EnumValue(u32),
        FlagsValue(wit_bindgen::rt::vec::Vec::<bool>),
        TupleValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        ListValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        OptionValue(Option<NodeIndex>),
        ResultValue(Result<Option<NodeIndex>,Option<NodeIndex>>),
        PrimU8(u8),
        PrimU16(u16),
        PrimU32(u32),
        PrimU64(u64),
        PrimS8(i8),
        PrimS16(i16),
        PrimS32(i32),
        PrimS64(i64),
        PrimFloat32(f32),
        PrimFloat64(f64),
        PrimChar(char),
        PrimBool(bool),
        PrimString(wit_bindgen::rt::string::String),
        Handle((Uri,u64,)),
      }
      impl ::core::fmt::Debug for WitNode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            WitNode::RecordValue(e) => {
              f.debug_tuple("WitNode::RecordValue").field(e).finish()
            }
            WitNode::VariantValue(e) => {
              f.debug_tuple("WitNode::VariantValue").field(e).finish()
            }
            WitNode::EnumValue(e) => {
              f.debug_tuple("WitNode::EnumValue").field(e).finish()
            }
            WitNode::FlagsValue(e) => {
              f.debug_tuple("WitNode::FlagsValue").field(e).finish()
            }
            WitNode::TupleValue(e) => {
              f.debug_tuple("WitNode::TupleValue").field(e).finish()
            }
            WitNode::ListValue(e) => {
              f.debug_tuple("WitNode::ListValue").field(e).finish()
            }
            WitNode::OptionValue(e) => {
              f.debug_tuple("WitNode::OptionValue").field(e).finish()
            }
            WitNode::ResultValue(e) => {
              f.debug_tuple("WitNode::ResultValue").field(e).finish()
            }
            WitNode::PrimU8(e) => {
              f.debug_tuple("WitNode::PrimU8").field(e).finish()
            }
            WitNode::PrimU16(e) => {
              f.debug_tuple("WitNode::PrimU16").field(e).finish()
            }
            WitNode::PrimU32(e) => {
              f.debug_tuple("WitNode::PrimU32").field(e).finish()
            }
            WitNode::PrimU64(e) => {
              f.debug_tuple("WitNode::PrimU64").field(e).finish()
            }
            WitNode::PrimS8(e) => {
              f.debug_tuple("WitNode::PrimS8").field(e).finish()
            }
            WitNode::PrimS16(e) => {
              f.debug_tuple("WitNode::PrimS16").field(e).finish()
            }
            WitNode::PrimS32(e) => {
              f.debug_tuple("WitNode::PrimS32").field(e).finish()
            }
            WitNode::PrimS64(e) => {
              f.debug_tuple("WitNode::PrimS64").field(e).finish()
            }
            WitNode::PrimFloat32(e) => {
              f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
            }
            WitNode::PrimFloat64(e) => {
              f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
            }
            WitNode::PrimChar(e) => {
              f.debug_tuple("WitNode::PrimChar").field(e).finish()
            }
            WitNode::PrimBool(e) => {
              f.debug_tuple("WitNode::PrimBool").field(e).finish()
            }
            WitNode::PrimString(e) => {
              f.debug_tuple("WitNode::PrimString").field(e).finish()
            }
            WitNode::Handle(e) => {
              f.debug_tuple("WitNode::Handle").field(e).finish()
            }
          }
        }
      }
      #[derive(Clone)]
      pub struct WitValue {
        pub nodes: wit_bindgen::rt::vec::Vec::<WitNode>,
      }
      impl ::core::fmt::Debug for WitValue {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
        }
      }
      #[derive(Clone)]
      pub enum RpcError{
        ProtocolError(wit_bindgen::rt::string::String),
        Denied(wit_bindgen::rt::string::String),
        NotFound(wit_bindgen::rt::string::String),
        RemoteInternalError(wit_bindgen::rt::string::String),
      }
      impl ::core::fmt::Debug for RpcError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            RpcError::ProtocolError(e) => {
              f.debug_tuple("RpcError::ProtocolError").field(e).finish()
            }
            RpcError::Denied(e) => {
              f.debug_tuple("RpcError::Denied").field(e).finish()
            }
            RpcError::NotFound(e) => {
              f.debug_tuple("RpcError::NotFound").field(e).finish()
            }
            RpcError::RemoteInternalError(e) => {
              f.debug_tuple("RpcError::RemoteInternalError").field(e).finish()
            }
          }
        }
      }
      impl ::core::fmt::Display for RpcError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{:?}", self)
        }
      }
      
      impl std::error::Error for RpcError {}
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct WasmRpc{
        handle: wit_bindgen::rt::Resource<WasmRpc>,
      }
      
      impl WasmRpc{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for WasmRpc{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
            extern "C" {
              #[link_name = "[resource-drop]wasm-rpc"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl WasmRpc {
        #[allow(unused_unsafe, clippy::all)]
        pub fn new(location: &Uri,) -> Self{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let Uri{ value:value0, } = location;
            let vec1 = value0;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
            extern "C" {
              #[link_name = "[constructor]wasm-rpc"]
              fn wit_import(_: i32, _: i32, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ) -> i32{ unreachable!() }
            let ret = wit_import(ptr1, len1);
            WasmRpc::from_handle(ret as u32)
          }
        }
      }
      impl WasmRpc {
        #[allow(unused_unsafe, clippy::all)]
        pub fn invoke_and_await(&self,function_name: &str,function_params: &[WitValue],) -> Result<WitValue,RpcError>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let mut cleanup_list = Vec::new();
            
            #[repr(align(4))]
            struct RetArea([u8; 16]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = function_name;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let vec12 = function_params;
            let len12 = vec12.len() as i32;
            let layout12 = alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
            let result12 = if layout12.size() != 0
            {
              let ptr = alloc::alloc(layout12);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout12);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec12.into_iter().enumerate() {
              let base = result12 as i32 + (i as i32) * 8;
              {
                let WitValue{ nodes:nodes1, } = e;
                let vec11 = nodes1;
                let len11 = vec11.len() as i32;
                let layout11 = alloc::Layout::from_size_align_unchecked(vec11.len() * 24, 8);
                let result11 = if layout11.size() != 0
                {
                  let ptr = alloc::alloc(layout11);
                  if ptr.is_null()
                  {
                    alloc::handle_alloc_error(layout11);
                  }
                  ptr
                }else {{
                  ::core::ptr::null_mut()
                }};
                for (i, e) in vec11.into_iter().enumerate() {
                  let base = result11 as i32 + (i as i32) * 24;
                  {
                    match e {
                      WitNode::RecordValue(e) => {
                        *((base + 0) as *mut u8) = (0i32) as u8;
                        let vec2 = e;
                        let ptr2 = vec2.as_ptr() as i32;
                        let len2 = vec2.len() as i32;
                        *((base + 12) as *mut i32) = len2;
                        *((base + 8) as *mut i32) = ptr2;
                      },
                      WitNode::VariantValue(e) => {
                        *((base + 0) as *mut u8) = (1i32) as u8;
                        let (t3_0, t3_1, ) = e;
                        *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(t3_0);
                        match t3_1 {
                          Some(e) => {
                            *((base + 12) as *mut u8) = (1i32) as u8;
                            *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                          },
                          None => {
                            {
                              *((base + 12) as *mut u8) = (0i32) as u8;
                            }
                          },
                        };},
                        WitNode::EnumValue(e) => {
                          *((base + 0) as *mut u8) = (2i32) as u8;
                          *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                        },
                        WitNode::FlagsValue(e) => {
                          *((base + 0) as *mut u8) = (3i32) as u8;
                          let vec4 = e;
                          let len4 = vec4.len() as i32;
                          let layout4 = alloc::Layout::from_size_align_unchecked(vec4.len() * 1, 1);
                          let result4 = if layout4.size() != 0
                          {
                            let ptr = alloc::alloc(layout4);
                            if ptr.is_null()
                            {
                              alloc::handle_alloc_error(layout4);
                            }
                            ptr
                          }else {{
                            ::core::ptr::null_mut()
                          }};
                          for (i, e) in vec4.into_iter().enumerate() {
                            let base = result4 as i32 + (i as i32) * 1;
                            {
                              *((base + 0) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                            }
                          }
                          *((base + 12) as *mut i32) = len4;
                          *((base + 8) as *mut i32) = result4 as i32;
                          cleanup_list.extend_from_slice(&[(result4, layout4),]);
                        },
                        WitNode::TupleValue(e) => {
                          *((base + 0) as *mut u8) = (4i32) as u8;
                          let vec5 = e;
                          let ptr5 = vec5.as_ptr() as i32;
                          let len5 = vec5.len() as i32;
                          *((base + 12) as *mut i32) = len5;
                          *((base + 8) as *mut i32) = ptr5;
                        },
                        WitNode::ListValue(e) => {
                          *((base + 0) as *mut u8) = (5i32) as u8;
                          let vec6 = e;
                          let ptr6 = vec6.as_ptr() as i32;
                          let len6 = vec6.len() as i32;
                          *((base + 12) as *mut i32) = len6;
                          *((base + 8) as *mut i32) = ptr6;
                        },
                        WitNode::OptionValue(e) => {
                          *((base + 0) as *mut u8) = (6i32) as u8;
                          match e {
                            Some(e) => {
                              *((base + 8) as *mut u8) = (1i32) as u8;
                              *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                            },
                            None => {
                              {
                                *((base + 8) as *mut u8) = (0i32) as u8;
                              }
                            },
                          };},
                          WitNode::ResultValue(e) => {
                            *((base + 0) as *mut u8) = (7i32) as u8;
                            match e {
                              Ok(e) => { {
                                *((base + 8) as *mut u8) = (0i32) as u8;
                                match e {
                                  Some(e) => {
                                    *((base + 12) as *mut u8) = (1i32) as u8;
                                    *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                  },
                                  None => {
                                    {
                                      *((base + 12) as *mut u8) = (0i32) as u8;
                                    }
                                  },
                                };} },
                                Err(e) => { {
                                  *((base + 8) as *mut u8) = (1i32) as u8;
                                  match e {
                                    Some(e) => {
                                      *((base + 12) as *mut u8) = (1i32) as u8;
                                      *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                    },
                                    None => {
                                      {
                                        *((base + 12) as *mut u8) = (0i32) as u8;
                                      }
                                    },
                                  };} },
                                };},
                                WitNode::PrimU8(e) => {
                                  *((base + 0) as *mut u8) = (8i32) as u8;
                                  *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                },
                                WitNode::PrimU16(e) => {
                                  *((base + 0) as *mut u8) = (9i32) as u8;
                                  *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                },
                                WitNode::PrimU32(e) => {
                                  *((base + 0) as *mut u8) = (10i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimU64(e) => {
                                  *((base + 0) as *mut u8) = (11i32) as u8;
                                  *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                },
                                WitNode::PrimS8(e) => {
                                  *((base + 0) as *mut u8) = (12i32) as u8;
                                  *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                },
                                WitNode::PrimS16(e) => {
                                  *((base + 0) as *mut u8) = (13i32) as u8;
                                  *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                },
                                WitNode::PrimS32(e) => {
                                  *((base + 0) as *mut u8) = (14i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimS64(e) => {
                                  *((base + 0) as *mut u8) = (15i32) as u8;
                                  *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                },
                                WitNode::PrimFloat32(e) => {
                                  *((base + 0) as *mut u8) = (16i32) as u8;
                                  *((base + 8) as *mut f32) = wit_bindgen::rt::as_f32(e);
                                },
                                WitNode::PrimFloat64(e) => {
                                  *((base + 0) as *mut u8) = (17i32) as u8;
                                  *((base + 8) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                },
                                WitNode::PrimChar(e) => {
                                  *((base + 0) as *mut u8) = (18i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimBool(e) => {
                                  *((base + 0) as *mut u8) = (19i32) as u8;
                                  *((base + 8) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                },
                                WitNode::PrimString(e) => {
                                  *((base + 0) as *mut u8) = (20i32) as u8;
                                  let vec7 = e;
                                  let ptr7 = vec7.as_ptr() as i32;
                                  let len7 = vec7.len() as i32;
                                  *((base + 12) as *mut i32) = len7;
                                  *((base + 8) as *mut i32) = ptr7;
                                },
                                WitNode::Handle(e) => {
                                  *((base + 0) as *mut u8) = (21i32) as u8;
                                  let (t8_0, t8_1, ) = e;
                                  let Uri{ value:value9, } = t8_0;
                                  let vec10 = value9;
                                  let ptr10 = vec10.as_ptr() as i32;
                                  let len10 = vec10.len() as i32;
                                  *((base + 12) as *mut i32) = len10;
                                  *((base + 8) as *mut i32) = ptr10;
                                  *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(t8_1);
                                },
                              }
                            }
                          }
                          *((base + 4) as *mut i32) = len11;
                          *((base + 0) as *mut i32) = result11 as i32;
                          cleanup_list.extend_from_slice(&[(result11, layout11),]);
                        }
                      }
                      let ptr13 = ret_area.as_mut_ptr() as i32;
                      #[cfg(target_arch = "wasm32")]
                      #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                      extern "C" {
                        #[link_name = "[method]wasm-rpc.invoke-and-await"]
                        fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                      }
                      
                      #[cfg(not(target_arch = "wasm32"))]
                      fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                      wit_import((self).handle() as i32, ptr0, len0, result12 as i32, len12, ptr13);
                      let l14 = i32::from(*((ptr13 + 0) as *const u8));
                      if layout12.size() != 0 {
                        alloc::dealloc(result12, layout12);
                      }
                      for (ptr, layout) in cleanup_list {
                        
                        if layout.size() != 0 {
                          
                          alloc::dealloc(ptr, layout);
                          
                        }
                        
                      }
                      match l14 {
                        0 => {
                          let e = {
                            let l15 = *((ptr13 + 4) as *const i32);
                            let l16 = *((ptr13 + 8) as *const i32);
                            let base62 = l15;
                            let len62 = l16;
                            let mut result62 = Vec::with_capacity(len62 as usize);
                            for i in 0..len62 {
                              let base = base62 + i * 24;
                              let e62 = {
                                let l17 = i32::from(*((base + 0) as *const u8));
                                let v61 = match l17 {
                                  0 => {
                                    let e61 = {
                                      let l18 = *((base + 8) as *const i32);
                                      let l19 = *((base + 12) as *const i32);
                                      let len20 = l19 as usize;
                                      
                                      Vec::from_raw_parts(l18 as *mut _, len20, len20)
                                    };
                                    WitNode::RecordValue(e61)
                                  }
                                  1 => {
                                    let e61 = {
                                      let l21 = *((base + 8) as *const i32);
                                      let l22 = i32::from(*((base + 12) as *const u8));
                                      
                                      (l21 as u32, match l22 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l23 = *((base + 16) as *const i32);
                                            
                                            l23
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      })
                                    };
                                    WitNode::VariantValue(e61)
                                  }
                                  2 => {
                                    let e61 = {
                                      let l24 = *((base + 8) as *const i32);
                                      
                                      l24 as u32
                                    };
                                    WitNode::EnumValue(e61)
                                  }
                                  3 => {
                                    let e61 = {
                                      let l25 = *((base + 8) as *const i32);
                                      let l26 = *((base + 12) as *const i32);
                                      let base28 = l25;
                                      let len28 = l26;
                                      let mut result28 = Vec::with_capacity(len28 as usize);
                                      for i in 0..len28 {
                                        let base = base28 + i * 1;
                                        let e28 = {
                                          let l27 = i32::from(*((base + 0) as *const u8));
                                          
                                          wit_bindgen::rt::bool_lift(l27 as u8)
                                        };
                                        result28.push(e28);
                                      }
                                      wit_bindgen::rt::dealloc(base28, (len28 as usize) * 1, 1);
                                      
                                      result28
                                    };
                                    WitNode::FlagsValue(e61)
                                  }
                                  4 => {
                                    let e61 = {
                                      let l29 = *((base + 8) as *const i32);
                                      let l30 = *((base + 12) as *const i32);
                                      let len31 = l30 as usize;
                                      
                                      Vec::from_raw_parts(l29 as *mut _, len31, len31)
                                    };
                                    WitNode::TupleValue(e61)
                                  }
                                  5 => {
                                    let e61 = {
                                      let l32 = *((base + 8) as *const i32);
                                      let l33 = *((base + 12) as *const i32);
                                      let len34 = l33 as usize;
                                      
                                      Vec::from_raw_parts(l32 as *mut _, len34, len34)
                                    };
                                    WitNode::ListValue(e61)
                                  }
                                  6 => {
                                    let e61 = {
                                      let l35 = i32::from(*((base + 8) as *const u8));
                                      
                                      match l35 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l36 = *((base + 12) as *const i32);
                                            
                                            l36
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      }
                                    };
                                    WitNode::OptionValue(e61)
                                  }
                                  7 => {
                                    let e61 = {
                                      let l37 = i32::from(*((base + 8) as *const u8));
                                      
                                      match l37 {
                                        0 => {
                                          let e = {
                                            let l38 = i32::from(*((base + 12) as *const u8));
                                            
                                            match l38 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l39 = *((base + 16) as *const i32);
                                                  
                                                  l39
                                                };
                                                Some(e)
                                              }
                                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Ok(e)
                                        }
                                        1 => {
                                          let e = {
                                            let l40 = i32::from(*((base + 12) as *const u8));
                                            
                                            match l40 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l41 = *((base + 16) as *const i32);
                                                  
                                                  l41
                                                };
                                                Some(e)
                                              }
                                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Err(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      }
                                    };
                                    WitNode::ResultValue(e61)
                                  }
                                  8 => {
                                    let e61 = {
                                      let l42 = i32::from(*((base + 8) as *const u8));
                                      
                                      l42 as u8
                                    };
                                    WitNode::PrimU8(e61)
                                  }
                                  9 => {
                                    let e61 = {
                                      let l43 = i32::from(*((base + 8) as *const u16));
                                      
                                      l43 as u16
                                    };
                                    WitNode::PrimU16(e61)
                                  }
                                  10 => {
                                    let e61 = {
                                      let l44 = *((base + 8) as *const i32);
                                      
                                      l44 as u32
                                    };
                                    WitNode::PrimU32(e61)
                                  }
                                  11 => {
                                    let e61 = {
                                      let l45 = *((base + 8) as *const i64);
                                      
                                      l45 as u64
                                    };
                                    WitNode::PrimU64(e61)
                                  }
                                  12 => {
                                    let e61 = {
                                      let l46 = i32::from(*((base + 8) as *const i8));
                                      
                                      l46 as i8
                                    };
                                    WitNode::PrimS8(e61)
                                  }
                                  13 => {
                                    let e61 = {
                                      let l47 = i32::from(*((base + 8) as *const i16));
                                      
                                      l47 as i16
                                    };
                                    WitNode::PrimS16(e61)
                                  }
                                  14 => {
                                    let e61 = {
                                      let l48 = *((base + 8) as *const i32);
                                      
                                      l48
                                    };
                                    WitNode::PrimS32(e61)
                                  }
                                  15 => {
                                    let e61 = {
                                      let l49 = *((base + 8) as *const i64);
                                      
                                      l49
                                    };
                                    WitNode::PrimS64(e61)
                                  }
                                  16 => {
                                    let e61 = {
                                      let l50 = *((base + 8) as *const f32);
                                      
                                      l50
                                    };
                                    WitNode::PrimFloat32(e61)
                                  }
                                  17 => {
                                    let e61 = {
                                      let l51 = *((base + 8) as *const f64);
                                      
                                      l51
                                    };
                                    WitNode::PrimFloat64(e61)
                                  }
                                  18 => {
                                    let e61 = {
                                      let l52 = *((base + 8) as *const i32);
                                      
                                      wit_bindgen::rt::char_lift(l52 as u32)
                                    };
                                    WitNode::PrimChar(e61)
                                  }
                                  19 => {
                                    let e61 = {
                                      let l53 = i32::from(*((base + 8) as *const u8));
                                      
                                      wit_bindgen::rt::bool_lift(l53 as u8)
                                    };
                                    WitNode::PrimBool(e61)
                                  }
                                  20 => {
                                    let e61 = {
                                      let l54 = *((base + 8) as *const i32);
                                      let l55 = *((base + 12) as *const i32);
                                      let len56 = l55 as usize;
                                      let bytes56 = Vec::from_raw_parts(l54 as *mut _, len56, len56);
                                      
                                      wit_bindgen::rt::string_lift(bytes56)
                                    };
                                    WitNode::PrimString(e61)
                                  }
                                  n => {
                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                    let e61 = {
                                      let l57 = *((base + 8) as *const i32);
                                      let l58 = *((base + 12) as *const i32);
                                      let len59 = l58 as usize;
                                      let bytes59 = Vec::from_raw_parts(l57 as *mut _, len59, len59);
                                      let l60 = *((base + 16) as *const i64);
                                      
                                      (Uri{
                                        value: wit_bindgen::rt::string_lift(bytes59),
                                      }, l60 as u64)
                                    };
                                    WitNode::Handle(e61)
                                  }
                                };
                                
                                v61
                              };
                              result62.push(e62);
                            }
                            wit_bindgen::rt::dealloc(base62, (len62 as usize) * 24, 8);
                            
                            WitValue{
                              nodes: result62,
                            }
                          };
                          Ok(e)
                        }
                        1 => {
                          let e = {
                            let l63 = i32::from(*((ptr13 + 4) as *const u8));
                            let v76 = match l63 {
                              0 => {
                                let e76 = {
                                  let l64 = *((ptr13 + 8) as *const i32);
                                  let l65 = *((ptr13 + 12) as *const i32);
                                  let len66 = l65 as usize;
                                  let bytes66 = Vec::from_raw_parts(l64 as *mut _, len66, len66);
                                  
                                  wit_bindgen::rt::string_lift(bytes66)
                                };
                                RpcError::ProtocolError(e76)
                              }
                              1 => {
                                let e76 = {
                                  let l67 = *((ptr13 + 8) as *const i32);
                                  let l68 = *((ptr13 + 12) as *const i32);
                                  let len69 = l68 as usize;
                                  let bytes69 = Vec::from_raw_parts(l67 as *mut _, len69, len69);
                                  
                                  wit_bindgen::rt::string_lift(bytes69)
                                };
                                RpcError::Denied(e76)
                              }
                              2 => {
                                let e76 = {
                                  let l70 = *((ptr13 + 8) as *const i32);
                                  let l71 = *((ptr13 + 12) as *const i32);
                                  let len72 = l71 as usize;
                                  let bytes72 = Vec::from_raw_parts(l70 as *mut _, len72, len72);
                                  
                                  wit_bindgen::rt::string_lift(bytes72)
                                };
                                RpcError::NotFound(e76)
                              }
                              n => {
                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                let e76 = {
                                  let l73 = *((ptr13 + 8) as *const i32);
                                  let l74 = *((ptr13 + 12) as *const i32);
                                  let len75 = l74 as usize;
                                  let bytes75 = Vec::from_raw_parts(l73 as *mut _, len75, len75);
                                  
                                  wit_bindgen::rt::string_lift(bytes75)
                                };
                                RpcError::RemoteInternalError(e76)
                              }
                            };
                            
                            v76
                          };
                          Err(e)
                        }
                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                      }
                    }
                  }
                }
                impl WasmRpc {
                  #[allow(unused_unsafe, clippy::all)]
                  pub fn invoke(&self,function_name: &str,function_params: &[WitValue],) -> Result<(),RpcError>{
                    
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                    unsafe {
                      let mut cleanup_list = Vec::new();
                      
                      #[repr(align(4))]
                      struct RetArea([u8; 16]);
                      let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                      let vec0 = function_name;
                      let ptr0 = vec0.as_ptr() as i32;
                      let len0 = vec0.len() as i32;
                      let vec12 = function_params;
                      let len12 = vec12.len() as i32;
                      let layout12 = alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
                      let result12 = if layout12.size() != 0
                      {
                        let ptr = alloc::alloc(layout12);
                        if ptr.is_null()
                        {
                          alloc::handle_alloc_error(layout12);
                        }
                        ptr
                      }else {{
                        ::core::ptr::null_mut()
                      }};
                      for (i, e) in vec12.into_iter().enumerate() {
                        let base = result12 as i32 + (i as i32) * 8;
                        {
                          let WitValue{ nodes:nodes1, } = e;
                          let vec11 = nodes1;
                          let len11 = vec11.len() as i32;
                          let layout11 = alloc::Layout::from_size_align_unchecked(vec11.len() * 24, 8);
                          let result11 = if layout11.size() != 0
                          {
                            let ptr = alloc::alloc(layout11);
                            if ptr.is_null()
                            {
                              alloc::handle_alloc_error(layout11);
                            }
                            ptr
                          }else {{
                            ::core::ptr::null_mut()
                          }};
                          for (i, e) in vec11.into_iter().enumerate() {
                            let base = result11 as i32 + (i as i32) * 24;
                            {
                              match e {
                                WitNode::RecordValue(e) => {
                                  *((base + 0) as *mut u8) = (0i32) as u8;
                                  let vec2 = e;
                                  let ptr2 = vec2.as_ptr() as i32;
                                  let len2 = vec2.len() as i32;
                                  *((base + 12) as *mut i32) = len2;
                                  *((base + 8) as *mut i32) = ptr2;
                                },
                                WitNode::VariantValue(e) => {
                                  *((base + 0) as *mut u8) = (1i32) as u8;
                                  let (t3_0, t3_1, ) = e;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(t3_0);
                                  match t3_1 {
                                    Some(e) => {
                                      *((base + 12) as *mut u8) = (1i32) as u8;
                                      *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                    },
                                    None => {
                                      {
                                        *((base + 12) as *mut u8) = (0i32) as u8;
                                      }
                                    },
                                  };},
                                  WitNode::EnumValue(e) => {
                                    *((base + 0) as *mut u8) = (2i32) as u8;
                                    *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                  },
                                  WitNode::FlagsValue(e) => {
                                    *((base + 0) as *mut u8) = (3i32) as u8;
                                    let vec4 = e;
                                    let len4 = vec4.len() as i32;
                                    let layout4 = alloc::Layout::from_size_align_unchecked(vec4.len() * 1, 1);
                                    let result4 = if layout4.size() != 0
                                    {
                                      let ptr = alloc::alloc(layout4);
                                      if ptr.is_null()
                                      {
                                        alloc::handle_alloc_error(layout4);
                                      }
                                      ptr
                                    }else {{
                                      ::core::ptr::null_mut()
                                    }};
                                    for (i, e) in vec4.into_iter().enumerate() {
                                      let base = result4 as i32 + (i as i32) * 1;
                                      {
                                        *((base + 0) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                      }
                                    }
                                    *((base + 12) as *mut i32) = len4;
                                    *((base + 8) as *mut i32) = result4 as i32;
                                    cleanup_list.extend_from_slice(&[(result4, layout4),]);
                                  },
                                  WitNode::TupleValue(e) => {
                                    *((base + 0) as *mut u8) = (4i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr() as i32;
                                    let len5 = vec5.len() as i32;
                                    *((base + 12) as *mut i32) = len5;
                                    *((base + 8) as *mut i32) = ptr5;
                                  },
                                  WitNode::ListValue(e) => {
                                    *((base + 0) as *mut u8) = (5i32) as u8;
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr() as i32;
                                    let len6 = vec6.len() as i32;
                                    *((base + 12) as *mut i32) = len6;
                                    *((base + 8) as *mut i32) = ptr6;
                                  },
                                  WitNode::OptionValue(e) => {
                                    *((base + 0) as *mut u8) = (6i32) as u8;
                                    match e {
                                      Some(e) => {
                                        *((base + 8) as *mut u8) = (1i32) as u8;
                                        *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                      },
                                      None => {
                                        {
                                          *((base + 8) as *mut u8) = (0i32) as u8;
                                        }
                                      },
                                    };},
                                    WitNode::ResultValue(e) => {
                                      *((base + 0) as *mut u8) = (7i32) as u8;
                                      match e {
                                        Ok(e) => { {
                                          *((base + 8) as *mut u8) = (0i32) as u8;
                                          match e {
                                            Some(e) => {
                                              *((base + 12) as *mut u8) = (1i32) as u8;
                                              *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                            },
                                            None => {
                                              {
                                                *((base + 12) as *mut u8) = (0i32) as u8;
                                              }
                                            },
                                          };} },
                                          Err(e) => { {
                                            *((base + 8) as *mut u8) = (1i32) as u8;
                                            match e {
                                              Some(e) => {
                                                *((base + 12) as *mut u8) = (1i32) as u8;
                                                *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                              },
                                              None => {
                                                {
                                                  *((base + 12) as *mut u8) = (0i32) as u8;
                                                }
                                              },
                                            };} },
                                          };},
                                          WitNode::PrimU8(e) => {
                                            *((base + 0) as *mut u8) = (8i32) as u8;
                                            *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                          },
                                          WitNode::PrimU16(e) => {
                                            *((base + 0) as *mut u8) = (9i32) as u8;
                                            *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                          },
                                          WitNode::PrimU32(e) => {
                                            *((base + 0) as *mut u8) = (10i32) as u8;
                                            *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                          },
                                          WitNode::PrimU64(e) => {
                                            *((base + 0) as *mut u8) = (11i32) as u8;
                                            *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                          },
                                          WitNode::PrimS8(e) => {
                                            *((base + 0) as *mut u8) = (12i32) as u8;
                                            *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                          },
                                          WitNode::PrimS16(e) => {
                                            *((base + 0) as *mut u8) = (13i32) as u8;
                                            *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                          },
                                          WitNode::PrimS32(e) => {
                                            *((base + 0) as *mut u8) = (14i32) as u8;
                                            *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                          },
                                          WitNode::PrimS64(e) => {
                                            *((base + 0) as *mut u8) = (15i32) as u8;
                                            *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                          },
                                          WitNode::PrimFloat32(e) => {
                                            *((base + 0) as *mut u8) = (16i32) as u8;
                                            *((base + 8) as *mut f32) = wit_bindgen::rt::as_f32(e);
                                          },
                                          WitNode::PrimFloat64(e) => {
                                            *((base + 0) as *mut u8) = (17i32) as u8;
                                            *((base + 8) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                          },
                                          WitNode::PrimChar(e) => {
                                            *((base + 0) as *mut u8) = (18i32) as u8;
                                            *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                          },
                                          WitNode::PrimBool(e) => {
                                            *((base + 0) as *mut u8) = (19i32) as u8;
                                            *((base + 8) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                          },
                                          WitNode::PrimString(e) => {
                                            *((base + 0) as *mut u8) = (20i32) as u8;
                                            let vec7 = e;
                                            let ptr7 = vec7.as_ptr() as i32;
                                            let len7 = vec7.len() as i32;
                                            *((base + 12) as *mut i32) = len7;
                                            *((base + 8) as *mut i32) = ptr7;
                                          },
                                          WitNode::Handle(e) => {
                                            *((base + 0) as *mut u8) = (21i32) as u8;
                                            let (t8_0, t8_1, ) = e;
                                            let Uri{ value:value9, } = t8_0;
                                            let vec10 = value9;
                                            let ptr10 = vec10.as_ptr() as i32;
                                            let len10 = vec10.len() as i32;
                                            *((base + 12) as *mut i32) = len10;
                                            *((base + 8) as *mut i32) = ptr10;
                                            *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(t8_1);
                                          },
                                        }
                                      }
                                    }
                                    *((base + 4) as *mut i32) = len11;
                                    *((base + 0) as *mut i32) = result11 as i32;
                                    cleanup_list.extend_from_slice(&[(result11, layout11),]);
                                  }
                                }
                                let ptr13 = ret_area.as_mut_ptr() as i32;
                                #[cfg(target_arch = "wasm32")]
                                #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                                extern "C" {
                                  #[link_name = "[method]wasm-rpc.invoke"]
                                  fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                                }
                                
                                #[cfg(not(target_arch = "wasm32"))]
                                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                                wit_import((self).handle() as i32, ptr0, len0, result12 as i32, len12, ptr13);
                                let l14 = i32::from(*((ptr13 + 0) as *const u8));
                                if layout12.size() != 0 {
                                  alloc::dealloc(result12, layout12);
                                }
                                for (ptr, layout) in cleanup_list {
                                  
                                  if layout.size() != 0 {
                                    
                                    alloc::dealloc(ptr, layout);
                                    
                                  }
                                  
                                }
                                match l14 {
                                  0 => {
                                    let e = ();
                                    Ok(e)
                                  }
                                  1 => {
                                    let e = {
                                      let l15 = i32::from(*((ptr13 + 4) as *const u8));
                                      let v28 = match l15 {
                                        0 => {
                                          let e28 = {
                                            let l16 = *((ptr13 + 8) as *const i32);
                                            let l17 = *((ptr13 + 12) as *const i32);
                                            let len18 = l17 as usize;
                                            let bytes18 = Vec::from_raw_parts(l16 as *mut _, len18, len18);
                                            
                                            wit_bindgen::rt::string_lift(bytes18)
                                          };
                                          RpcError::ProtocolError(e28)
                                        }
                                        1 => {
                                          let e28 = {
                                            let l19 = *((ptr13 + 8) as *const i32);
                                            let l20 = *((ptr13 + 12) as *const i32);
                                            let len21 = l20 as usize;
                                            let bytes21 = Vec::from_raw_parts(l19 as *mut _, len21, len21);
                                            
                                            wit_bindgen::rt::string_lift(bytes21)
                                          };
                                          RpcError::Denied(e28)
                                        }
                                        2 => {
                                          let e28 = {
                                            let l22 = *((ptr13 + 8) as *const i32);
                                            let l23 = *((ptr13 + 12) as *const i32);
                                            let len24 = l23 as usize;
                                            let bytes24 = Vec::from_raw_parts(l22 as *mut _, len24, len24);
                                            
                                            wit_bindgen::rt::string_lift(bytes24)
                                          };
                                          RpcError::NotFound(e28)
                                        }
                                        n => {
                                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                                          let e28 = {
                                            let l25 = *((ptr13 + 8) as *const i32);
                                            let l26 = *((ptr13 + 12) as *const i32);
                                            let len27 = l26 as usize;
                                            let bytes27 = Vec::from_raw_parts(l25 as *mut _, len27, len27);
                                            
                                            wit_bindgen::rt::string_lift(bytes27)
                                          };
                                          RpcError::RemoteInternalError(e28)
                                        }
                                      };
                                      
                                      v28
                                    };
                                    Err(e)
                                  }
                                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                }
                              }
                            }
                          }
                          
                        }
                        
                      }
                    }
                    pub mod timeline {
                      pub mod core {
                        
                        #[allow(clippy::all)]
                        pub mod api {
                          #[used]
                          #[doc(hidden)]
                          #[cfg(target_arch = "wasm32")]
                          static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
                          pub type EventValue = super::super::super::timeline::event_processor::api::EventValue;
                          pub type NodeIndex = i32;
                          #[derive(Clone)]
                          pub struct Server {
                            pub worker_id: wit_bindgen::rt::string::String,
                            pub template_id: wit_bindgen::rt::string::String,
                          }
                          impl ::core::fmt::Debug for Server {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("Server").field("worker-id", &self.worker_id).field("template-id", &self.template_id).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct ServerWithEventColumnName {
                            pub server: Server,
                            pub event_column_name: wit_bindgen::rt::string::String,
                          }
                          impl ::core::fmt::Debug for ServerWithEventColumnName {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("ServerWithEventColumnName").field("server", &self.server).field("event-column-name", &self.event_column_name).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct TimelineWithServer {
                            pub server: Server,
                            pub timeline: NodeIndex,
                          }
                          impl ::core::fmt::Debug for TimelineWithServer {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("TimelineWithServer").field("server", &self.server).field("timeline", &self.timeline).finish()
                            }
                          }
                          /// Comparators used to compare a timeline with a constant
                          #[repr(u8)]
                          #[derive(Clone, Copy, Eq, PartialEq)]
                          pub enum TimelineConstantComparator {
                            GreaterThan,
                            GreaterThanEqual,
                            LessThan,
                            LessThanEqual,
                          }
                          impl ::core::fmt::Debug for TimelineConstantComparator {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              match self {
                                TimelineConstantComparator::GreaterThan => {
                                  f.debug_tuple("TimelineConstantComparator::GreaterThan").finish()
                                }
                                TimelineConstantComparator::GreaterThanEqual => {
                                  f.debug_tuple("TimelineConstantComparator::GreaterThanEqual").finish()
                                }
                                TimelineConstantComparator::LessThan => {
                                  f.debug_tuple("TimelineConstantComparator::LessThan").finish()
                                }
                                TimelineConstantComparator::LessThanEqual => {
                                  f.debug_tuple("TimelineConstantComparator::LessThanEqual").finish()
                                }
                              }
                            }
                          }
                          
                          impl TimelineConstantComparator{
                            pub(crate) unsafe fn _lift(val: u8) -> TimelineConstantComparator{
                              if !cfg!(debug_assertions) {
                                return ::core::mem::transmute(val);
                              }
                              
                              match val {
                                0 => TimelineConstantComparator::GreaterThan,
                                1 => TimelineConstantComparator::GreaterThanEqual,
                                2 => TimelineConstantComparator::LessThan,
                                3 => TimelineConstantComparator::LessThanEqual,
                                
                                _ => panic!("invalid enum discriminant"),
                              }
                            }
                          }
                          
                          /// A  timeline-constant-compared corresponds to classic timeline operations
                          /// in the paper
                          /// A primitive timeline is also maintained in a separate worker/server
                          #[derive(Clone)]
                          pub struct TimelineConstantCompared {
                            pub op: TimelineConstantComparator,
                            pub timeline: NodeIndex,
                            pub value: EventValue,
                            pub server: Server,
                          }
                          impl ::core::fmt::Debug for TimelineConstantCompared {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("TimelineConstantCompared").field("op", &self.op).field("timeline", &self.timeline).field("value", &self.value).field("server", &self.server).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct TimelineNegated {
                            pub timeline: NodeIndex,
                            pub server: Server,
                          }
                          impl ::core::fmt::Debug for TimelineNegated {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("TimelineNegated").field("timeline", &self.timeline).field("server", &self.server).finish()
                            }
                          }
                          #[repr(u8)]
                          #[derive(Clone, Copy, Eq, PartialEq)]
                          pub enum EventPredicateOp {
                            Equal,
                            GreaterThan,
                            LessThan,
                          }
                          impl ::core::fmt::Debug for EventPredicateOp {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              match self {
                                EventPredicateOp::Equal => {
                                  f.debug_tuple("EventPredicateOp::Equal").finish()
                                }
                                EventPredicateOp::GreaterThan => {
                                  f.debug_tuple("EventPredicateOp::GreaterThan").finish()
                                }
                                EventPredicateOp::LessThan => {
                                  f.debug_tuple("EventPredicateOp::LessThan").finish()
                                }
                              }
                            }
                          }
                          
                          impl EventPredicateOp{
                            pub(crate) unsafe fn _lift(val: u8) -> EventPredicateOp{
                              if !cfg!(debug_assertions) {
                                return ::core::mem::transmute(val);
                              }
                              
                              match val {
                                0 => EventPredicateOp::Equal,
                                1 => EventPredicateOp::GreaterThan,
                                2 => EventPredicateOp::LessThan,
                                
                                _ => panic!("invalid enum discriminant"),
                              }
                            }
                          }
                          
                          #[derive(Clone)]
                          pub struct EventPredicate {
                            pub col_name: wit_bindgen::rt::string::String,
                            pub value: EventValue,
                            pub op: EventPredicateOp,
                          }
                          impl ::core::fmt::Debug for EventPredicate {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("EventPredicate").field("col-name", &self.col_name).field("value", &self.value).field("op", &self.op).finish()
                            }
                          }
                          /// A filtered timeline is operation on state dynamic timelines
                          /// applied with an event filter
                          /// TLHasExistedWithIn(col("userAction" ) == "seek")
                          /// seek and col("userAction) is event-predicate
                          /// and == is filter-op
                          /// A filtered timeline is also maintained in a separate worker/server
                          #[derive(Clone)]
                          pub struct TimelineWithEventPredicate {
                            pub timeline: NodeIndex,
                            pub event_predicate: EventPredicate,
                            pub server: Server,
                          }
                          impl ::core::fmt::Debug for TimelineWithEventPredicate {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("TimelineWithEventPredicate").field("timeline", &self.timeline).field("event-predicate", &self.event_predicate).field("server", &self.server).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct TimelineWithEventPredicateWithin {
                            pub filtered: TimelineWithEventPredicate,
                            pub time: u64,
                          }
                          impl ::core::fmt::Debug for TimelineWithEventPredicateWithin {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("TimelineWithEventPredicateWithin").field("filtered", &self.filtered).field("time", &self.time).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub enum TimelineNode{
                            TimelineComparison(TimelineConstantCompared),
                            TimelineNegation(TimelineNegated),
                            TlLatestEventToState(ServerWithEventColumnName),
                            TlHasExisted(TimelineWithEventPredicate),
                            TlHasExistedWithin(TimelineWithEventPredicateWithin),
                            TlDurationWhere(TimelineWithServer),
                            TlDurationInCurState(TimelineWithServer),
                          }
                          impl ::core::fmt::Debug for TimelineNode {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              match self {
                                TimelineNode::TimelineComparison(e) => {
                                  f.debug_tuple("TimelineNode::TimelineComparison").field(e).finish()
                                }
                                TimelineNode::TimelineNegation(e) => {
                                  f.debug_tuple("TimelineNode::TimelineNegation").field(e).finish()
                                }
                                TimelineNode::TlLatestEventToState(e) => {
                                  f.debug_tuple("TimelineNode::TlLatestEventToState").field(e).finish()
                                }
                                TimelineNode::TlHasExisted(e) => {
                                  f.debug_tuple("TimelineNode::TlHasExisted").field(e).finish()
                                }
                                TimelineNode::TlHasExistedWithin(e) => {
                                  f.debug_tuple("TimelineNode::TlHasExistedWithin").field(e).finish()
                                }
                                TimelineNode::TlDurationWhere(e) => {
                                  f.debug_tuple("TimelineNode::TlDurationWhere").field(e).finish()
                                }
                                TimelineNode::TlDurationInCurState(e) => {
                                  f.debug_tuple("TimelineNode::TlDurationInCurState").field(e).finish()
                                }
                              }
                            }
                          }
                          #[derive(Clone)]
                          pub struct TimelineOp {
                            pub nodes: wit_bindgen::rt::vec::Vec::<TimelineNode>,
                          }
                          impl ::core::fmt::Debug for TimelineOp {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("TimelineOp").field("nodes", &self.nodes).finish()
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn initialize_timeline(timeline: &TimelineOp,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(4))]
                              struct RetArea([u8; 12]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let TimelineOp{ nodes:nodes0, } = timeline;
                              let vec41 = nodes0;
                              let len41 = vec41.len() as i32;
                              let layout41 = alloc::Layout::from_size_align_unchecked(vec41.len() * 72, 8);
                              let result41 = if layout41.size() != 0
                              {
                                let ptr = alloc::alloc(layout41);
                                if ptr.is_null()
                                {
                                  alloc::handle_alloc_error(layout41);
                                }
                                ptr
                              }else {{
                                ::core::ptr::null_mut()
                              }};
                              for (i, e) in vec41.into_iter().enumerate() {
                                let base = result41 as i32 + (i as i32) * 72;
                                {
                                  match e {
                                    TimelineNode::TimelineComparison(e) => {
                                      *((base + 0) as *mut u8) = (0i32) as u8;
                                      let TimelineConstantCompared{ op:op1, timeline:timeline1, value:value1, server:server1, } = e;
                                      *((base + 8) as *mut u8) = (op1.clone() as i32) as u8;
                                      *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(timeline1);
                                      use super::super::super::timeline::event_processor::api::EventValue as V3;
                                      match value1 {
                                        V3::StringValue(e) => {
                                          *((base + 16) as *mut u8) = (0i32) as u8;
                                          let vec2 = e;
                                          let ptr2 = vec2.as_ptr() as i32;
                                          let len2 = vec2.len() as i32;
                                          *((base + 28) as *mut i32) = len2;
                                          *((base + 24) as *mut i32) = ptr2;
                                        },
                                        V3::IntValue(e) => {
                                          *((base + 16) as *mut u8) = (1i32) as u8;
                                          *((base + 24) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                        },
                                        V3::FloatValue(e) => {
                                          *((base + 16) as *mut u8) = (2i32) as u8;
                                          *((base + 24) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                        },
                                        V3::BoolValue(e) => {
                                          *((base + 16) as *mut u8) = (3i32) as u8;
                                          *((base + 24) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                        },
                                      }
                                      let Server{ worker_id:worker_id4, template_id:template_id4, } = server1;
                                      let vec5 = worker_id4;
                                      let ptr5 = vec5.as_ptr() as i32;
                                      let len5 = vec5.len() as i32;
                                      *((base + 36) as *mut i32) = len5;
                                      *((base + 32) as *mut i32) = ptr5;
                                      let vec6 = template_id4;
                                      let ptr6 = vec6.as_ptr() as i32;
                                      let len6 = vec6.len() as i32;
                                      *((base + 44) as *mut i32) = len6;
                                      *((base + 40) as *mut i32) = ptr6;
                                    },
                                    TimelineNode::TimelineNegation(e) => {
                                      *((base + 0) as *mut u8) = (1i32) as u8;
                                      let TimelineNegated{ timeline:timeline7, server:server7, } = e;
                                      *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(timeline7);
                                      let Server{ worker_id:worker_id8, template_id:template_id8, } = server7;
                                      let vec9 = worker_id8;
                                      let ptr9 = vec9.as_ptr() as i32;
                                      let len9 = vec9.len() as i32;
                                      *((base + 16) as *mut i32) = len9;
                                      *((base + 12) as *mut i32) = ptr9;
                                      let vec10 = template_id8;
                                      let ptr10 = vec10.as_ptr() as i32;
                                      let len10 = vec10.len() as i32;
                                      *((base + 24) as *mut i32) = len10;
                                      *((base + 20) as *mut i32) = ptr10;
                                    },
                                    TimelineNode::TlLatestEventToState(e) => {
                                      *((base + 0) as *mut u8) = (2i32) as u8;
                                      let ServerWithEventColumnName{ server:server11, event_column_name:event_column_name11, } = e;
                                      let Server{ worker_id:worker_id12, template_id:template_id12, } = server11;
                                      let vec13 = worker_id12;
                                      let ptr13 = vec13.as_ptr() as i32;
                                      let len13 = vec13.len() as i32;
                                      *((base + 12) as *mut i32) = len13;
                                      *((base + 8) as *mut i32) = ptr13;
                                      let vec14 = template_id12;
                                      let ptr14 = vec14.as_ptr() as i32;
                                      let len14 = vec14.len() as i32;
                                      *((base + 20) as *mut i32) = len14;
                                      *((base + 16) as *mut i32) = ptr14;
                                      let vec15 = event_column_name11;
                                      let ptr15 = vec15.as_ptr() as i32;
                                      let len15 = vec15.len() as i32;
                                      *((base + 28) as *mut i32) = len15;
                                      *((base + 24) as *mut i32) = ptr15;
                                    },
                                    TimelineNode::TlHasExisted(e) => {
                                      *((base + 0) as *mut u8) = (3i32) as u8;
                                      let TimelineWithEventPredicate{ timeline:timeline16, event_predicate:event_predicate16, server:server16, } = e;
                                      *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(timeline16);
                                      let EventPredicate{ col_name:col_name17, value:value17, op:op17, } = event_predicate16;
                                      let vec18 = col_name17;
                                      let ptr18 = vec18.as_ptr() as i32;
                                      let len18 = vec18.len() as i32;
                                      *((base + 20) as *mut i32) = len18;
                                      *((base + 16) as *mut i32) = ptr18;
                                      use super::super::super::timeline::event_processor::api::EventValue as V20;
                                      match value17 {
                                        V20::StringValue(e) => {
                                          *((base + 24) as *mut u8) = (0i32) as u8;
                                          let vec19 = e;
                                          let ptr19 = vec19.as_ptr() as i32;
                                          let len19 = vec19.len() as i32;
                                          *((base + 36) as *mut i32) = len19;
                                          *((base + 32) as *mut i32) = ptr19;
                                        },
                                        V20::IntValue(e) => {
                                          *((base + 24) as *mut u8) = (1i32) as u8;
                                          *((base + 32) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                        },
                                        V20::FloatValue(e) => {
                                          *((base + 24) as *mut u8) = (2i32) as u8;
                                          *((base + 32) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                        },
                                        V20::BoolValue(e) => {
                                          *((base + 24) as *mut u8) = (3i32) as u8;
                                          *((base + 32) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                        },
                                      }
                                      *((base + 40) as *mut u8) = (op17.clone() as i32) as u8;
                                      let Server{ worker_id:worker_id21, template_id:template_id21, } = server16;
                                      let vec22 = worker_id21;
                                      let ptr22 = vec22.as_ptr() as i32;
                                      let len22 = vec22.len() as i32;
                                      *((base + 52) as *mut i32) = len22;
                                      *((base + 48) as *mut i32) = ptr22;
                                      let vec23 = template_id21;
                                      let ptr23 = vec23.as_ptr() as i32;
                                      let len23 = vec23.len() as i32;
                                      *((base + 60) as *mut i32) = len23;
                                      *((base + 56) as *mut i32) = ptr23;
                                    },
                                    TimelineNode::TlHasExistedWithin(e) => {
                                      *((base + 0) as *mut u8) = (4i32) as u8;
                                      let TimelineWithEventPredicateWithin{ filtered:filtered24, time:time24, } = e;
                                      let TimelineWithEventPredicate{ timeline:timeline25, event_predicate:event_predicate25, server:server25, } = filtered24;
                                      *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(timeline25);
                                      let EventPredicate{ col_name:col_name26, value:value26, op:op26, } = event_predicate25;
                                      let vec27 = col_name26;
                                      let ptr27 = vec27.as_ptr() as i32;
                                      let len27 = vec27.len() as i32;
                                      *((base + 20) as *mut i32) = len27;
                                      *((base + 16) as *mut i32) = ptr27;
                                      use super::super::super::timeline::event_processor::api::EventValue as V29;
                                      match value26 {
                                        V29::StringValue(e) => {
                                          *((base + 24) as *mut u8) = (0i32) as u8;
                                          let vec28 = e;
                                          let ptr28 = vec28.as_ptr() as i32;
                                          let len28 = vec28.len() as i32;
                                          *((base + 36) as *mut i32) = len28;
                                          *((base + 32) as *mut i32) = ptr28;
                                        },
                                        V29::IntValue(e) => {
                                          *((base + 24) as *mut u8) = (1i32) as u8;
                                          *((base + 32) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                        },
                                        V29::FloatValue(e) => {
                                          *((base + 24) as *mut u8) = (2i32) as u8;
                                          *((base + 32) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                        },
                                        V29::BoolValue(e) => {
                                          *((base + 24) as *mut u8) = (3i32) as u8;
                                          *((base + 32) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                        },
                                      }
                                      *((base + 40) as *mut u8) = (op26.clone() as i32) as u8;
                                      let Server{ worker_id:worker_id30, template_id:template_id30, } = server25;
                                      let vec31 = worker_id30;
                                      let ptr31 = vec31.as_ptr() as i32;
                                      let len31 = vec31.len() as i32;
                                      *((base + 52) as *mut i32) = len31;
                                      *((base + 48) as *mut i32) = ptr31;
                                      let vec32 = template_id30;
                                      let ptr32 = vec32.as_ptr() as i32;
                                      let len32 = vec32.len() as i32;
                                      *((base + 60) as *mut i32) = len32;
                                      *((base + 56) as *mut i32) = ptr32;
                                      *((base + 64) as *mut i64) = wit_bindgen::rt::as_i64(time24);
                                    },
                                    TimelineNode::TlDurationWhere(e) => {
                                      *((base + 0) as *mut u8) = (5i32) as u8;
                                      let TimelineWithServer{ server:server33, timeline:timeline33, } = e;
                                      let Server{ worker_id:worker_id34, template_id:template_id34, } = server33;
                                      let vec35 = worker_id34;
                                      let ptr35 = vec35.as_ptr() as i32;
                                      let len35 = vec35.len() as i32;
                                      *((base + 12) as *mut i32) = len35;
                                      *((base + 8) as *mut i32) = ptr35;
                                      let vec36 = template_id34;
                                      let ptr36 = vec36.as_ptr() as i32;
                                      let len36 = vec36.len() as i32;
                                      *((base + 20) as *mut i32) = len36;
                                      *((base + 16) as *mut i32) = ptr36;
                                      *((base + 24) as *mut i32) = wit_bindgen::rt::as_i32(timeline33);
                                    },
                                    TimelineNode::TlDurationInCurState(e) => {
                                      *((base + 0) as *mut u8) = (6i32) as u8;
                                      let TimelineWithServer{ server:server37, timeline:timeline37, } = e;
                                      let Server{ worker_id:worker_id38, template_id:template_id38, } = server37;
                                      let vec39 = worker_id38;
                                      let ptr39 = vec39.as_ptr() as i32;
                                      let len39 = vec39.len() as i32;
                                      *((base + 12) as *mut i32) = len39;
                                      *((base + 8) as *mut i32) = ptr39;
                                      let vec40 = template_id38;
                                      let ptr40 = vec40.as_ptr() as i32;
                                      let len40 = vec40.len() as i32;
                                      *((base + 20) as *mut i32) = len40;
                                      *((base + 16) as *mut i32) = ptr40;
                                      *((base + 24) as *mut i32) = wit_bindgen::rt::as_i32(timeline37);
                                    },
                                  }
                                }
                              }
                              let ptr42 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "timeline:core/api")]
                              extern "C" {
                                #[link_name = "initialize-timeline"]
                                fn wit_import(_: i32, _: i32, _: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
                              wit_import(result41 as i32, len41, ptr42);
                              let l43 = i32::from(*((ptr42 + 0) as *const u8));
                              if layout41.size() != 0 {
                                alloc::dealloc(result41, layout41);
                              }
                              match l43 {
                                0 => {
                                  let e = {
                                    let l44 = *((ptr42 + 4) as *const i32);
                                    let l45 = *((ptr42 + 8) as *const i32);
                                    let len46 = l45 as usize;
                                    let bytes46 = Vec::from_raw_parts(l44 as *mut _, len46, len46);
                                    
                                    wit_bindgen::rt::string_lift(bytes46)
                                  };
                                  Ok(e)
                                }
                                1 => {
                                  let e = {
                                    let l47 = *((ptr42 + 4) as *const i32);
                                    let l48 = *((ptr42 + 8) as *const i32);
                                    let len49 = l48 as usize;
                                    let bytes49 = Vec::from_raw_parts(l47 as *mut _, len49, len49);
                                    
                                    wit_bindgen::rt::string_lift(bytes49)
                                  };
                                  Err(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              }
                            }
                          }
                          
                        }
                        
                      }
                      pub mod event_processor {
                        
                        #[allow(clippy::all)]
                        pub mod api {
                          #[used]
                          #[doc(hidden)]
                          #[cfg(target_arch = "wasm32")]
                          static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
                          #[derive(Clone)]
                          pub enum EventValue{
                            StringValue(wit_bindgen::rt::string::String),
                            IntValue(i64),
                            FloatValue(f64),
                            BoolValue(bool),
                          }
                          impl ::core::fmt::Debug for EventValue {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              match self {
                                EventValue::StringValue(e) => {
                                  f.debug_tuple("EventValue::StringValue").field(e).finish()
                                }
                                EventValue::IntValue(e) => {
                                  f.debug_tuple("EventValue::IntValue").field(e).finish()
                                }
                                EventValue::FloatValue(e) => {
                                  f.debug_tuple("EventValue::FloatValue").field(e).finish()
                                }
                                EventValue::BoolValue(e) => {
                                  f.debug_tuple("EventValue::BoolValue").field(e).finish()
                                }
                              }
                            }
                          }
                          #[derive(Clone)]
                          pub struct Event {
                            pub time: u64,
                            pub event: wit_bindgen::rt::vec::Vec::<(wit_bindgen::rt::string::String,EventValue,)>,
                          }
                          impl ::core::fmt::Debug for Event {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("Event").field("time", &self.time).field("event", &self.event).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct WorkerId {
                            pub name: wit_bindgen::rt::string::String,
                          }
                          impl ::core::fmt::Debug for WorkerId {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("WorkerId").field("name", &self.name).finish()
                            }
                          }
                          #[repr(C)]
                          #[derive(Clone, Copy)]
                          pub struct TimePeriod {
                            pub t1: u64,
                            pub t2: u64,
                          }
                          impl ::core::fmt::Debug for TimePeriod {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("TimePeriod").field("t1", &self.t1).field("t2", &self.t2).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct EventStateResult {
                            pub time_period: TimePeriod,
                            pub value: EventValue,
                          }
                          impl ::core::fmt::Debug for EventStateResult {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("EventStateResult").field("time-period", &self.time_period).field("value", &self.value).finish()
                            }
                          }
                          #[derive(Clone)]
                          pub struct LatestEventToStateResult {
                            pub event_col_name: wit_bindgen::rt::string::String,
                            pub event_results: wit_bindgen::rt::vec::Vec::<EventStateResult>,
                          }
                          impl ::core::fmt::Debug for LatestEventToStateResult {
                            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                              f.debug_struct("LatestEventToStateResult").field("event-col-name", &self.event_col_name).field("event-results", &self.event_results).finish()
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn initialize_latest_event_state(worker: &WorkerId,event_col_name: &str,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(4))]
                              struct RetArea([u8; 12]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let WorkerId{ name:name0, } = worker;
                              let vec1 = name0;
                              let ptr1 = vec1.as_ptr() as i32;
                              let len1 = vec1.len() as i32;
                              let vec2 = event_col_name;
                              let ptr2 = vec2.as_ptr() as i32;
                              let len2 = vec2.len() as i32;
                              let ptr3 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "timeline:event-processor/api")]
                              extern "C" {
                                #[link_name = "initialize-latest-event-state"]
                                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                              wit_import(ptr1, len1, ptr2, len2, ptr3);
                              let l4 = i32::from(*((ptr3 + 0) as *const u8));
                              match l4 {
                                0 => {
                                  let e = {
                                    let l5 = *((ptr3 + 4) as *const i32);
                                    let l6 = *((ptr3 + 8) as *const i32);
                                    let len7 = l6 as usize;
                                    let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                                    
                                    wit_bindgen::rt::string_lift(bytes7)
                                  };
                                  Ok(e)
                                }
                                1 => {
                                  let e = {
                                    let l8 = *((ptr3 + 4) as *const i32);
                                    let l9 = *((ptr3 + 8) as *const i32);
                                    let len10 = l9 as usize;
                                    let bytes10 = Vec::from_raw_parts(l8 as *mut _, len10, len10);
                                    
                                    wit_bindgen::rt::string_lift(bytes10)
                                  };
                                  Err(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              }
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn add_event(event: &Event,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(4))]
                              struct RetArea([u8; 12]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let Event{ time:time0, event:event0, } = event;
                              let vec4 = event0;
                              let len4 = vec4.len() as i32;
                              let layout4 = alloc::Layout::from_size_align_unchecked(vec4.len() * 24, 8);
                              let result4 = if layout4.size() != 0
                              {
                                let ptr = alloc::alloc(layout4);
                                if ptr.is_null()
                                {
                                  alloc::handle_alloc_error(layout4);
                                }
                                ptr
                              }else {{
                                ::core::ptr::null_mut()
                              }};
                              for (i, e) in vec4.into_iter().enumerate() {
                                let base = result4 as i32 + (i as i32) * 24;
                                {
                                  let (t1_0, t1_1, ) = e;
                                  let vec2 = t1_0;
                                  let ptr2 = vec2.as_ptr() as i32;
                                  let len2 = vec2.len() as i32;
                                  *((base + 4) as *mut i32) = len2;
                                  *((base + 0) as *mut i32) = ptr2;
                                  match t1_1 {
                                    EventValue::StringValue(e) => {
                                      *((base + 8) as *mut u8) = (0i32) as u8;
                                      let vec3 = e;
                                      let ptr3 = vec3.as_ptr() as i32;
                                      let len3 = vec3.len() as i32;
                                      *((base + 20) as *mut i32) = len3;
                                      *((base + 16) as *mut i32) = ptr3;
                                    },
                                    EventValue::IntValue(e) => {
                                      *((base + 8) as *mut u8) = (1i32) as u8;
                                      *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                    },
                                    EventValue::FloatValue(e) => {
                                      *((base + 8) as *mut u8) = (2i32) as u8;
                                      *((base + 16) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                    },
                                    EventValue::BoolValue(e) => {
                                      *((base + 8) as *mut u8) = (3i32) as u8;
                                      *((base + 16) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                    },
                                  }
                                }
                              }
                              let ptr5 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "timeline:event-processor/api")]
                              extern "C" {
                                #[link_name = "add-event"]
                                fn wit_import(_: i64, _: i32, _: i32, _: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i64, _: i32, _: i32, _: i32, ){ unreachable!() }
                              wit_import(wit_bindgen::rt::as_i64(time0), result4 as i32, len4, ptr5);
                              let l6 = i32::from(*((ptr5 + 0) as *const u8));
                              if layout4.size() != 0 {
                                alloc::dealloc(result4, layout4);
                              }
                              match l6 {
                                0 => {
                                  let e = {
                                    let l7 = *((ptr5 + 4) as *const i32);
                                    let l8 = *((ptr5 + 8) as *const i32);
                                    let len9 = l8 as usize;
                                    let bytes9 = Vec::from_raw_parts(l7 as *mut _, len9, len9);
                                    
                                    wit_bindgen::rt::string_lift(bytes9)
                                  };
                                  Ok(e)
                                }
                                1 => {
                                  let e = {
                                    let l10 = *((ptr5 + 4) as *const i32);
                                    let l11 = *((ptr5 + 8) as *const i32);
                                    let len12 = l11 as usize;
                                    let bytes12 = Vec::from_raw_parts(l10 as *mut _, len12, len12);
                                    
                                    wit_bindgen::rt::string_lift(bytes12)
                                  };
                                  Err(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              }
                            }
                          }
                          #[allow(unused_unsafe, clippy::all)]
                          pub fn latest_event_to_state(t1: u64,) -> Result<LatestEventToStateResult,wit_bindgen::rt::string::String>{
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            unsafe {
                              
                              #[repr(align(4))]
                              struct RetArea([u8; 20]);
                              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                              let ptr0 = ret_area.as_mut_ptr() as i32;
                              #[cfg(target_arch = "wasm32")]
                              #[link(wasm_import_module = "timeline:event-processor/api")]
                              extern "C" {
                                #[link_name = "latest-event-to-state"]
                                fn wit_import(_: i64, _: i32, );
                              }
                              
                              #[cfg(not(target_arch = "wasm32"))]
                              fn wit_import(_: i64, _: i32, ){ unreachable!() }
                              wit_import(wit_bindgen::rt::as_i64(t1), ptr0);
                              let l1 = i32::from(*((ptr0 + 0) as *const u8));
                              match l1 {
                                0 => {
                                  let e = {
                                    let l2 = *((ptr0 + 4) as *const i32);
                                    let l3 = *((ptr0 + 8) as *const i32);
                                    let len4 = l3 as usize;
                                    let bytes4 = Vec::from_raw_parts(l2 as *mut _, len4, len4);
                                    let l5 = *((ptr0 + 12) as *const i32);
                                    let l6 = *((ptr0 + 16) as *const i32);
                                    let base17 = l5;
                                    let len17 = l6;
                                    let mut result17 = Vec::with_capacity(len17 as usize);
                                    for i in 0..len17 {
                                      let base = base17 + i * 32;
                                      let e17 = {
                                        let l7 = *((base + 0) as *const i64);
                                        let l8 = *((base + 8) as *const i64);
                                        let l9 = i32::from(*((base + 16) as *const u8));
                                        let v16 = match l9 {
                                          0 => {
                                            let e16 = {
                                              let l10 = *((base + 24) as *const i32);
                                              let l11 = *((base + 28) as *const i32);
                                              let len12 = l11 as usize;
                                              let bytes12 = Vec::from_raw_parts(l10 as *mut _, len12, len12);
                                              
                                              wit_bindgen::rt::string_lift(bytes12)
                                            };
                                            EventValue::StringValue(e16)
                                          }
                                          1 => {
                                            let e16 = {
                                              let l13 = *((base + 24) as *const i64);
                                              
                                              l13
                                            };
                                            EventValue::IntValue(e16)
                                          }
                                          2 => {
                                            let e16 = {
                                              let l14 = *((base + 24) as *const f64);
                                              
                                              l14
                                            };
                                            EventValue::FloatValue(e16)
                                          }
                                          n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e16 = {
                                              let l15 = i32::from(*((base + 24) as *const u8));
                                              
                                              wit_bindgen::rt::bool_lift(l15 as u8)
                                            };
                                            EventValue::BoolValue(e16)
                                          }
                                        };
                                        
                                        EventStateResult{
                                          time_period: TimePeriod{
                                            t1: l7 as u64,
                                            t2: l8 as u64,
                                          },
                                          value: v16,
                                        }
                                      };
                                      result17.push(e17);
                                    }
                                    wit_bindgen::rt::dealloc(base17, (len17 as usize) * 32, 8);
                                    
                                    LatestEventToStateResult{
                                      event_col_name: wit_bindgen::rt::string_lift(bytes4),
                                      event_results: result17,
                                    }
                                  };
                                  Ok(e)
                                }
                                1 => {
                                  let e = {
                                    let l18 = *((ptr0 + 4) as *const i32);
                                    let l19 = *((ptr0 + 8) as *const i32);
                                    let len20 = l19 as usize;
                                    let bytes20 = Vec::from_raw_parts(l18 as *mut _, len20, len20);
                                    
                                    wit_bindgen::rt::string_lift(bytes20)
                                  };
                                  Err(e)
                                }
                                _ => wit_bindgen::rt::invalid_enum_discriminant(),
                              }
                            }
                          }
                          
                        }
                        
                      }
                    }
                    pub mod exports {
                      pub mod timeline {
                        pub mod core_stub {
                          
                          #[allow(clippy::all)]
                          pub mod stub_core {
                            #[used]
                            #[doc(hidden)]
                            #[cfg(target_arch = "wasm32")]
                            static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
                            pub type Uri = super::super::super::super::golem::rpc::types::Uri;
                            pub type TimelineOp = super::super::super::super::timeline::core::api::TimelineOp;
                            
                            pub use super::super::super::super::super::Api as Api;
                            const _: () = {
                              #[doc(hidden)]
                              #[export_name = "timeline:core-stub/stub-core#[dtor]api"]
                              #[allow(non_snake_case)]
                              unsafe extern "C" fn dtor(rep: usize) {
                                wit_bindgen::rt::Resource::<Api>::dtor(rep)
                              }
                            };
                            unsafe impl wit_bindgen::rt::RustResource for Api{
                              unsafe fn new(_rep: usize) -> u32 {
                                #[cfg(not(target_arch = "wasm32"))]
                                unreachable!();
                                
                                #[cfg(target_arch = "wasm32")]
                                {
                                  #[link(wasm_import_module = "[export]timeline:core-stub/stub-core")]
                                  extern "C" {
                                    #[link_name = "[resource-new]api"]
                                    fn new(_: usize) -> u32;
                                  }
                                  new(_rep)
                                }
                              }
                              
                              unsafe fn rep(_handle: u32) -> usize {
                                #[cfg(not(target_arch = "wasm32"))]
                                unreachable!();
                                
                                #[cfg(target_arch = "wasm32")]
                                {
                                  #[link(wasm_import_module = "[export]timeline:core-stub/stub-core")]
                                  extern "C" {
                                    #[link_name = "[resource-rep]api"]
                                    fn rep(_: u32) -> usize;
                                  }
                                  rep(_handle)
                                }
                              }
                            }
                            pub type OwnApi = wit_bindgen::rt::Resource<Api>;
                            
                            
                            unsafe impl wit_bindgen::rt::WasmResource for Api{
                              #[inline]
                              unsafe fn drop(_handle: u32) {
                                #[cfg(not(target_arch = "wasm32"))]
                                unreachable!();
                                
                                #[cfg(target_arch = "wasm32")]
                                {
                                  #[link(wasm_import_module = "[export]timeline:core-stub/stub-core")]
                                  extern "C" {
                                    #[link_name = "[resource-drop]api"]
                                    fn drop(_: u32);
                                  }
                                  
                                  drop(_handle);
                                }
                              }
                            }
                            
                            const _: () = {
                              
                              #[doc(hidden)]
                              #[export_name = "timeline:core-stub/stub-core#[constructor]api"]
                              #[allow(non_snake_case)]
                              unsafe extern "C" fn __export_constructor_api(arg0: i32,arg1: i32,) -> i32 {
                                #[allow(unused_imports)]
                                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                
                                // Before executing any other code, use this function to run all static
                                // constructors, if they have not yet been run. This is a hack required
                                // to work around wasi-libc ctors calling import functions to initialize
                                // the environment.
                                //
                                // This functionality will be removed once rust 1.69.0 is stable, at which
                                // point wasi-libc will no longer have this behavior.
                                //
                                // See
                                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                                // for more details.
                                #[cfg(target_arch="wasm32")]
                                wit_bindgen::rt::run_ctors_once();
                                
                                let len0 = arg1 as usize;
                                let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
                                let result1 = OwnApi::new(<_ApiImpl as GuestApi>::new(super::super::super::super::golem::rpc::types::Uri{
                                  value: wit_bindgen::rt::string_lift(bytes0),
                                }));
                                wit_bindgen::rt::Resource::into_handle(result1) as i32
                              }
                            };
                            const _: () = {
                              
                              #[doc(hidden)]
                              #[export_name = "timeline:core-stub/stub-core#[method]api.initialize-timeline"]
                              #[allow(non_snake_case)]
                              unsafe extern "C" fn __export_method_api_initialize_timeline(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
                                #[allow(unused_imports)]
                                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                                
                                // Before executing any other code, use this function to run all static
                                // constructors, if they have not yet been run. This is a hack required
                                // to work around wasi-libc ctors calling import functions to initialize
                                // the environment.
                                //
                                // This functionality will be removed once rust 1.69.0 is stable, at which
                                // point wasi-libc will no longer have this behavior.
                                //
                                // See
                                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                                // for more details.
                                #[cfg(target_arch="wasm32")]
                                wit_bindgen::rt::run_ctors_once();
                                
                                let base87 = arg1;
                                let len87 = arg2;
                                let mut result87 = Vec::with_capacity(len87 as usize);
                                for i in 0..len87 {
                                  let base = base87 + i * 72;
                                  let e87 = {
                                    let l0 = i32::from(*((base + 0) as *const u8));
                                    use super::super::super::super::timeline::core::api::TimelineNode as V86;
                                    let v86 = match l0 {
                                      0 => {
                                        let e86 = {
                                          let l1 = i32::from(*((base + 8) as *const u8));
                                          let l2 = *((base + 12) as *const i32);
                                          let l3 = i32::from(*((base + 16) as *const u8));
                                          use super::super::super::super::timeline::event_processor::api::EventValue as V10;
                                          let v10 = match l3 {
                                            0 => {
                                              let e10 = {
                                                let l4 = *((base + 24) as *const i32);
                                                let l5 = *((base + 28) as *const i32);
                                                let len6 = l5 as usize;
                                                let bytes6 = Vec::from_raw_parts(l4 as *mut _, len6, len6);
                                                
                                                wit_bindgen::rt::string_lift(bytes6)
                                              };
                                              V10::StringValue(e10)
                                            }
                                            1 => {
                                              let e10 = {
                                                let l7 = *((base + 24) as *const i64);
                                                
                                                l7
                                              };
                                              V10::IntValue(e10)
                                            }
                                            2 => {
                                              let e10 = {
                                                let l8 = *((base + 24) as *const f64);
                                                
                                                l8
                                              };
                                              V10::FloatValue(e10)
                                            }
                                            n => {
                                              debug_assert_eq!(n, 3, "invalid enum discriminant");
                                              let e10 = {
                                                let l9 = i32::from(*((base + 24) as *const u8));
                                                
                                                wit_bindgen::rt::bool_lift(l9 as u8)
                                              };
                                              V10::BoolValue(e10)
                                            }
                                          };
                                          let l11 = *((base + 32) as *const i32);
                                          let l12 = *((base + 36) as *const i32);
                                          let len13 = l12 as usize;
                                          let bytes13 = Vec::from_raw_parts(l11 as *mut _, len13, len13);
                                          let l14 = *((base + 40) as *const i32);
                                          let l15 = *((base + 44) as *const i32);
                                          let len16 = l15 as usize;
                                          let bytes16 = Vec::from_raw_parts(l14 as *mut _, len16, len16);
                                          
                                          super::super::super::super::timeline::core::api::TimelineConstantCompared{
                                            op: super::super::super::super::timeline::core::api::TimelineConstantComparator::_lift(l1 as u8),
                                            timeline: l2,
                                            value: v10,
                                            server: super::super::super::super::timeline::core::api::Server{
                                              worker_id: wit_bindgen::rt::string_lift(bytes13),
                                              template_id: wit_bindgen::rt::string_lift(bytes16),
                                            },
                                          }
                                        };
                                        V86::TimelineComparison(e86)
                                      }
                                      1 => {
                                        let e86 = {
                                          let l17 = *((base + 8) as *const i32);
                                          let l18 = *((base + 12) as *const i32);
                                          let l19 = *((base + 16) as *const i32);
                                          let len20 = l19 as usize;
                                          let bytes20 = Vec::from_raw_parts(l18 as *mut _, len20, len20);
                                          let l21 = *((base + 20) as *const i32);
                                          let l22 = *((base + 24) as *const i32);
                                          let len23 = l22 as usize;
                                          let bytes23 = Vec::from_raw_parts(l21 as *mut _, len23, len23);
                                          
                                          super::super::super::super::timeline::core::api::TimelineNegated{
                                            timeline: l17,
                                            server: super::super::super::super::timeline::core::api::Server{
                                              worker_id: wit_bindgen::rt::string_lift(bytes20),
                                              template_id: wit_bindgen::rt::string_lift(bytes23),
                                            },
                                          }
                                        };
                                        V86::TimelineNegation(e86)
                                      }
                                      2 => {
                                        let e86 = {
                                          let l24 = *((base + 8) as *const i32);
                                          let l25 = *((base + 12) as *const i32);
                                          let len26 = l25 as usize;
                                          let bytes26 = Vec::from_raw_parts(l24 as *mut _, len26, len26);
                                          let l27 = *((base + 16) as *const i32);
                                          let l28 = *((base + 20) as *const i32);
                                          let len29 = l28 as usize;
                                          let bytes29 = Vec::from_raw_parts(l27 as *mut _, len29, len29);
                                          let l30 = *((base + 24) as *const i32);
                                          let l31 = *((base + 28) as *const i32);
                                          let len32 = l31 as usize;
                                          let bytes32 = Vec::from_raw_parts(l30 as *mut _, len32, len32);
                                          
                                          super::super::super::super::timeline::core::api::ServerWithEventColumnName{
                                            server: super::super::super::super::timeline::core::api::Server{
                                              worker_id: wit_bindgen::rt::string_lift(bytes26),
                                              template_id: wit_bindgen::rt::string_lift(bytes29),
                                            },
                                            event_column_name: wit_bindgen::rt::string_lift(bytes32),
                                          }
                                        };
                                        V86::TlLatestEventToState(e86)
                                      }
                                      3 => {
                                        let e86 = {
                                          let l33 = *((base + 8) as *const i32);
                                          let l34 = *((base + 16) as *const i32);
                                          let l35 = *((base + 20) as *const i32);
                                          let len36 = l35 as usize;
                                          let bytes36 = Vec::from_raw_parts(l34 as *mut _, len36, len36);
                                          let l37 = i32::from(*((base + 24) as *const u8));
                                          use super::super::super::super::timeline::event_processor::api::EventValue as V44;
                                          let v44 = match l37 {
                                            0 => {
                                              let e44 = {
                                                let l38 = *((base + 32) as *const i32);
                                                let l39 = *((base + 36) as *const i32);
                                                let len40 = l39 as usize;
                                                let bytes40 = Vec::from_raw_parts(l38 as *mut _, len40, len40);
                                                
                                                wit_bindgen::rt::string_lift(bytes40)
                                              };
                                              V44::StringValue(e44)
                                            }
                                            1 => {
                                              let e44 = {
                                                let l41 = *((base + 32) as *const i64);
                                                
                                                l41
                                              };
                                              V44::IntValue(e44)
                                            }
                                            2 => {
                                              let e44 = {
                                                let l42 = *((base + 32) as *const f64);
                                                
                                                l42
                                              };
                                              V44::FloatValue(e44)
                                            }
                                            n => {
                                              debug_assert_eq!(n, 3, "invalid enum discriminant");
                                              let e44 = {
                                                let l43 = i32::from(*((base + 32) as *const u8));
                                                
                                                wit_bindgen::rt::bool_lift(l43 as u8)
                                              };
                                              V44::BoolValue(e44)
                                            }
                                          };
                                          let l45 = i32::from(*((base + 40) as *const u8));
                                          let l46 = *((base + 48) as *const i32);
                                          let l47 = *((base + 52) as *const i32);
                                          let len48 = l47 as usize;
                                          let bytes48 = Vec::from_raw_parts(l46 as *mut _, len48, len48);
                                          let l49 = *((base + 56) as *const i32);
                                          let l50 = *((base + 60) as *const i32);
                                          let len51 = l50 as usize;
                                          let bytes51 = Vec::from_raw_parts(l49 as *mut _, len51, len51);
                                          
                                          super::super::super::super::timeline::core::api::TimelineWithEventPredicate{
                                            timeline: l33,
                                            event_predicate: super::super::super::super::timeline::core::api::EventPredicate{
                                              col_name: wit_bindgen::rt::string_lift(bytes36),
                                              value: v44,
                                              op: super::super::super::super::timeline::core::api::EventPredicateOp::_lift(l45 as u8),
                                            },
                                            server: super::super::super::super::timeline::core::api::Server{
                                              worker_id: wit_bindgen::rt::string_lift(bytes48),
                                              template_id: wit_bindgen::rt::string_lift(bytes51),
                                            },
                                          }
                                        };
                                        V86::TlHasExisted(e86)
                                      }
                                      4 => {
                                        let e86 = {
                                          let l52 = *((base + 8) as *const i32);
                                          let l53 = *((base + 16) as *const i32);
                                          let l54 = *((base + 20) as *const i32);
                                          let len55 = l54 as usize;
                                          let bytes55 = Vec::from_raw_parts(l53 as *mut _, len55, len55);
                                          let l56 = i32::from(*((base + 24) as *const u8));
                                          use super::super::super::super::timeline::event_processor::api::EventValue as V63;
                                          let v63 = match l56 {
                                            0 => {
                                              let e63 = {
                                                let l57 = *((base + 32) as *const i32);
                                                let l58 = *((base + 36) as *const i32);
                                                let len59 = l58 as usize;
                                                let bytes59 = Vec::from_raw_parts(l57 as *mut _, len59, len59);
                                                
                                                wit_bindgen::rt::string_lift(bytes59)
                                              };
                                              V63::StringValue(e63)
                                            }
                                            1 => {
                                              let e63 = {
                                                let l60 = *((base + 32) as *const i64);
                                                
                                                l60
                                              };
                                              V63::IntValue(e63)
                                            }
                                            2 => {
                                              let e63 = {
                                                let l61 = *((base + 32) as *const f64);
                                                
                                                l61
                                              };
                                              V63::FloatValue(e63)
                                            }
                                            n => {
                                              debug_assert_eq!(n, 3, "invalid enum discriminant");
                                              let e63 = {
                                                let l62 = i32::from(*((base + 32) as *const u8));
                                                
                                                wit_bindgen::rt::bool_lift(l62 as u8)
                                              };
                                              V63::BoolValue(e63)
                                            }
                                          };
                                          let l64 = i32::from(*((base + 40) as *const u8));
                                          let l65 = *((base + 48) as *const i32);
                                          let l66 = *((base + 52) as *const i32);
                                          let len67 = l66 as usize;
                                          let bytes67 = Vec::from_raw_parts(l65 as *mut _, len67, len67);
                                          let l68 = *((base + 56) as *const i32);
                                          let l69 = *((base + 60) as *const i32);
                                          let len70 = l69 as usize;
                                          let bytes70 = Vec::from_raw_parts(l68 as *mut _, len70, len70);
                                          let l71 = *((base + 64) as *const i64);
                                          
                                          super::super::super::super::timeline::core::api::TimelineWithEventPredicateWithin{
                                            filtered: super::super::super::super::timeline::core::api::TimelineWithEventPredicate{
                                              timeline: l52,
                                              event_predicate: super::super::super::super::timeline::core::api::EventPredicate{
                                                col_name: wit_bindgen::rt::string_lift(bytes55),
                                                value: v63,
                                                op: super::super::super::super::timeline::core::api::EventPredicateOp::_lift(l64 as u8),
                                              },
                                              server: super::super::super::super::timeline::core::api::Server{
                                                worker_id: wit_bindgen::rt::string_lift(bytes67),
                                                template_id: wit_bindgen::rt::string_lift(bytes70),
                                              },
                                            },
                                            time: l71 as u64,
                                          }
                                        };
                                        V86::TlHasExistedWithin(e86)
                                      }
                                      5 => {
                                        let e86 = {
                                          let l72 = *((base + 8) as *const i32);
                                          let l73 = *((base + 12) as *const i32);
                                          let len74 = l73 as usize;
                                          let bytes74 = Vec::from_raw_parts(l72 as *mut _, len74, len74);
                                          let l75 = *((base + 16) as *const i32);
                                          let l76 = *((base + 20) as *const i32);
                                          let len77 = l76 as usize;
                                          let bytes77 = Vec::from_raw_parts(l75 as *mut _, len77, len77);
                                          let l78 = *((base + 24) as *const i32);
                                          
                                          super::super::super::super::timeline::core::api::TimelineWithServer{
                                            server: super::super::super::super::timeline::core::api::Server{
                                              worker_id: wit_bindgen::rt::string_lift(bytes74),
                                              template_id: wit_bindgen::rt::string_lift(bytes77),
                                            },
                                            timeline: l78,
                                          }
                                        };
                                        V86::TlDurationWhere(e86)
                                      }
                                      n => {
                                        debug_assert_eq!(n, 6, "invalid enum discriminant");
                                        let e86 = {
                                          let l79 = *((base + 8) as *const i32);
                                          let l80 = *((base + 12) as *const i32);
                                          let len81 = l80 as usize;
                                          let bytes81 = Vec::from_raw_parts(l79 as *mut _, len81, len81);
                                          let l82 = *((base + 16) as *const i32);
                                          let l83 = *((base + 20) as *const i32);
                                          let len84 = l83 as usize;
                                          let bytes84 = Vec::from_raw_parts(l82 as *mut _, len84, len84);
                                          let l85 = *((base + 24) as *const i32);
                                          
                                          super::super::super::super::timeline::core::api::TimelineWithServer{
                                            server: super::super::super::super::timeline::core::api::Server{
                                              worker_id: wit_bindgen::rt::string_lift(bytes81),
                                              template_id: wit_bindgen::rt::string_lift(bytes84),
                                            },
                                            timeline: l85,
                                          }
                                        };
                                        V86::TlDurationInCurState(e86)
                                      }
                                    };
                                    
                                    v86
                                  };
                                  result87.push(e87);
                                }
                                wit_bindgen::rt::dealloc(base87, (len87 as usize) * 72, 8);
                                let result88 = <_ApiImpl as GuestApi>::initialize_timeline(wit_bindgen::rt::Resource::<Api>::lift_borrow(arg0 as u32 as usize), super::super::super::super::timeline::core::api::TimelineOp{
                                  nodes: result87,
                                });
                                let ptr89 = _RET_AREA.0.as_mut_ptr() as i32;
                                match result88 {
                                  Ok(e) => { {
                                    *((ptr89 + 0) as *mut u8) = (0i32) as u8;
                                    let vec90 = (e.into_bytes()).into_boxed_slice();
                                    let ptr90 = vec90.as_ptr() as i32;
                                    let len90 = vec90.len() as i32;
                                    ::core::mem::forget(vec90);
                                    *((ptr89 + 8) as *mut i32) = len90;
                                    *((ptr89 + 4) as *mut i32) = ptr90;
                                  } },
                                  Err(e) => { {
                                    *((ptr89 + 0) as *mut u8) = (1i32) as u8;
                                    let vec91 = (e.into_bytes()).into_boxed_slice();
                                    let ptr91 = vec91.as_ptr() as i32;
                                    let len91 = vec91.len() as i32;
                                    ::core::mem::forget(vec91);
                                    *((ptr89 + 8) as *mut i32) = len91;
                                    *((ptr89 + 4) as *mut i32) = ptr91;
                                  } },
                                };ptr89
                              }
                              
                              const _: () = {
                                #[doc(hidden)]
                                #[export_name = "cabi_post_timeline:core-stub/stub-core#[method]api.initialize-timeline"]
                                #[allow(non_snake_case)]
                                unsafe extern "C" fn __post_return_method_api_initialize_timeline(arg0: i32,) {
                                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                                  match l0 {
                                    0 => {
                                      let l1 = *((arg0 + 4) as *const i32);
                                      let l2 = *((arg0 + 8) as *const i32);
                                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                                    },
                                    _ => {
                                      let l3 = *((arg0 + 4) as *const i32);
                                      let l4 = *((arg0 + 8) as *const i32);
                                      wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                                    },
                                  }
                                }
                              };
                            };
                            use super::super::super::super::super::Api as _ApiImpl;
                            pub trait GuestApi {
                              fn new(location: Uri,) -> Self;
                              fn initialize_timeline(&self,timeline: TimelineOp,) -> Result<wit_bindgen::rt::string::String,wit_bindgen::rt::string::String>;
                            }
                            
                            #[allow(unused_imports)]
                            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                            
                            #[repr(align(4))]
                            struct _RetArea([u8; 12]);
                            static mut _RET_AREA: _RetArea = _RetArea([0; 12]);
                            
                          }
                          
                        }
                      }
                    }
                    
                    #[cfg(target_arch = "wasm32")]
                    #[link_section = "component-type:wasm-rpc-stub-core"]
                    #[doc(hidden)]
                    pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 6169] = [3, 0, 18, 119, 97, 115, 109, 45, 114, 112, 99, 45, 115, 116, 117, 98, 45, 99, 111, 114, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 221, 21, 1, 65, 27, 1, 66, 18, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 0, 1, 114, 1, 5, 118, 97, 108, 117, 101, 115, 4, 0, 3, 117, 114, 105, 3, 0, 2, 1, 112, 1, 1, 107, 1, 1, 111, 2, 121, 5, 1, 112, 127, 1, 106, 1, 5, 1, 5, 1, 111, 2, 3, 119, 1, 113, 22, 12, 114, 101, 99, 111, 114, 100, 45, 118, 97, 108, 117, 101, 1, 4, 0, 13, 118, 97, 114, 105, 97, 110, 116, 45, 118, 97, 108, 117, 101, 1, 6, 0, 10, 101, 110, 117, 109, 45, 118, 97, 108, 117, 101, 1, 121, 0, 11, 102, 108, 97, 103, 115, 45, 118, 97, 108, 117, 101, 1, 7, 0, 11, 116, 117, 112, 108, 101, 45, 118, 97, 108, 117, 101, 1, 4, 0, 10, 108, 105, 115, 116, 45, 118, 97, 108, 117, 101, 1, 4, 0, 12, 111, 112, 116, 105, 111, 110, 45, 118, 97, 108, 117, 101, 1, 5, 0, 12, 114, 101, 115, 117, 108, 116, 45, 118, 97, 108, 117, 101, 1, 8, 0, 7, 112, 114, 105, 109, 45, 117, 56, 1, 125, 0, 8, 112, 114, 105, 109, 45, 117, 49, 54, 1, 123, 0, 8, 112, 114, 105, 109, 45, 117, 51, 50, 1, 121, 0, 8, 112, 114, 105, 109, 45, 117, 54, 52, 1, 119, 0, 7, 112, 114, 105, 109, 45, 115, 56, 1, 126, 0, 8, 112, 114, 105, 109, 45, 115, 49, 54, 1, 124, 0, 8, 112, 114, 105, 109, 45, 115, 51, 50, 1, 122, 0, 8, 112, 114, 105, 109, 45, 115, 54, 52, 1, 120, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 51, 50, 1, 118, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 54, 52, 1, 117, 0, 9, 112, 114, 105, 109, 45, 99, 104, 97, 114, 1, 116, 0, 9, 112, 114, 105, 109, 45, 98, 111, 111, 108, 1, 127, 0, 11, 112, 114, 105, 109, 45, 115, 116, 114, 105, 110, 103, 1, 115, 0, 6, 104, 97, 110, 100, 108, 101, 1, 9, 0, 4, 0, 8, 119, 105, 116, 45, 110, 111, 100, 101, 3, 0, 10, 1, 112, 11, 1, 114, 1, 5, 110, 111, 100, 101, 115, 12, 4, 0, 9, 119, 105, 116, 45, 118, 97, 108, 117, 101, 3, 0, 13, 1, 113, 4, 14, 112, 114, 111, 116, 111, 99, 111, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 6, 100, 101, 110, 105, 101, 100, 1, 115, 0, 9, 110, 111, 116, 45, 102, 111, 117, 110, 100, 1, 115, 0, 21, 114, 101, 109, 111, 116, 101, 45, 105, 110, 116, 101, 114, 110, 97, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 0, 9, 114, 112, 99, 45, 101, 114, 114, 111, 114, 3, 0, 15, 4, 0, 8, 119, 97, 115, 109, 45, 114, 112, 99, 3, 1, 3, 1, 21, 103, 111, 108, 101, 109, 58, 114, 112, 99, 47, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 1, 66, 15, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 1, 111, 2, 115, 1, 1, 112, 2, 1, 114, 2, 4, 116, 105, 109, 101, 119, 5, 101, 118, 101, 110, 116, 3, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 4, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 6, 1, 114, 2, 2, 116, 49, 119, 2, 116, 50, 119, 4, 0, 11, 116, 105, 109, 101, 45, 112, 101, 114, 105, 111, 100, 3, 0, 8, 1, 114, 2, 11, 116, 105, 109, 101, 45, 112, 101, 114, 105, 111, 100, 9, 5, 118, 97, 108, 117, 101, 1, 4, 0, 18, 101, 118, 101, 110, 116, 45, 115, 116, 97, 116, 101, 45, 114, 101, 115, 117, 108, 116, 3, 0, 10, 1, 112, 11, 1, 114, 2, 14, 101, 118, 101, 110, 116, 45, 99, 111, 108, 45, 110, 97, 109, 101, 115, 13, 101, 118, 101, 110, 116, 45, 114, 101, 115, 117, 108, 116, 115, 12, 4, 0, 28, 108, 97, 116, 101, 115, 116, 45, 101, 118, 101, 110, 116, 45, 116, 111, 45, 115, 116, 97, 116, 101, 45, 114, 101, 115, 117, 108, 116, 3, 0, 13, 3, 1, 28, 116, 105, 109, 101, 108, 105, 110, 101, 58, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 97, 112, 105, 5, 1, 2, 3, 0, 1, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 2, 3, 0, 1, 5, 101, 118, 101, 110, 116, 1, 66, 33, 2, 3, 2, 1, 2, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 2, 3, 2, 1, 3, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 4, 1, 114, 2, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 115, 11, 116, 101, 109, 112, 108, 97, 116, 101, 45, 105, 100, 115, 4, 0, 6, 115, 101, 114, 118, 101, 114, 3, 0, 6, 1, 114, 2, 6, 115, 101, 114, 118, 101, 114, 7, 17, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 110, 97, 109, 101, 115, 4, 0, 29, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 110, 97, 109, 101, 3, 0, 8, 1, 114, 2, 6, 115, 101, 114, 118, 101, 114, 7, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 4, 0, 20, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 115, 101, 114, 118, 101, 114, 3, 0, 10, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 12, 1, 109, 4, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 18, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 15, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 4, 0, 28, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 3, 0, 14, 1, 114, 4, 2, 111, 112, 15, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 5, 118, 97, 108, 117, 101, 1, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 26, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 101, 100, 3, 0, 16, 1, 114, 2, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 16, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 101, 103, 97, 116, 101, 100, 3, 0, 18, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 18, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 111, 112, 3, 0, 20, 1, 114, 3, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 1, 2, 111, 112, 21, 4, 0, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 22, 1, 114, 3, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 23, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 29, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 24, 1, 114, 2, 8, 102, 105, 108, 116, 101, 114, 101, 100, 25, 4, 116, 105, 109, 101, 119, 4, 0, 36, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 119, 105, 116, 104, 105, 110, 3, 0, 26, 1, 113, 7, 19, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 1, 17, 0, 17, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 101, 103, 97, 116, 105, 111, 110, 1, 19, 0, 24, 116, 108, 45, 108, 97, 116, 101, 115, 116, 45, 101, 118, 101, 110, 116, 45, 116, 111, 45, 115, 116, 97, 116, 101, 1, 9, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 25, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 27, 0, 17, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 119, 104, 101, 114, 101, 1, 11, 0, 24, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 105, 110, 45, 99, 117, 114, 45, 115, 116, 97, 116, 101, 1, 11, 0, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 28, 1, 112, 29, 1, 114, 1, 5, 110, 111, 100, 101, 115, 30, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 31, 3, 1, 17, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 47, 97, 112, 105, 5, 4, 2, 3, 0, 0, 3, 117, 114, 105, 2, 3, 0, 2, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 2, 3, 0, 2, 5, 101, 118, 101, 110, 116, 2, 3, 0, 2, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 2, 3, 0, 2, 6, 115, 101, 114, 118, 101, 114, 2, 3, 0, 2, 29, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 110, 97, 109, 101, 2, 3, 0, 2, 20, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 115, 101, 114, 118, 101, 114, 2, 3, 0, 2, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 2, 3, 0, 2, 28, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 2, 3, 0, 2, 26, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 101, 100, 2, 3, 0, 2, 16, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 101, 103, 97, 116, 101, 100, 2, 3, 0, 2, 18, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 111, 112, 2, 3, 0, 2, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 2, 3, 0, 2, 29, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 2, 3, 0, 2, 36, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 119, 105, 116, 104, 105, 110, 2, 3, 0, 2, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 2, 3, 0, 2, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 1, 66, 42, 2, 3, 2, 1, 5, 4, 0, 3, 117, 114, 105, 3, 0, 0, 2, 3, 2, 1, 6, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 2, 2, 3, 2, 1, 7, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 4, 2, 3, 2, 1, 8, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 6, 2, 3, 2, 1, 9, 4, 0, 6, 115, 101, 114, 118, 101, 114, 3, 0, 8, 2, 3, 2, 1, 10, 4, 0, 29, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 110, 97, 109, 101, 3, 0, 10, 2, 3, 2, 1, 11, 4, 0, 20, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 115, 101, 114, 118, 101, 114, 3, 0, 12, 2, 3, 2, 1, 12, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 14, 2, 3, 2, 1, 13, 4, 0, 28, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 3, 0, 16, 2, 3, 2, 1, 14, 4, 0, 26, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 101, 100, 3, 0, 18, 2, 3, 2, 1, 15, 4, 0, 16, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 101, 103, 97, 116, 101, 100, 3, 0, 20, 2, 3, 2, 1, 16, 4, 0, 18, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 111, 112, 3, 0, 22, 2, 3, 2, 1, 17, 4, 0, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 24, 2, 3, 2, 1, 18, 4, 0, 29, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 26, 2, 3, 2, 1, 19, 4, 0, 36, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 119, 105, 116, 104, 105, 110, 3, 0, 28, 2, 3, 2, 1, 20, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 30, 2, 3, 2, 1, 21, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 32, 4, 0, 3, 97, 112, 105, 3, 1, 1, 105, 34, 1, 64, 1, 8, 108, 111, 99, 97, 116, 105, 111, 110, 1, 0, 35, 4, 0, 16, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 97, 112, 105, 1, 36, 1, 104, 34, 1, 106, 1, 115, 1, 115, 1, 64, 2, 4, 115, 101, 108, 102, 37, 8, 116, 105, 109, 101, 108, 105, 110, 101, 33, 0, 38, 4, 0, 31, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 39, 4, 1, 28, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 45, 115, 116, 117, 98, 47, 115, 116, 117, 98, 45, 99, 111, 114, 101, 5, 22, 11, 15, 1, 0, 9, 115, 116, 117, 98, 45, 99, 111, 114, 101, 3, 0, 0, 7, 148, 25, 1, 65, 2, 1, 65, 27, 1, 66, 29, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 0, 1, 114, 1, 5, 118, 97, 108, 117, 101, 115, 4, 0, 3, 117, 114, 105, 3, 0, 2, 1, 112, 1, 1, 107, 1, 1, 111, 2, 121, 5, 1, 112, 127, 1, 106, 1, 5, 1, 5, 1, 111, 2, 3, 119, 1, 113, 22, 12, 114, 101, 99, 111, 114, 100, 45, 118, 97, 108, 117, 101, 1, 4, 0, 13, 118, 97, 114, 105, 97, 110, 116, 45, 118, 97, 108, 117, 101, 1, 6, 0, 10, 101, 110, 117, 109, 45, 118, 97, 108, 117, 101, 1, 121, 0, 11, 102, 108, 97, 103, 115, 45, 118, 97, 108, 117, 101, 1, 7, 0, 11, 116, 117, 112, 108, 101, 45, 118, 97, 108, 117, 101, 1, 4, 0, 10, 108, 105, 115, 116, 45, 118, 97, 108, 117, 101, 1, 4, 0, 12, 111, 112, 116, 105, 111, 110, 45, 118, 97, 108, 117, 101, 1, 5, 0, 12, 114, 101, 115, 117, 108, 116, 45, 118, 97, 108, 117, 101, 1, 8, 0, 7, 112, 114, 105, 109, 45, 117, 56, 1, 125, 0, 8, 112, 114, 105, 109, 45, 117, 49, 54, 1, 123, 0, 8, 112, 114, 105, 109, 45, 117, 51, 50, 1, 121, 0, 8, 112, 114, 105, 109, 45, 117, 54, 52, 1, 119, 0, 7, 112, 114, 105, 109, 45, 115, 56, 1, 126, 0, 8, 112, 114, 105, 109, 45, 115, 49, 54, 1, 124, 0, 8, 112, 114, 105, 109, 45, 115, 51, 50, 1, 122, 0, 8, 112, 114, 105, 109, 45, 115, 54, 52, 1, 120, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 51, 50, 1, 118, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 54, 52, 1, 117, 0, 9, 112, 114, 105, 109, 45, 99, 104, 97, 114, 1, 116, 0, 9, 112, 114, 105, 109, 45, 98, 111, 111, 108, 1, 127, 0, 11, 112, 114, 105, 109, 45, 115, 116, 114, 105, 110, 103, 1, 115, 0, 6, 104, 97, 110, 100, 108, 101, 1, 9, 0, 4, 0, 8, 119, 105, 116, 45, 110, 111, 100, 101, 3, 0, 10, 1, 112, 11, 1, 114, 1, 5, 110, 111, 100, 101, 115, 12, 4, 0, 9, 119, 105, 116, 45, 118, 97, 108, 117, 101, 3, 0, 13, 1, 113, 4, 14, 112, 114, 111, 116, 111, 99, 111, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 6, 100, 101, 110, 105, 101, 100, 1, 115, 0, 9, 110, 111, 116, 45, 102, 111, 117, 110, 100, 1, 115, 0, 21, 114, 101, 109, 111, 116, 101, 45, 105, 110, 116, 101, 114, 110, 97, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 0, 9, 114, 112, 99, 45, 101, 114, 114, 111, 114, 3, 0, 15, 4, 0, 8, 119, 97, 115, 109, 45, 114, 112, 99, 3, 1, 1, 105, 17, 1, 64, 1, 8, 108, 111, 99, 97, 116, 105, 111, 110, 3, 0, 18, 4, 0, 21, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 119, 97, 115, 109, 45, 114, 112, 99, 1, 19, 1, 104, 17, 1, 112, 14, 1, 106, 1, 14, 1, 16, 1, 64, 3, 4, 115, 101, 108, 102, 20, 13, 102, 117, 110, 99, 116, 105, 111, 110, 45, 110, 97, 109, 101, 115, 15, 102, 117, 110, 99, 116, 105, 111, 110, 45, 112, 97, 114, 97, 109, 115, 21, 0, 22, 4, 0, 33, 91, 109, 101, 116, 104, 111, 100, 93, 119, 97, 115, 109, 45, 114, 112, 99, 46, 105, 110, 118, 111, 107, 101, 45, 97, 110, 100, 45, 97, 119, 97, 105, 116, 1, 23, 1, 106, 0, 1, 16, 1, 64, 3, 4, 115, 101, 108, 102, 20, 13, 102, 117, 110, 99, 116, 105, 111, 110, 45, 110, 97, 109, 101, 115, 15, 102, 117, 110, 99, 116, 105, 111, 110, 45, 112, 97, 114, 97, 109, 115, 21, 0, 24, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 119, 97, 115, 109, 45, 114, 112, 99, 46, 105, 110, 118, 111, 107, 101, 1, 25, 3, 1, 21, 103, 111, 108, 101, 109, 58, 114, 112, 99, 47, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 1, 66, 23, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 1, 111, 2, 115, 1, 1, 112, 2, 1, 114, 2, 4, 116, 105, 109, 101, 119, 5, 101, 118, 101, 110, 116, 3, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 4, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 6, 1, 114, 2, 2, 116, 49, 119, 2, 116, 50, 119, 4, 0, 11, 116, 105, 109, 101, 45, 112, 101, 114, 105, 111, 100, 3, 0, 8, 1, 114, 2, 11, 116, 105, 109, 101, 45, 112, 101, 114, 105, 111, 100, 9, 5, 118, 97, 108, 117, 101, 1, 4, 0, 18, 101, 118, 101, 110, 116, 45, 115, 116, 97, 116, 101, 45, 114, 101, 115, 117, 108, 116, 3, 0, 10, 1, 112, 11, 1, 114, 2, 14, 101, 118, 101, 110, 116, 45, 99, 111, 108, 45, 110, 97, 109, 101, 115, 13, 101, 118, 101, 110, 116, 45, 114, 101, 115, 117, 108, 116, 115, 12, 4, 0, 28, 108, 97, 116, 101, 115, 116, 45, 101, 118, 101, 110, 116, 45, 116, 111, 45, 115, 116, 97, 116, 101, 45, 114, 101, 115, 117, 108, 116, 3, 0, 13, 1, 106, 1, 115, 1, 115, 1, 64, 2, 6, 119, 111, 114, 107, 101, 114, 7, 14, 101, 118, 101, 110, 116, 45, 99, 111, 108, 45, 110, 97, 109, 101, 115, 0, 15, 4, 0, 29, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 108, 97, 116, 101, 115, 116, 45, 101, 118, 101, 110, 116, 45, 115, 116, 97, 116, 101, 1, 16, 1, 64, 1, 5, 101, 118, 101, 110, 116, 5, 0, 15, 4, 0, 9, 97, 100, 100, 45, 101, 118, 101, 110, 116, 1, 17, 1, 106, 1, 14, 1, 115, 1, 64, 1, 2, 116, 49, 119, 0, 18, 4, 0, 21, 108, 97, 116, 101, 115, 116, 45, 101, 118, 101, 110, 116, 45, 116, 111, 45, 115, 116, 97, 116, 101, 1, 19, 3, 1, 28, 116, 105, 109, 101, 108, 105, 110, 101, 58, 101, 118, 101, 110, 116, 45, 112, 114, 111, 99, 101, 115, 115, 111, 114, 47, 97, 112, 105, 5, 1, 2, 3, 0, 1, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 2, 3, 0, 1, 5, 101, 118, 101, 110, 116, 1, 66, 36, 2, 3, 2, 1, 2, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 2, 3, 2, 1, 3, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 4, 1, 114, 2, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 115, 11, 116, 101, 109, 112, 108, 97, 116, 101, 45, 105, 100, 115, 4, 0, 6, 115, 101, 114, 118, 101, 114, 3, 0, 6, 1, 114, 2, 6, 115, 101, 114, 118, 101, 114, 7, 17, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 110, 97, 109, 101, 115, 4, 0, 29, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 110, 97, 109, 101, 3, 0, 8, 1, 114, 2, 6, 115, 101, 114, 118, 101, 114, 7, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 4, 0, 20, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 115, 101, 114, 118, 101, 114, 3, 0, 10, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 12, 1, 109, 4, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 18, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 15, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 4, 0, 28, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 3, 0, 14, 1, 114, 4, 2, 111, 112, 15, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 5, 118, 97, 108, 117, 101, 1, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 26, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 101, 100, 3, 0, 16, 1, 114, 2, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 16, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 101, 103, 97, 116, 101, 100, 3, 0, 18, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 18, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 111, 112, 3, 0, 20, 1, 114, 3, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 1, 2, 111, 112, 21, 4, 0, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 22, 1, 114, 3, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 23, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 29, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 24, 1, 114, 2, 8, 102, 105, 108, 116, 101, 114, 101, 100, 25, 4, 116, 105, 109, 101, 119, 4, 0, 36, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 119, 105, 116, 104, 105, 110, 3, 0, 26, 1, 113, 7, 19, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 1, 17, 0, 17, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 101, 103, 97, 116, 105, 111, 110, 1, 19, 0, 24, 116, 108, 45, 108, 97, 116, 101, 115, 116, 45, 101, 118, 101, 110, 116, 45, 116, 111, 45, 115, 116, 97, 116, 101, 1, 9, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 25, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 27, 0, 17, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 119, 104, 101, 114, 101, 1, 11, 0, 24, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 105, 110, 45, 99, 117, 114, 45, 115, 116, 97, 116, 101, 1, 11, 0, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 28, 1, 112, 29, 1, 114, 1, 5, 110, 111, 100, 101, 115, 30, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 31, 1, 106, 1, 115, 1, 115, 1, 64, 1, 8, 116, 105, 109, 101, 108, 105, 110, 101, 32, 0, 33, 4, 0, 19, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 34, 3, 1, 17, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 47, 97, 112, 105, 5, 4, 2, 3, 0, 0, 3, 117, 114, 105, 2, 3, 0, 2, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 2, 3, 0, 2, 5, 101, 118, 101, 110, 116, 2, 3, 0, 2, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 2, 3, 0, 2, 6, 115, 101, 114, 118, 101, 114, 2, 3, 0, 2, 29, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 110, 97, 109, 101, 2, 3, 0, 2, 20, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 115, 101, 114, 118, 101, 114, 2, 3, 0, 2, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 2, 3, 0, 2, 28, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 2, 3, 0, 2, 26, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 101, 100, 2, 3, 0, 2, 16, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 101, 103, 97, 116, 101, 100, 2, 3, 0, 2, 18, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 111, 112, 2, 3, 0, 2, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 2, 3, 0, 2, 29, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 2, 3, 0, 2, 36, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 119, 105, 116, 104, 105, 110, 2, 3, 0, 2, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 2, 3, 0, 2, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 1, 66, 42, 2, 3, 2, 1, 5, 4, 0, 3, 117, 114, 105, 3, 0, 0, 2, 3, 2, 1, 6, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 2, 2, 3, 2, 1, 7, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 4, 2, 3, 2, 1, 8, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 6, 2, 3, 2, 1, 9, 4, 0, 6, 115, 101, 114, 118, 101, 114, 3, 0, 8, 2, 3, 2, 1, 10, 4, 0, 29, 115, 101, 114, 118, 101, 114, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 110, 97, 109, 101, 3, 0, 10, 2, 3, 2, 1, 11, 4, 0, 20, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 115, 101, 114, 118, 101, 114, 3, 0, 12, 2, 3, 2, 1, 12, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 14, 2, 3, 2, 1, 13, 4, 0, 28, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 3, 0, 16, 2, 3, 2, 1, 14, 4, 0, 26, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 111, 110, 115, 116, 97, 110, 116, 45, 99, 111, 109, 112, 97, 114, 101, 100, 3, 0, 18, 2, 3, 2, 1, 15, 4, 0, 16, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 101, 103, 97, 116, 101, 100, 3, 0, 20, 2, 3, 2, 1, 16, 4, 0, 18, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 111, 112, 3, 0, 22, 2, 3, 2, 1, 17, 4, 0, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 24, 2, 3, 2, 1, 18, 4, 0, 29, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 3, 0, 26, 2, 3, 2, 1, 19, 4, 0, 36, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 45, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 119, 105, 116, 104, 105, 110, 3, 0, 28, 2, 3, 2, 1, 20, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 30, 2, 3, 2, 1, 21, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 32, 4, 0, 3, 97, 112, 105, 3, 1, 1, 105, 34, 1, 64, 1, 8, 108, 111, 99, 97, 116, 105, 111, 110, 1, 0, 35, 4, 0, 16, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 97, 112, 105, 1, 36, 1, 104, 34, 1, 106, 1, 115, 1, 115, 1, 64, 2, 4, 115, 101, 108, 102, 37, 8, 116, 105, 109, 101, 108, 105, 110, 101, 33, 0, 38, 4, 0, 31, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 39, 4, 1, 28, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 45, 115, 116, 117, 98, 47, 115, 116, 117, 98, 45, 99, 111, 114, 101, 5, 22, 4, 1, 37, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 45, 115, 116, 117, 98, 47, 119, 97, 115, 109, 45, 114, 112, 99, 45, 115, 116, 117, 98, 45, 99, 111, 114, 101, 4, 0, 11, 24, 1, 0, 18, 119, 97, 115, 109, 45, 114, 112, 99, 45, 115, 116, 117, 98, 45, 99, 111, 114, 101, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];
                    
                    #[inline(never)]
                    #[doc(hidden)]
                    #[cfg(target_arch = "wasm32")]
                    pub fn __link_section() {}
                    