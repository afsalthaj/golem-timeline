// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod golem {
  pub mod rpc {
    
    #[allow(clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type NodeIndex = i32;
      #[derive(Clone)]
      pub struct Uri {
        pub value: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Uri {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Uri").field("value", &self.value).finish()
        }
      }
      #[derive(Clone)]
      pub enum WitNode{
        RecordValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        VariantValue((u32,Option<NodeIndex>,)),
        EnumValue(u32),
        FlagsValue(wit_bindgen::rt::vec::Vec::<bool>),
        TupleValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        ListValue(wit_bindgen::rt::vec::Vec::<NodeIndex>),
        OptionValue(Option<NodeIndex>),
        ResultValue(Result<Option<NodeIndex>,Option<NodeIndex>>),
        PrimU8(u8),
        PrimU16(u16),
        PrimU32(u32),
        PrimU64(u64),
        PrimS8(i8),
        PrimS16(i16),
        PrimS32(i32),
        PrimS64(i64),
        PrimFloat32(f32),
        PrimFloat64(f64),
        PrimChar(char),
        PrimBool(bool),
        PrimString(wit_bindgen::rt::string::String),
        Handle((Uri,u64,)),
      }
      impl ::core::fmt::Debug for WitNode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            WitNode::RecordValue(e) => {
              f.debug_tuple("WitNode::RecordValue").field(e).finish()
            }
            WitNode::VariantValue(e) => {
              f.debug_tuple("WitNode::VariantValue").field(e).finish()
            }
            WitNode::EnumValue(e) => {
              f.debug_tuple("WitNode::EnumValue").field(e).finish()
            }
            WitNode::FlagsValue(e) => {
              f.debug_tuple("WitNode::FlagsValue").field(e).finish()
            }
            WitNode::TupleValue(e) => {
              f.debug_tuple("WitNode::TupleValue").field(e).finish()
            }
            WitNode::ListValue(e) => {
              f.debug_tuple("WitNode::ListValue").field(e).finish()
            }
            WitNode::OptionValue(e) => {
              f.debug_tuple("WitNode::OptionValue").field(e).finish()
            }
            WitNode::ResultValue(e) => {
              f.debug_tuple("WitNode::ResultValue").field(e).finish()
            }
            WitNode::PrimU8(e) => {
              f.debug_tuple("WitNode::PrimU8").field(e).finish()
            }
            WitNode::PrimU16(e) => {
              f.debug_tuple("WitNode::PrimU16").field(e).finish()
            }
            WitNode::PrimU32(e) => {
              f.debug_tuple("WitNode::PrimU32").field(e).finish()
            }
            WitNode::PrimU64(e) => {
              f.debug_tuple("WitNode::PrimU64").field(e).finish()
            }
            WitNode::PrimS8(e) => {
              f.debug_tuple("WitNode::PrimS8").field(e).finish()
            }
            WitNode::PrimS16(e) => {
              f.debug_tuple("WitNode::PrimS16").field(e).finish()
            }
            WitNode::PrimS32(e) => {
              f.debug_tuple("WitNode::PrimS32").field(e).finish()
            }
            WitNode::PrimS64(e) => {
              f.debug_tuple("WitNode::PrimS64").field(e).finish()
            }
            WitNode::PrimFloat32(e) => {
              f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
            }
            WitNode::PrimFloat64(e) => {
              f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
            }
            WitNode::PrimChar(e) => {
              f.debug_tuple("WitNode::PrimChar").field(e).finish()
            }
            WitNode::PrimBool(e) => {
              f.debug_tuple("WitNode::PrimBool").field(e).finish()
            }
            WitNode::PrimString(e) => {
              f.debug_tuple("WitNode::PrimString").field(e).finish()
            }
            WitNode::Handle(e) => {
              f.debug_tuple("WitNode::Handle").field(e).finish()
            }
          }
        }
      }
      #[derive(Clone)]
      pub struct WitValue {
        pub nodes: wit_bindgen::rt::vec::Vec::<WitNode>,
      }
      impl ::core::fmt::Debug for WitValue {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
        }
      }
      #[derive(Clone)]
      pub enum RpcError{
        ProtocolError(wit_bindgen::rt::string::String),
        Denied(wit_bindgen::rt::string::String),
        NotFound(wit_bindgen::rt::string::String),
        RemoteInternalError(wit_bindgen::rt::string::String),
      }
      impl ::core::fmt::Debug for RpcError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            RpcError::ProtocolError(e) => {
              f.debug_tuple("RpcError::ProtocolError").field(e).finish()
            }
            RpcError::Denied(e) => {
              f.debug_tuple("RpcError::Denied").field(e).finish()
            }
            RpcError::NotFound(e) => {
              f.debug_tuple("RpcError::NotFound").field(e).finish()
            }
            RpcError::RemoteInternalError(e) => {
              f.debug_tuple("RpcError::RemoteInternalError").field(e).finish()
            }
          }
        }
      }
      impl ::core::fmt::Display for RpcError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{:?}", self)
        }
      }
      
      impl std::error::Error for RpcError {}
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct WasmRpc{
        handle: wit_bindgen::rt::Resource<WasmRpc>,
      }
      
      impl WasmRpc{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for WasmRpc{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
            extern "C" {
              #[link_name = "[resource-drop]wasm-rpc"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl WasmRpc {
        #[allow(unused_unsafe, clippy::all)]
        pub fn new(location: &Uri,) -> Self{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let Uri{ value:value0, } = location;
            let vec1 = value0;
            let ptr1 = vec1.as_ptr() as i32;
            let len1 = vec1.len() as i32;
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
            extern "C" {
              #[link_name = "[constructor]wasm-rpc"]
              fn wit_import(_: i32, _: i32, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ) -> i32{ unreachable!() }
            let ret = wit_import(ptr1, len1);
            WasmRpc::from_handle(ret as u32)
          }
        }
      }
      impl WasmRpc {
        #[allow(unused_unsafe, clippy::all)]
        pub fn invoke_and_await(&self,function_name: &str,function_params: &[WitValue],) -> Result<WitValue,RpcError>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            let mut cleanup_list = Vec::new();
            
            #[repr(align(4))]
            struct RetArea([u8; 16]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = function_name;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let vec12 = function_params;
            let len12 = vec12.len() as i32;
            let layout12 = alloc::Layout::from_size_align_unchecked(vec12.len() * 8, 4);
            let result12 = if layout12.size() != 0
            {
              let ptr = alloc::alloc(layout12);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout12);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec12.into_iter().enumerate() {
              let base = result12 as i32 + (i as i32) * 8;
              {
                let WitValue{ nodes:nodes1, } = e;
                let vec11 = nodes1;
                let len11 = vec11.len() as i32;
                let layout11 = alloc::Layout::from_size_align_unchecked(vec11.len() * 24, 8);
                let result11 = if layout11.size() != 0
                {
                  let ptr = alloc::alloc(layout11);
                  if ptr.is_null()
                  {
                    alloc::handle_alloc_error(layout11);
                  }
                  ptr
                }else {{
                  ::core::ptr::null_mut()
                }};
                for (i, e) in vec11.into_iter().enumerate() {
                  let base = result11 as i32 + (i as i32) * 24;
                  {
                    match e {
                      WitNode::RecordValue(e) => {
                        *((base + 0) as *mut u8) = (0i32) as u8;
                        let vec2 = e;
                        let ptr2 = vec2.as_ptr() as i32;
                        let len2 = vec2.len() as i32;
                        *((base + 12) as *mut i32) = len2;
                        *((base + 8) as *mut i32) = ptr2;
                      },
                      WitNode::VariantValue(e) => {
                        *((base + 0) as *mut u8) = (1i32) as u8;
                        let (t3_0, t3_1, ) = e;
                        *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(t3_0);
                        match t3_1 {
                          Some(e) => {
                            *((base + 12) as *mut u8) = (1i32) as u8;
                            *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                          },
                          None => {
                            {
                              *((base + 12) as *mut u8) = (0i32) as u8;
                            }
                          },
                        };},
                        WitNode::EnumValue(e) => {
                          *((base + 0) as *mut u8) = (2i32) as u8;
                          *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                        },
                        WitNode::FlagsValue(e) => {
                          *((base + 0) as *mut u8) = (3i32) as u8;
                          let vec4 = e;
                          let len4 = vec4.len() as i32;
                          let layout4 = alloc::Layout::from_size_align_unchecked(vec4.len() * 1, 1);
                          let result4 = if layout4.size() != 0
                          {
                            let ptr = alloc::alloc(layout4);
                            if ptr.is_null()
                            {
                              alloc::handle_alloc_error(layout4);
                            }
                            ptr
                          }else {{
                            ::core::ptr::null_mut()
                          }};
                          for (i, e) in vec4.into_iter().enumerate() {
                            let base = result4 as i32 + (i as i32) * 1;
                            {
                              *((base + 0) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                            }
                          }
                          *((base + 12) as *mut i32) = len4;
                          *((base + 8) as *mut i32) = result4 as i32;
                          cleanup_list.extend_from_slice(&[(result4, layout4),]);
                        },
                        WitNode::TupleValue(e) => {
                          *((base + 0) as *mut u8) = (4i32) as u8;
                          let vec5 = e;
                          let ptr5 = vec5.as_ptr() as i32;
                          let len5 = vec5.len() as i32;
                          *((base + 12) as *mut i32) = len5;
                          *((base + 8) as *mut i32) = ptr5;
                        },
                        WitNode::ListValue(e) => {
                          *((base + 0) as *mut u8) = (5i32) as u8;
                          let vec6 = e;
                          let ptr6 = vec6.as_ptr() as i32;
                          let len6 = vec6.len() as i32;
                          *((base + 12) as *mut i32) = len6;
                          *((base + 8) as *mut i32) = ptr6;
                        },
                        WitNode::OptionValue(e) => {
                          *((base + 0) as *mut u8) = (6i32) as u8;
                          match e {
                            Some(e) => {
                              *((base + 8) as *mut u8) = (1i32) as u8;
                              *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                            },
                            None => {
                              {
                                *((base + 8) as *mut u8) = (0i32) as u8;
                              }
                            },
                          };},
                          WitNode::ResultValue(e) => {
                            *((base + 0) as *mut u8) = (7i32) as u8;
                            match e {
                              Ok(e) => { {
                                *((base + 8) as *mut u8) = (0i32) as u8;
                                match e {
                                  Some(e) => {
                                    *((base + 12) as *mut u8) = (1i32) as u8;
                                    *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                  },
                                  None => {
                                    {
                                      *((base + 12) as *mut u8) = (0i32) as u8;
                                    }
                                  },
                                };} },
                                Err(e) => { {
                                  *((base + 8) as *mut u8) = (1i32) as u8;
                                  match e {
                                    Some(e) => {
                                      *((base + 12) as *mut u8) = (1i32) as u8;
                                      *((base + 16) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                    },
                                    None => {
                                      {
                                        *((base + 12) as *mut u8) = (0i32) as u8;
                                      }
                                    },
                                  };} },
                                };},
                                WitNode::PrimU8(e) => {
                                  *((base + 0) as *mut u8) = (8i32) as u8;
                                  *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                },
                                WitNode::PrimU16(e) => {
                                  *((base + 0) as *mut u8) = (9i32) as u8;
                                  *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                },
                                WitNode::PrimU32(e) => {
                                  *((base + 0) as *mut u8) = (10i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimU64(e) => {
                                  *((base + 0) as *mut u8) = (11i32) as u8;
                                  *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                },
                                WitNode::PrimS8(e) => {
                                  *((base + 0) as *mut u8) = (12i32) as u8;
                                  *((base + 8) as *mut u8) = (wit_bindgen::rt::as_i32(e)) as u8;
                                },
                                WitNode::PrimS16(e) => {
                                  *((base + 0) as *mut u8) = (13i32) as u8;
                                  *((base + 8) as *mut u16) = (wit_bindgen::rt::as_i32(e)) as u16;
                                },
                                WitNode::PrimS32(e) => {
                                  *((base + 0) as *mut u8) = (14i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimS64(e) => {
                                  *((base + 0) as *mut u8) = (15i32) as u8;
                                  *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                                },
                                WitNode::PrimFloat32(e) => {
                                  *((base + 0) as *mut u8) = (16i32) as u8;
                                  *((base + 8) as *mut f32) = wit_bindgen::rt::as_f32(e);
                                },
                                WitNode::PrimFloat64(e) => {
                                  *((base + 0) as *mut u8) = (17i32) as u8;
                                  *((base + 8) as *mut f64) = wit_bindgen::rt::as_f64(e);
                                },
                                WitNode::PrimChar(e) => {
                                  *((base + 0) as *mut u8) = (18i32) as u8;
                                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                                },
                                WitNode::PrimBool(e) => {
                                  *((base + 0) as *mut u8) = (19i32) as u8;
                                  *((base + 8) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                                },
                                WitNode::PrimString(e) => {
                                  *((base + 0) as *mut u8) = (20i32) as u8;
                                  let vec7 = e;
                                  let ptr7 = vec7.as_ptr() as i32;
                                  let len7 = vec7.len() as i32;
                                  *((base + 12) as *mut i32) = len7;
                                  *((base + 8) as *mut i32) = ptr7;
                                },
                                WitNode::Handle(e) => {
                                  *((base + 0) as *mut u8) = (21i32) as u8;
                                  let (t8_0, t8_1, ) = e;
                                  let Uri{ value:value9, } = t8_0;
                                  let vec10 = value9;
                                  let ptr10 = vec10.as_ptr() as i32;
                                  let len10 = vec10.len() as i32;
                                  *((base + 12) as *mut i32) = len10;
                                  *((base + 8) as *mut i32) = ptr10;
                                  *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(t8_1);
                                },
                              }
                            }
                          }
                          *((base + 4) as *mut i32) = len11;
                          *((base + 0) as *mut i32) = result11 as i32;
                          cleanup_list.extend_from_slice(&[(result11, layout11),]);
                        }
                      }
                      let ptr13 = ret_area.as_mut_ptr() as i32;
                      #[cfg(target_arch = "wasm32")]
                      #[link(wasm_import_module = "golem:rpc/types@0.1.0")]
                      extern "C" {
                        #[link_name = "[method]wasm-rpc.invoke-and-await"]
                        fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                      }
                      
                      #[cfg(not(target_arch = "wasm32"))]
                      fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                      wit_import((self).handle() as i32, ptr0, len0, result12 as i32, len12, ptr13);
                      let l14 = i32::from(*((ptr13 + 0) as *const u8));
                      if layout12.size() != 0 {
                        alloc::dealloc(result12, layout12);
                      }
                      for (ptr, layout) in cleanup_list {
                        
                        if layout.size() != 0 {
                          
                          alloc::dealloc(ptr, layout);
                          
                        }
                        
                      }
                      match l14 {
                        0 => {
                          let e = {
                            let l15 = *((ptr13 + 4) as *const i32);
                            let l16 = *((ptr13 + 8) as *const i32);
                            let base62 = l15;
                            let len62 = l16;
                            let mut result62 = Vec::with_capacity(len62 as usize);
                            for i in 0..len62 {
                              let base = base62 + i * 24;
                              let e62 = {
                                let l17 = i32::from(*((base + 0) as *const u8));
                                let v61 = match l17 {
                                  0 => {
                                    let e61 = {
                                      let l18 = *((base + 8) as *const i32);
                                      let l19 = *((base + 12) as *const i32);
                                      let len20 = l19 as usize;
                                      
                                      Vec::from_raw_parts(l18 as *mut _, len20, len20)
                                    };
                                    WitNode::RecordValue(e61)
                                  }
                                  1 => {
                                    let e61 = {
                                      let l21 = *((base + 8) as *const i32);
                                      let l22 = i32::from(*((base + 12) as *const u8));
                                      
                                      (l21 as u32, match l22 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l23 = *((base + 16) as *const i32);
                                            
                                            l23
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      })
                                    };
                                    WitNode::VariantValue(e61)
                                  }
                                  2 => {
                                    let e61 = {
                                      let l24 = *((base + 8) as *const i32);
                                      
                                      l24 as u32
                                    };
                                    WitNode::EnumValue(e61)
                                  }
                                  3 => {
                                    let e61 = {
                                      let l25 = *((base + 8) as *const i32);
                                      let l26 = *((base + 12) as *const i32);
                                      let base28 = l25;
                                      let len28 = l26;
                                      let mut result28 = Vec::with_capacity(len28 as usize);
                                      for i in 0..len28 {
                                        let base = base28 + i * 1;
                                        let e28 = {
                                          let l27 = i32::from(*((base + 0) as *const u8));
                                          
                                          wit_bindgen::rt::bool_lift(l27 as u8)
                                        };
                                        result28.push(e28);
                                      }
                                      wit_bindgen::rt::dealloc(base28, (len28 as usize) * 1, 1);
                                      
                                      result28
                                    };
                                    WitNode::FlagsValue(e61)
                                  }
                                  4 => {
                                    let e61 = {
                                      let l29 = *((base + 8) as *const i32);
                                      let l30 = *((base + 12) as *const i32);
                                      let len31 = l30 as usize;
                                      
                                      Vec::from_raw_parts(l29 as *mut _, len31, len31)
                                    };
                                    WitNode::TupleValue(e61)
                                  }
                                  5 => {
                                    let e61 = {
                                      let l32 = *((base + 8) as *const i32);
                                      let l33 = *((base + 12) as *const i32);
                                      let len34 = l33 as usize;
                                      
                                      Vec::from_raw_parts(l32 as *mut _, len34, len34)
                                    };
                                    WitNode::ListValue(e61)
                                  }
                                  6 => {
                                    let e61 = {
                                      let l35 = i32::from(*((base + 8) as *const u8));
                                      
                                      match l35 {
                                        0 => None,
                                        1 => {
                                          let e = {
                                            let l36 = *((base + 12) as *const i32);
                                            
                                            l36
                                          };
                                          Some(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      }
                                    };
                                    WitNode::OptionValue(e61)
                                  }
                                  7 => {
                                    let e61 = {
                                      let l37 = i32::from(*((base + 8) as *const u8));
                                      
                                      match l37 {
                                        0 => {
                                          let e = {
                                            let l38 = i32::from(*((base + 12) as *const u8));
                                            
                                            match l38 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l39 = *((base + 16) as *const i32);
                                                  
                                                  l39
                                                };
                                                Some(e)
                                              }
                                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Ok(e)
                                        }
                                        1 => {
                                          let e = {
                                            let l40 = i32::from(*((base + 12) as *const u8));
                                            
                                            match l40 {
                                              0 => None,
                                              1 => {
                                                let e = {
                                                  let l41 = *((base + 16) as *const i32);
                                                  
                                                  l41
                                                };
                                                Some(e)
                                              }
                                              _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                            }
                                          };
                                          Err(e)
                                        }
                                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                                      }
                                    };
                                    WitNode::ResultValue(e61)
                                  }
                                  8 => {
                                    let e61 = {
                                      let l42 = i32::from(*((base + 8) as *const u8));
                                      
                                      l42 as u8
                                    };
                                    WitNode::PrimU8(e61)
                                  }
                                  9 => {
                                    let e61 = {
                                      let l43 = i32::from(*((base + 8) as *const u16));
                                      
                                      l43 as u16
                                    };
                                    WitNode::PrimU16(e61)
                                  }
                                  10 => {
                                    let e61 = {
                                      let l44 = *((base + 8) as *const i32);
                                      
                                      l44 as u32
                                    };
                                    WitNode::PrimU32(e61)
                                  }
                                  11 => {
                                    let e61 = {
                                      let l45 = *((base + 8) as *const i64);
                                      
                                      l45 as u64
                                    };
                                    WitNode::PrimU64(e61)
                                  }
                                  12 => {
                                    let e61 = {
                                      let l46 = i32::from(*((base + 8) as *const i8));
                                      
                                      l46 as i8
                                    };
                                    WitNode::PrimS8(e61)
                                  }
                                  13 => {
                                    let e61 = {
                                      let l47 = i32::from(*((base + 8) as *const i16));
                                      
                                      l47 as i16
                                    };
                                    WitNode::PrimS16(e61)
                                  }
                                  14 => {
                                    let e61 = {
                                      let l48 = *((base + 8) as *const i32);
                                      
                                      l48
                                    };
                                    WitNode::PrimS32(e61)
                                  }
                                  15 => {
                                    let e61 = {
                                      let l49 = *((base + 8) as *const i64);
                                      
                                      l49
                                    };
                                    WitNode::PrimS64(e61)
                                  }
                                  16 => {
                                    let e61 = {
                                      let l50 = *((base + 8) as *const f32);
                                      
                                      l50
                                    };
                                    WitNode::PrimFloat32(e61)
                                  }
                                  17 => {
                                    let e61 = {
                                      let l51 = *((base + 8) as *const f64);
                                      
                                      l51
                                    };
                                    WitNode::PrimFloat64(e61)
                                  }
                                  18 => {
                                    let e61 = {
                                      let l52 = *((base + 8) as *const i32);
                                      
                                      wit_bindgen::rt::char_lift(l52 as u32)
                                    };
                                    WitNode::PrimChar(e61)
                                  }
                                  19 => {
                                    let e61 = {
                                      let l53 = i32::from(*((base + 8) as *const u8));
                                      
                                      wit_bindgen::rt::bool_lift(l53 as u8)
                                    };
                                    WitNode::PrimBool(e61)
                                  }
                                  20 => {
                                    let e61 = {
                                      let l54 = *((base + 8) as *const i32);
                                      let l55 = *((base + 12) as *const i32);
                                      let len56 = l55 as usize;
                                      let bytes56 = Vec::from_raw_parts(l54 as *mut _, len56, len56);
                                      
                                      wit_bindgen::rt::string_lift(bytes56)
                                    };
                                    WitNode::PrimString(e61)
                                  }
                                  n => {
                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                    let e61 = {
                                      let l57 = *((base + 8) as *const i32);
                                      let l58 = *((base + 12) as *const i32);
                                      let len59 = l58 as usize;
                                      let bytes59 = Vec::from_raw_parts(l57 as *mut _, len59, len59);
                                      let l60 = *((base + 16) as *const i64);
                                      
                                      (Uri{
                                        value: wit_bindgen::rt::string_lift(bytes59),
                                      }, l60 as u64)
                                    };
                                    WitNode::Handle(e61)
                                  }
                                };
                                
                                v61
                              };
                              result62.push(e62);
                            }
                            wit_bindgen::rt::dealloc(base62, (len62 as usize) * 24, 8);
                            
                            WitValue{
                              nodes: result62,
                            }
                          };
                          Ok(e)
                        }
                        1 => {
                          let e = {
                            let l63 = i32::from(*((ptr13 + 4) as *const u8));
                            let v76 = match l63 {
                              0 => {
                                let e76 = {
                                  let l64 = *((ptr13 + 8) as *const i32);
                                  let l65 = *((ptr13 + 12) as *const i32);
                                  let len66 = l65 as usize;
                                  let bytes66 = Vec::from_raw_parts(l64 as *mut _, len66, len66);
                                  
                                  wit_bindgen::rt::string_lift(bytes66)
                                };
                                RpcError::ProtocolError(e76)
                              }
                              1 => {
                                let e76 = {
                                  let l67 = *((ptr13 + 8) as *const i32);
                                  let l68 = *((ptr13 + 12) as *const i32);
                                  let len69 = l68 as usize;
                                  let bytes69 = Vec::from_raw_parts(l67 as *mut _, len69, len69);
                                  
                                  wit_bindgen::rt::string_lift(bytes69)
                                };
                                RpcError::Denied(e76)
                              }
                              2 => {
                                let e76 = {
                                  let l70 = *((ptr13 + 8) as *const i32);
                                  let l71 = *((ptr13 + 12) as *const i32);
                                  let len72 = l71 as usize;
                                  let bytes72 = Vec::from_raw_parts(l70 as *mut _, len72, len72);
                                  
                                  wit_bindgen::rt::string_lift(bytes72)
                                };
                                RpcError::NotFound(e76)
                              }
                              n => {
                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                let e76 = {
                                  let l73 = *((ptr13 + 8) as *const i32);
                                  let l74 = *((ptr13 + 12) as *const i32);
                                  let len75 = l74 as usize;
                                  let bytes75 = Vec::from_raw_parts(l73 as *mut _, len75, len75);
                                  
                                  wit_bindgen::rt::string_lift(bytes75)
                                };
                                RpcError::RemoteInternalError(e76)
                              }
                            };
                            
                            v76
                          };
                          Err(e)
                        }
                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                      }
                    }
                  }
                }
                
              }
              
            }
          }
          pub mod timeline {
            pub mod raw_events {
              
              #[allow(clippy::all)]
              pub mod api {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
                #[derive(Clone)]
                pub enum EventValue{
                  StringValue(wit_bindgen::rt::string::String),
                  IntValue(i64),
                  FloatValue(f64),
                  BoolValue(bool),
                }
                impl ::core::fmt::Debug for EventValue {
                  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                      EventValue::StringValue(e) => {
                        f.debug_tuple("EventValue::StringValue").field(e).finish()
                      }
                      EventValue::IntValue(e) => {
                        f.debug_tuple("EventValue::IntValue").field(e).finish()
                      }
                      EventValue::FloatValue(e) => {
                        f.debug_tuple("EventValue::FloatValue").field(e).finish()
                      }
                      EventValue::BoolValue(e) => {
                        f.debug_tuple("EventValue::BoolValue").field(e).finish()
                      }
                    }
                  }
                }
                #[derive(Clone)]
                pub struct Event {
                  pub time: u64,
                  pub event: EventValue,
                }
                impl ::core::fmt::Debug for Event {
                  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Event").field("time", &self.time).field("event", &self.event).finish()
                  }
                }
                #[derive(Clone)]
                pub struct WorkerId {
                  pub name: wit_bindgen::rt::string::String,
                }
                impl ::core::fmt::Debug for WorkerId {
                  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("WorkerId").field("name", &self.name).finish()
                  }
                }
                #[allow(unused_unsafe, clippy::all)]
                pub fn initialize(worker: &WorkerId,){
                  
                  #[allow(unused_imports)]
                  use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                  unsafe {
                    let WorkerId{ name:name0, } = worker;
                    let vec1 = name0;
                    let ptr1 = vec1.as_ptr() as i32;
                    let len1 = vec1.len() as i32;
                    
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:raw-events/api")]
                    extern "C" {
                      #[link_name = "initialize"]
                      fn wit_import(_: i32, _: i32, );
                    }
                    
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: i32, ){ unreachable!() }
                    wit_import(ptr1, len1);
                  }
                }
                #[allow(unused_unsafe, clippy::all)]
                pub fn add_event(order: &Event,){
                  
                  #[allow(unused_imports)]
                  use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                  unsafe {
                    let Event{ time:time0, event:event0, } = order;
                    let (result2_0,result2_1,result2_2,) = match event0 {
                      EventValue::StringValue(e) => {
                        let vec1 = e;
                        let ptr1 = vec1.as_ptr() as i32;
                        let len1 = vec1.len() as i32;
                        
                        (0i32, i64::from(ptr1), len1)
                      },
                      EventValue::IntValue(e) => (1i32, wit_bindgen::rt::as_i64(e), 0i32),
                      EventValue::FloatValue(e) => (2i32, (wit_bindgen::rt::as_f64(e)).to_bits() as i64, 0i32),
                      EventValue::BoolValue(e) => (3i32, i64::from(match e { true => 1, false => 0 }), 0i32),
                    };
                    
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:raw-events/api")]
                    extern "C" {
                      #[link_name = "add-event"]
                      fn wit_import(_: i64, _: i32, _: i64, _: i32, );
                    }
                    
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i32, _: i64, _: i32, ){ unreachable!() }
                    wit_import(wit_bindgen::rt::as_i64(time0), result2_0, result2_1, result2_2);
                  }
                }
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_event(time: u64,) -> Event{
                  
                  #[allow(unused_imports)]
                  use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                  unsafe {
                    
                    #[repr(align(8))]
                    struct RetArea([u8; 24]);
                    let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                    let ptr0 = ret_area.as_mut_ptr() as i32;
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:raw-events/api")]
                    extern "C" {
                      #[link_name = "get-event"]
                      fn wit_import(_: i64, _: i32, );
                    }
                    
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: i32, ){ unreachable!() }
                    wit_import(wit_bindgen::rt::as_i64(time), ptr0);
                    let l1 = *((ptr0 + 0) as *const i64);
                    let l2 = i32::from(*((ptr0 + 8) as *const u8));
                    let v9 = match l2 {
                      0 => {
                        let e9 = {
                          let l3 = *((ptr0 + 16) as *const i32);
                          let l4 = *((ptr0 + 20) as *const i32);
                          let len5 = l4 as usize;
                          let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);
                          
                          wit_bindgen::rt::string_lift(bytes5)
                        };
                        EventValue::StringValue(e9)
                      }
                      1 => {
                        let e9 = {
                          let l6 = *((ptr0 + 16) as *const i64);
                          
                          l6
                        };
                        EventValue::IntValue(e9)
                      }
                      2 => {
                        let e9 = {
                          let l7 = *((ptr0 + 16) as *const f64);
                          
                          l7
                        };
                        EventValue::FloatValue(e9)
                      }
                      n => {
                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                        let e9 = {
                          let l8 = i32::from(*((ptr0 + 16) as *const u8));
                          
                          wit_bindgen::rt::bool_lift(l8 as u8)
                        };
                        EventValue::BoolValue(e9)
                      }
                    };
                    Event{
                      time: l1 as u64,
                      event: v9,
                    }
                  }
                }
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_events() -> wit_bindgen::rt::vec::Vec::<Event>{
                  
                  #[allow(unused_imports)]
                  use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                  unsafe {
                    
                    #[repr(align(4))]
                    struct RetArea([u8; 8]);
                    let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                    let ptr0 = ret_area.as_mut_ptr() as i32;
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:raw-events/api")]
                    extern "C" {
                      #[link_name = "get-events"]
                      fn wit_import(_: i32, );
                    }
                    
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, ){ unreachable!() }
                    wit_import(ptr0);
                    let l1 = *((ptr0 + 0) as *const i32);
                    let l2 = *((ptr0 + 4) as *const i32);
                    let base12 = l1;
                    let len12 = l2;
                    let mut result12 = Vec::with_capacity(len12 as usize);
                    for i in 0..len12 {
                      let base = base12 + i * 24;
                      let e12 = {
                        let l3 = *((base + 0) as *const i64);
                        let l4 = i32::from(*((base + 8) as *const u8));
                        let v11 = match l4 {
                          0 => {
                            let e11 = {
                              let l5 = *((base + 16) as *const i32);
                              let l6 = *((base + 20) as *const i32);
                              let len7 = l6 as usize;
                              let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                              
                              wit_bindgen::rt::string_lift(bytes7)
                            };
                            EventValue::StringValue(e11)
                          }
                          1 => {
                            let e11 = {
                              let l8 = *((base + 16) as *const i64);
                              
                              l8
                            };
                            EventValue::IntValue(e11)
                          }
                          2 => {
                            let e11 = {
                              let l9 = *((base + 16) as *const f64);
                              
                              l9
                            };
                            EventValue::FloatValue(e11)
                          }
                          n => {
                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                            let e11 = {
                              let l10 = i32::from(*((base + 16) as *const u8));
                              
                              wit_bindgen::rt::bool_lift(l10 as u8)
                            };
                            EventValue::BoolValue(e11)
                          }
                        };
                        
                        Event{
                          time: l3 as u64,
                          event: v11,
                        }
                      };
                      result12.push(e12);
                    }
                    wit_bindgen::rt::dealloc(base12, (len12 as usize) * 24, 8);
                    result12
                  }
                }
                
              }
              
            }
            pub mod raw_events_stub {
              
              #[allow(clippy::all)]
              pub mod stub_raw_events {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
                pub type Uri = super::super::super::golem::rpc::types::Uri;
                pub type Event = super::super::super::timeline::raw_events::api::Event;
                pub type WorkerId = super::super::super::timeline::raw_events::api::WorkerId;
                
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Api{
                  handle: wit_bindgen::rt::Resource<Api>,
                }
                
                impl Api{
                  #[doc(hidden)]
                  pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                      handle: wit_bindgen::rt::Resource::from_handle(handle),
                    }
                  }
                  
                  #[doc(hidden)]
                  pub fn into_handle(self) -> u32 {
                    wit_bindgen::rt::Resource::into_handle(self.handle)
                  }
                  
                  #[doc(hidden)]
                  pub fn handle(&self) -> u32 {
                    wit_bindgen::rt::Resource::handle(&self.handle)
                  }
                }
                
                
                unsafe impl wit_bindgen::rt::WasmResource for Api{
                  #[inline]
                  unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    
                    #[cfg(target_arch = "wasm32")]
                    {
                      #[link(wasm_import_module = "timeline:raw-events-stub/stub-raw-events")]
                      extern "C" {
                        #[link_name = "[resource-drop]api"]
                        fn drop(_: u32);
                      }
                      
                      drop(_handle);
                    }
                  }
                }
                
                impl Api {
                  #[allow(unused_unsafe, clippy::all)]
                  pub fn new(location: &Uri,) -> Self{
                    
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                    unsafe {
                      let super::super::super::golem::rpc::types::Uri{ value:value0, } = location;
                      let vec1 = value0;
                      let ptr1 = vec1.as_ptr() as i32;
                      let len1 = vec1.len() as i32;
                      
                      #[cfg(target_arch = "wasm32")]
                      #[link(wasm_import_module = "timeline:raw-events-stub/stub-raw-events")]
                      extern "C" {
                        #[link_name = "[constructor]api"]
                        fn wit_import(_: i32, _: i32, ) -> i32;
                      }
                      
                      #[cfg(not(target_arch = "wasm32"))]
                      fn wit_import(_: i32, _: i32, ) -> i32{ unreachable!() }
                      let ret = wit_import(ptr1, len1);
                      Api::from_handle(ret as u32)
                    }
                  }
                }
                impl Api {
                  #[allow(unused_unsafe, clippy::all)]
                  pub fn initialize(&self,worker: &WorkerId,){
                    
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                    unsafe {
                      let super::super::super::timeline::raw_events::api::WorkerId{ name:name0, } = worker;
                      let vec1 = name0;
                      let ptr1 = vec1.as_ptr() as i32;
                      let len1 = vec1.len() as i32;
                      
                      #[cfg(target_arch = "wasm32")]
                      #[link(wasm_import_module = "timeline:raw-events-stub/stub-raw-events")]
                      extern "C" {
                        #[link_name = "[method]api.initialize"]
                        fn wit_import(_: i32, _: i32, _: i32, );
                      }
                      
                      #[cfg(not(target_arch = "wasm32"))]
                      fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
                      wit_import((self).handle() as i32, ptr1, len1);
                    }
                  }
                }
                impl Api {
                  #[allow(unused_unsafe, clippy::all)]
                  pub fn add_event(&self,order: &Event,){
                    
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                    unsafe {
                      let super::super::super::timeline::raw_events::api::Event{ time:time0, event:event0, } = order;
                      use super::super::super::timeline::raw_events::api::EventValue as V2;
                      let (result3_0,result3_1,result3_2,) = match event0 {
                        V2::StringValue(e) => {
                          let vec1 = e;
                          let ptr1 = vec1.as_ptr() as i32;
                          let len1 = vec1.len() as i32;
                          
                          (0i32, i64::from(ptr1), len1)
                        },
                        V2::IntValue(e) => (1i32, wit_bindgen::rt::as_i64(e), 0i32),
                        V2::FloatValue(e) => (2i32, (wit_bindgen::rt::as_f64(e)).to_bits() as i64, 0i32),
                        V2::BoolValue(e) => (3i32, i64::from(match e { true => 1, false => 0 }), 0i32),
                      };
                      
                      #[cfg(target_arch = "wasm32")]
                      #[link(wasm_import_module = "timeline:raw-events-stub/stub-raw-events")]
                      extern "C" {
                        #[link_name = "[method]api.add-event"]
                        fn wit_import(_: i32, _: i64, _: i32, _: i64, _: i32, );
                      }
                      
                      #[cfg(not(target_arch = "wasm32"))]
                      fn wit_import(_: i32, _: i64, _: i32, _: i64, _: i32, ){ unreachable!() }
                      wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(time0), result3_0, result3_1, result3_2);
                    }
                  }
                }
                impl Api {
                  #[allow(unused_unsafe, clippy::all)]
                  pub fn get_event(&self,time: u64,) -> Event{
                    
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                    unsafe {
                      
                      #[repr(align(8))]
                      struct RetArea([u8; 24]);
                      let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                      let ptr0 = ret_area.as_mut_ptr() as i32;
                      #[cfg(target_arch = "wasm32")]
                      #[link(wasm_import_module = "timeline:raw-events-stub/stub-raw-events")]
                      extern "C" {
                        #[link_name = "[method]api.get-event"]
                        fn wit_import(_: i32, _: i64, _: i32, );
                      }
                      
                      #[cfg(not(target_arch = "wasm32"))]
                      fn wit_import(_: i32, _: i64, _: i32, ){ unreachable!() }
                      wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(time), ptr0);
                      let l1 = *((ptr0 + 0) as *const i64);
                      let l2 = i32::from(*((ptr0 + 8) as *const u8));
                      use super::super::super::timeline::raw_events::api::EventValue as V9;
                      let v9 = match l2 {
                        0 => {
                          let e9 = {
                            let l3 = *((ptr0 + 16) as *const i32);
                            let l4 = *((ptr0 + 20) as *const i32);
                            let len5 = l4 as usize;
                            let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);
                            
                            wit_bindgen::rt::string_lift(bytes5)
                          };
                          V9::StringValue(e9)
                        }
                        1 => {
                          let e9 = {
                            let l6 = *((ptr0 + 16) as *const i64);
                            
                            l6
                          };
                          V9::IntValue(e9)
                        }
                        2 => {
                          let e9 = {
                            let l7 = *((ptr0 + 16) as *const f64);
                            
                            l7
                          };
                          V9::FloatValue(e9)
                        }
                        n => {
                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                          let e9 = {
                            let l8 = i32::from(*((ptr0 + 16) as *const u8));
                            
                            wit_bindgen::rt::bool_lift(l8 as u8)
                          };
                          V9::BoolValue(e9)
                        }
                      };
                      super::super::super::timeline::raw_events::api::Event{
                        time: l1 as u64,
                        event: v9,
                      }
                    }
                  }
                }
                impl Api {
                  #[allow(unused_unsafe, clippy::all)]
                  pub fn get_events(&self,) -> wit_bindgen::rt::vec::Vec::<Event>{
                    
                    #[allow(unused_imports)]
                    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                    unsafe {
                      
                      #[repr(align(4))]
                      struct RetArea([u8; 8]);
                      let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                      let ptr0 = ret_area.as_mut_ptr() as i32;
                      #[cfg(target_arch = "wasm32")]
                      #[link(wasm_import_module = "timeline:raw-events-stub/stub-raw-events")]
                      extern "C" {
                        #[link_name = "[method]api.get-events"]
                        fn wit_import(_: i32, _: i32, );
                      }
                      
                      #[cfg(not(target_arch = "wasm32"))]
                      fn wit_import(_: i32, _: i32, ){ unreachable!() }
                      wit_import((self).handle() as i32, ptr0);
                      let l1 = *((ptr0 + 0) as *const i32);
                      let l2 = *((ptr0 + 4) as *const i32);
                      let base12 = l1;
                      let len12 = l2;
                      let mut result12 = Vec::with_capacity(len12 as usize);
                      for i in 0..len12 {
                        let base = base12 + i * 24;
                        let e12 = {
                          let l3 = *((base + 0) as *const i64);
                          let l4 = i32::from(*((base + 8) as *const u8));
                          use super::super::super::timeline::raw_events::api::EventValue as V11;
                          let v11 = match l4 {
                            0 => {
                              let e11 = {
                                let l5 = *((base + 16) as *const i32);
                                let l6 = *((base + 20) as *const i32);
                                let len7 = l6 as usize;
                                let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                                
                                wit_bindgen::rt::string_lift(bytes7)
                              };
                              V11::StringValue(e11)
                            }
                            1 => {
                              let e11 = {
                                let l8 = *((base + 16) as *const i64);
                                
                                l8
                              };
                              V11::IntValue(e11)
                            }
                            2 => {
                              let e11 = {
                                let l9 = *((base + 16) as *const f64);
                                
                                l9
                              };
                              V11::FloatValue(e11)
                            }
                            n => {
                              debug_assert_eq!(n, 3, "invalid enum discriminant");
                              let e11 = {
                                let l10 = i32::from(*((base + 16) as *const u8));
                                
                                wit_bindgen::rt::bool_lift(l10 as u8)
                              };
                              V11::BoolValue(e11)
                            }
                          };
                          
                          super::super::super::timeline::raw_events::api::Event{
                            time: l3 as u64,
                            event: v11,
                          }
                        };
                        result12.push(e12);
                      }
                      wit_bindgen::rt::dealloc(base12, (len12 as usize) * 24, 8);
                      result12
                    }
                  }
                }
                
              }
              
            }
          }
          pub mod exports {
            pub mod timeline {
              pub mod core {
                
                #[allow(clippy::all)]
                pub mod api {
                  #[used]
                  #[doc(hidden)]
                  #[cfg(target_arch = "wasm32")]
                  static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
                  pub type EventValue = super::super::super::super::timeline::raw_events::api::EventValue;
                  pub type NodeIndex = i32;
                  #[derive(Clone)]
                  pub struct WorkerId {
                    pub name: wit_bindgen::rt::string::String,
                  }
                  impl ::core::fmt::Debug for WorkerId {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                      f.debug_struct("WorkerId").field("name", &self.name).finish()
                    }
                  }
                  #[repr(u8)]
                  #[derive(Clone, Copy, Eq, PartialEq)]
                  pub enum TimelineClassicComparator {
                    GreaterThan,
                    GreaterThanEqual,
                    LessThan,
                    LessThanEqual,
                  }
                  impl ::core::fmt::Debug for TimelineClassicComparator {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                      match self {
                        TimelineClassicComparator::GreaterThan => {
                          f.debug_tuple("TimelineClassicComparator::GreaterThan").finish()
                        }
                        TimelineClassicComparator::GreaterThanEqual => {
                          f.debug_tuple("TimelineClassicComparator::GreaterThanEqual").finish()
                        }
                        TimelineClassicComparator::LessThan => {
                          f.debug_tuple("TimelineClassicComparator::LessThan").finish()
                        }
                        TimelineClassicComparator::LessThanEqual => {
                          f.debug_tuple("TimelineClassicComparator::LessThanEqual").finish()
                        }
                      }
                    }
                  }
                  
                  impl TimelineClassicComparator{
                    pub(crate) unsafe fn _lift(val: u8) -> TimelineClassicComparator{
                      if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                      }
                      
                      match val {
                        0 => TimelineClassicComparator::GreaterThan,
                        1 => TimelineClassicComparator::GreaterThanEqual,
                        2 => TimelineClassicComparator::LessThan,
                        3 => TimelineClassicComparator::LessThanEqual,
                        
                        _ => panic!("invalid enum discriminant"),
                      }
                    }
                  }
                  
                  /// A  timeline-classic corresponds to classic timeline operations
                  /// in the paper
                  /// A primitive timeline is also maintained in a separate worker/server
                  #[derive(Clone)]
                  pub struct TimelineClassic {
                    pub op: TimelineClassicComparator,
                    pub timeline: NodeIndex,
                    pub value: EventValue,
                    pub server: WorkerId,
                  }
                  impl ::core::fmt::Debug for TimelineClassic {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                      f.debug_struct("TimelineClassic").field("op", &self.op).field("timeline", &self.timeline).field("value", &self.value).field("server", &self.server).finish()
                    }
                  }
                  #[derive(Clone)]
                  pub struct TimelineClassicNot {
                    pub timeline: NodeIndex,
                    pub server: WorkerId,
                  }
                  impl ::core::fmt::Debug for TimelineClassicNot {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                      f.debug_struct("TimelineClassicNot").field("timeline", &self.timeline).field("server", &self.server).finish()
                    }
                  }
                  #[repr(u8)]
                  #[derive(Clone, Copy, Eq, PartialEq)]
                  pub enum TimelineSpecificComparator {
                    Equal,
                    GreaterThan,
                    LessThan,
                  }
                  impl ::core::fmt::Debug for TimelineSpecificComparator {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                      match self {
                        TimelineSpecificComparator::Equal => {
                          f.debug_tuple("TimelineSpecificComparator::Equal").finish()
                        }
                        TimelineSpecificComparator::GreaterThan => {
                          f.debug_tuple("TimelineSpecificComparator::GreaterThan").finish()
                        }
                        TimelineSpecificComparator::LessThan => {
                          f.debug_tuple("TimelineSpecificComparator::LessThan").finish()
                        }
                      }
                    }
                  }
                  
                  impl TimelineSpecificComparator{
                    pub(crate) unsafe fn _lift(val: u8) -> TimelineSpecificComparator{
                      if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                      }
                      
                      match val {
                        0 => TimelineSpecificComparator::Equal,
                        1 => TimelineSpecificComparator::GreaterThan,
                        2 => TimelineSpecificComparator::LessThan,
                        
                        _ => panic!("invalid enum discriminant"),
                      }
                    }
                  }
                  
                  #[derive(Clone)]
                  pub struct EventColumnPredicateInfo {
                    pub col_name: wit_bindgen::rt::string::String,
                    pub value: EventValue,
                  }
                  impl ::core::fmt::Debug for EventColumnPredicateInfo {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                      f.debug_struct("EventColumnPredicateInfo").field("col-name", &self.col_name).field("value", &self.value).finish()
                    }
                  }
                  /// A filtered timeline is operation on state dynamic timelines
                  /// applied with an event filter
                  /// TLHasExistedWithIn(col("userAction" ) == "seek")
                  /// seek and col("userAction) is event-column-predicate-info
                  /// and == is filter-op
                  /// A filtered timeline is also maintained in a separate worker/server
                  #[derive(Clone)]
                  pub struct TimelineSpecific {
                    pub filter: TimelineSpecificComparator,
                    pub node: NodeIndex,
                    pub event_predicate: EventColumnPredicateInfo,
                    pub server: WorkerId,
                  }
                  impl ::core::fmt::Debug for TimelineSpecific {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                      f.debug_struct("TimelineSpecific").field("filter", &self.filter).field("node", &self.node).field("event-predicate", &self.event_predicate).field("server", &self.server).finish()
                    }
                  }
                  #[derive(Clone)]
                  pub struct TimelineSpecificWithin {
                    pub filtered: TimelineSpecific,
                    pub time: u64,
                  }
                  impl ::core::fmt::Debug for TimelineSpecificWithin {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                      f.debug_struct("TimelineSpecificWithin").field("filtered", &self.filtered).field("time", &self.time).finish()
                    }
                  }
                  #[derive(Clone)]
                  pub enum TimelineNode{
                    Leaf(WorkerId),
                    Primitive(TimelineClassic),
                    NotNode(TimelineClassicNot),
                    TlHasExisted(TimelineSpecific),
                    TlHasExistedWithin(TimelineSpecificWithin),
                    TlDurationWhere(TimelineSpecific),
                    TlDurationInCurState(TimelineSpecific),
                  }
                  impl ::core::fmt::Debug for TimelineNode {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                      match self {
                        TimelineNode::Leaf(e) => {
                          f.debug_tuple("TimelineNode::Leaf").field(e).finish()
                        }
                        TimelineNode::Primitive(e) => {
                          f.debug_tuple("TimelineNode::Primitive").field(e).finish()
                        }
                        TimelineNode::NotNode(e) => {
                          f.debug_tuple("TimelineNode::NotNode").field(e).finish()
                        }
                        TimelineNode::TlHasExisted(e) => {
                          f.debug_tuple("TimelineNode::TlHasExisted").field(e).finish()
                        }
                        TimelineNode::TlHasExistedWithin(e) => {
                          f.debug_tuple("TimelineNode::TlHasExistedWithin").field(e).finish()
                        }
                        TimelineNode::TlDurationWhere(e) => {
                          f.debug_tuple("TimelineNode::TlDurationWhere").field(e).finish()
                        }
                        TimelineNode::TlDurationInCurState(e) => {
                          f.debug_tuple("TimelineNode::TlDurationInCurState").field(e).finish()
                        }
                      }
                    }
                  }
                  #[derive(Clone)]
                  pub struct TimelineOp {
                    pub nodes: wit_bindgen::rt::vec::Vec::<TimelineNode>,
                  }
                  impl ::core::fmt::Debug for TimelineOp {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                      f.debug_struct("TimelineOp").field("nodes", &self.nodes).finish()
                    }
                  }
                  const _: () = {
                    
                    #[doc(hidden)]
                    #[export_name = "timeline:core/api#initialize-timeline"]
                    #[allow(non_snake_case)]
                    unsafe extern "C" fn __export_initialize_timeline(arg0: i32,arg1: i32,) {
                      #[allow(unused_imports)]
                      use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                      
                      // Before executing any other code, use this function to run all static
                      // constructors, if they have not yet been run. This is a hack required
                      // to work around wasi-libc ctors calling import functions to initialize
                      // the environment.
                      //
                      // This functionality will be removed once rust 1.69.0 is stable, at which
                      // point wasi-libc will no longer have this behavior.
                      //
                      // See
                      // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                      // for more details.
                      #[cfg(target_arch="wasm32")]
                      wit_bindgen::rt::run_ctors_once();
                      
                      let base87 = arg0;
                      let len87 = arg1;
                      let mut result87 = Vec::with_capacity(len87 as usize);
                      for i in 0..len87 {
                        let base = base87 + i * 56;
                        let e87 = {
                          let l0 = i32::from(*((base + 0) as *const u8));
                          let v86 = match l0 {
                            0 => {
                              let e86 = {
                                let l1 = *((base + 8) as *const i32);
                                let l2 = *((base + 12) as *const i32);
                                let len3 = l2 as usize;
                                let bytes3 = Vec::from_raw_parts(l1 as *mut _, len3, len3);
                                
                                WorkerId{
                                  name: wit_bindgen::rt::string_lift(bytes3),
                                }
                              };
                              TimelineNode::Leaf(e86)
                            }
                            1 => {
                              let e86 = {
                                let l4 = i32::from(*((base + 8) as *const u8));
                                let l5 = *((base + 12) as *const i32);
                                let l6 = i32::from(*((base + 16) as *const u8));
                                use super::super::super::super::timeline::raw_events::api::EventValue as V13;
                                let v13 = match l6 {
                                  0 => {
                                    let e13 = {
                                      let l7 = *((base + 24) as *const i32);
                                      let l8 = *((base + 28) as *const i32);
                                      let len9 = l8 as usize;
                                      let bytes9 = Vec::from_raw_parts(l7 as *mut _, len9, len9);
                                      
                                      wit_bindgen::rt::string_lift(bytes9)
                                    };
                                    V13::StringValue(e13)
                                  }
                                  1 => {
                                    let e13 = {
                                      let l10 = *((base + 24) as *const i64);
                                      
                                      l10
                                    };
                                    V13::IntValue(e13)
                                  }
                                  2 => {
                                    let e13 = {
                                      let l11 = *((base + 24) as *const f64);
                                      
                                      l11
                                    };
                                    V13::FloatValue(e13)
                                  }
                                  n => {
                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                    let e13 = {
                                      let l12 = i32::from(*((base + 24) as *const u8));
                                      
                                      wit_bindgen::rt::bool_lift(l12 as u8)
                                    };
                                    V13::BoolValue(e13)
                                  }
                                };
                                let l14 = *((base + 32) as *const i32);
                                let l15 = *((base + 36) as *const i32);
                                let len16 = l15 as usize;
                                let bytes16 = Vec::from_raw_parts(l14 as *mut _, len16, len16);
                                
                                TimelineClassic{
                                  op: TimelineClassicComparator::_lift(l4 as u8),
                                  timeline: l5,
                                  value: v13,
                                  server: WorkerId{
                                    name: wit_bindgen::rt::string_lift(bytes16),
                                  },
                                }
                              };
                              TimelineNode::Primitive(e86)
                            }
                            2 => {
                              let e86 = {
                                let l17 = *((base + 8) as *const i32);
                                let l18 = *((base + 12) as *const i32);
                                let l19 = *((base + 16) as *const i32);
                                let len20 = l19 as usize;
                                let bytes20 = Vec::from_raw_parts(l18 as *mut _, len20, len20);
                                
                                TimelineClassicNot{
                                  timeline: l17,
                                  server: WorkerId{
                                    name: wit_bindgen::rt::string_lift(bytes20),
                                  },
                                }
                              };
                              TimelineNode::NotNode(e86)
                            }
                            3 => {
                              let e86 = {
                                let l21 = i32::from(*((base + 8) as *const u8));
                                let l22 = *((base + 12) as *const i32);
                                let l23 = *((base + 16) as *const i32);
                                let l24 = *((base + 20) as *const i32);
                                let len25 = l24 as usize;
                                let bytes25 = Vec::from_raw_parts(l23 as *mut _, len25, len25);
                                let l26 = i32::from(*((base + 24) as *const u8));
                                use super::super::super::super::timeline::raw_events::api::EventValue as V33;
                                let v33 = match l26 {
                                  0 => {
                                    let e33 = {
                                      let l27 = *((base + 32) as *const i32);
                                      let l28 = *((base + 36) as *const i32);
                                      let len29 = l28 as usize;
                                      let bytes29 = Vec::from_raw_parts(l27 as *mut _, len29, len29);
                                      
                                      wit_bindgen::rt::string_lift(bytes29)
                                    };
                                    V33::StringValue(e33)
                                  }
                                  1 => {
                                    let e33 = {
                                      let l30 = *((base + 32) as *const i64);
                                      
                                      l30
                                    };
                                    V33::IntValue(e33)
                                  }
                                  2 => {
                                    let e33 = {
                                      let l31 = *((base + 32) as *const f64);
                                      
                                      l31
                                    };
                                    V33::FloatValue(e33)
                                  }
                                  n => {
                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                    let e33 = {
                                      let l32 = i32::from(*((base + 32) as *const u8));
                                      
                                      wit_bindgen::rt::bool_lift(l32 as u8)
                                    };
                                    V33::BoolValue(e33)
                                  }
                                };
                                let l34 = *((base + 40) as *const i32);
                                let l35 = *((base + 44) as *const i32);
                                let len36 = l35 as usize;
                                let bytes36 = Vec::from_raw_parts(l34 as *mut _, len36, len36);
                                
                                TimelineSpecific{
                                  filter: TimelineSpecificComparator::_lift(l21 as u8),
                                  node: l22,
                                  event_predicate: EventColumnPredicateInfo{
                                    col_name: wit_bindgen::rt::string_lift(bytes25),
                                    value: v33,
                                  },
                                  server: WorkerId{
                                    name: wit_bindgen::rt::string_lift(bytes36),
                                  },
                                }
                              };
                              TimelineNode::TlHasExisted(e86)
                            }
                            4 => {
                              let e86 = {
                                let l37 = i32::from(*((base + 8) as *const u8));
                                let l38 = *((base + 12) as *const i32);
                                let l39 = *((base + 16) as *const i32);
                                let l40 = *((base + 20) as *const i32);
                                let len41 = l40 as usize;
                                let bytes41 = Vec::from_raw_parts(l39 as *mut _, len41, len41);
                                let l42 = i32::from(*((base + 24) as *const u8));
                                use super::super::super::super::timeline::raw_events::api::EventValue as V49;
                                let v49 = match l42 {
                                  0 => {
                                    let e49 = {
                                      let l43 = *((base + 32) as *const i32);
                                      let l44 = *((base + 36) as *const i32);
                                      let len45 = l44 as usize;
                                      let bytes45 = Vec::from_raw_parts(l43 as *mut _, len45, len45);
                                      
                                      wit_bindgen::rt::string_lift(bytes45)
                                    };
                                    V49::StringValue(e49)
                                  }
                                  1 => {
                                    let e49 = {
                                      let l46 = *((base + 32) as *const i64);
                                      
                                      l46
                                    };
                                    V49::IntValue(e49)
                                  }
                                  2 => {
                                    let e49 = {
                                      let l47 = *((base + 32) as *const f64);
                                      
                                      l47
                                    };
                                    V49::FloatValue(e49)
                                  }
                                  n => {
                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                    let e49 = {
                                      let l48 = i32::from(*((base + 32) as *const u8));
                                      
                                      wit_bindgen::rt::bool_lift(l48 as u8)
                                    };
                                    V49::BoolValue(e49)
                                  }
                                };
                                let l50 = *((base + 40) as *const i32);
                                let l51 = *((base + 44) as *const i32);
                                let len52 = l51 as usize;
                                let bytes52 = Vec::from_raw_parts(l50 as *mut _, len52, len52);
                                let l53 = *((base + 48) as *const i64);
                                
                                TimelineSpecificWithin{
                                  filtered: TimelineSpecific{
                                    filter: TimelineSpecificComparator::_lift(l37 as u8),
                                    node: l38,
                                    event_predicate: EventColumnPredicateInfo{
                                      col_name: wit_bindgen::rt::string_lift(bytes41),
                                      value: v49,
                                    },
                                    server: WorkerId{
                                      name: wit_bindgen::rt::string_lift(bytes52),
                                    },
                                  },
                                  time: l53 as u64,
                                }
                              };
                              TimelineNode::TlHasExistedWithin(e86)
                            }
                            5 => {
                              let e86 = {
                                let l54 = i32::from(*((base + 8) as *const u8));
                                let l55 = *((base + 12) as *const i32);
                                let l56 = *((base + 16) as *const i32);
                                let l57 = *((base + 20) as *const i32);
                                let len58 = l57 as usize;
                                let bytes58 = Vec::from_raw_parts(l56 as *mut _, len58, len58);
                                let l59 = i32::from(*((base + 24) as *const u8));
                                use super::super::super::super::timeline::raw_events::api::EventValue as V66;
                                let v66 = match l59 {
                                  0 => {
                                    let e66 = {
                                      let l60 = *((base + 32) as *const i32);
                                      let l61 = *((base + 36) as *const i32);
                                      let len62 = l61 as usize;
                                      let bytes62 = Vec::from_raw_parts(l60 as *mut _, len62, len62);
                                      
                                      wit_bindgen::rt::string_lift(bytes62)
                                    };
                                    V66::StringValue(e66)
                                  }
                                  1 => {
                                    let e66 = {
                                      let l63 = *((base + 32) as *const i64);
                                      
                                      l63
                                    };
                                    V66::IntValue(e66)
                                  }
                                  2 => {
                                    let e66 = {
                                      let l64 = *((base + 32) as *const f64);
                                      
                                      l64
                                    };
                                    V66::FloatValue(e66)
                                  }
                                  n => {
                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                    let e66 = {
                                      let l65 = i32::from(*((base + 32) as *const u8));
                                      
                                      wit_bindgen::rt::bool_lift(l65 as u8)
                                    };
                                    V66::BoolValue(e66)
                                  }
                                };
                                let l67 = *((base + 40) as *const i32);
                                let l68 = *((base + 44) as *const i32);
                                let len69 = l68 as usize;
                                let bytes69 = Vec::from_raw_parts(l67 as *mut _, len69, len69);
                                
                                TimelineSpecific{
                                  filter: TimelineSpecificComparator::_lift(l54 as u8),
                                  node: l55,
                                  event_predicate: EventColumnPredicateInfo{
                                    col_name: wit_bindgen::rt::string_lift(bytes58),
                                    value: v66,
                                  },
                                  server: WorkerId{
                                    name: wit_bindgen::rt::string_lift(bytes69),
                                  },
                                }
                              };
                              TimelineNode::TlDurationWhere(e86)
                            }
                            n => {
                              debug_assert_eq!(n, 6, "invalid enum discriminant");
                              let e86 = {
                                let l70 = i32::from(*((base + 8) as *const u8));
                                let l71 = *((base + 12) as *const i32);
                                let l72 = *((base + 16) as *const i32);
                                let l73 = *((base + 20) as *const i32);
                                let len74 = l73 as usize;
                                let bytes74 = Vec::from_raw_parts(l72 as *mut _, len74, len74);
                                let l75 = i32::from(*((base + 24) as *const u8));
                                use super::super::super::super::timeline::raw_events::api::EventValue as V82;
                                let v82 = match l75 {
                                  0 => {
                                    let e82 = {
                                      let l76 = *((base + 32) as *const i32);
                                      let l77 = *((base + 36) as *const i32);
                                      let len78 = l77 as usize;
                                      let bytes78 = Vec::from_raw_parts(l76 as *mut _, len78, len78);
                                      
                                      wit_bindgen::rt::string_lift(bytes78)
                                    };
                                    V82::StringValue(e82)
                                  }
                                  1 => {
                                    let e82 = {
                                      let l79 = *((base + 32) as *const i64);
                                      
                                      l79
                                    };
                                    V82::IntValue(e82)
                                  }
                                  2 => {
                                    let e82 = {
                                      let l80 = *((base + 32) as *const f64);
                                      
                                      l80
                                    };
                                    V82::FloatValue(e82)
                                  }
                                  n => {
                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                    let e82 = {
                                      let l81 = i32::from(*((base + 32) as *const u8));
                                      
                                      wit_bindgen::rt::bool_lift(l81 as u8)
                                    };
                                    V82::BoolValue(e82)
                                  }
                                };
                                let l83 = *((base + 40) as *const i32);
                                let l84 = *((base + 44) as *const i32);
                                let len85 = l84 as usize;
                                let bytes85 = Vec::from_raw_parts(l83 as *mut _, len85, len85);
                                
                                TimelineSpecific{
                                  filter: TimelineSpecificComparator::_lift(l70 as u8),
                                  node: l71,
                                  event_predicate: EventColumnPredicateInfo{
                                    col_name: wit_bindgen::rt::string_lift(bytes74),
                                    value: v82,
                                  },
                                  server: WorkerId{
                                    name: wit_bindgen::rt::string_lift(bytes85),
                                  },
                                }
                              };
                              TimelineNode::TlDurationInCurState(e86)
                            }
                          };
                          
                          v86
                        };
                        result87.push(e87);
                      }
                      wit_bindgen::rt::dealloc(base87, (len87 as usize) * 56, 8);
                      <_GuestImpl as Guest>::initialize_timeline(TimelineOp{
                        nodes: result87,
                      });
                    }
                  };
                  use super::super::super::super::super::Component as _GuestImpl;
                  pub trait Guest {
                    fn initialize_timeline(timeline: TimelineOp,);
                  }
                  
                }
                
              }
            }
          }
          
          #[cfg(target_arch = "wasm32")]
          #[link_section = "component-type:core"]
          #[doc(hidden)]
          pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3706] = [3, 0, 4, 99, 111, 114, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 170, 7, 1, 65, 6, 1, 66, 6, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 1, 114, 2, 4, 116, 105, 109, 101, 119, 5, 101, 118, 101, 110, 116, 1, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 4, 3, 1, 23, 116, 105, 109, 101, 108, 105, 110, 101, 58, 114, 97, 119, 45, 101, 118, 101, 110, 116, 115, 47, 97, 112, 105, 5, 0, 2, 3, 0, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 2, 3, 0, 0, 5, 101, 118, 101, 110, 116, 1, 66, 29, 2, 3, 2, 1, 1, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 2, 3, 2, 1, 2, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 4, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 6, 1, 109, 4, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 18, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 15, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 4, 0, 27, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 108, 97, 115, 115, 105, 99, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 3, 0, 8, 1, 114, 4, 2, 111, 112, 9, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 5, 118, 97, 108, 117, 101, 1, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 16, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 108, 97, 115, 115, 105, 99, 3, 0, 10, 1, 114, 2, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 20, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 108, 97, 115, 115, 105, 99, 45, 110, 111, 116, 3, 0, 12, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 28, 116, 105, 109, 101, 108, 105, 110, 101, 45, 115, 112, 101, 99, 105, 102, 105, 99, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 3, 0, 14, 1, 114, 2, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 1, 4, 0, 27, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 3, 0, 16, 1, 114, 4, 6, 102, 105, 108, 116, 101, 114, 15, 4, 110, 111, 100, 101, 5, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 17, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 17, 116, 105, 109, 101, 108, 105, 110, 101, 45, 115, 112, 101, 99, 105, 102, 105, 99, 3, 0, 18, 1, 114, 2, 8, 102, 105, 108, 116, 101, 114, 101, 100, 19, 4, 116, 105, 109, 101, 119, 4, 0, 24, 116, 105, 109, 101, 108, 105, 110, 101, 45, 115, 112, 101, 99, 105, 102, 105, 99, 45, 119, 105, 116, 104, 105, 110, 3, 0, 20, 1, 113, 7, 4, 108, 101, 97, 102, 1, 7, 0, 9, 112, 114, 105, 109, 105, 116, 105, 118, 101, 1, 11, 0, 8, 110, 111, 116, 45, 110, 111, 100, 101, 1, 13, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 19, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 21, 0, 17, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 119, 104, 101, 114, 101, 1, 19, 0, 24, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 105, 110, 45, 99, 117, 114, 45, 115, 116, 97, 116, 101, 1, 19, 0, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 22, 1, 112, 23, 1, 114, 1, 5, 110, 111, 100, 101, 115, 24, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 25, 1, 64, 1, 8, 116, 105, 109, 101, 108, 105, 110, 101, 26, 1, 0, 4, 0, 19, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 27, 4, 1, 17, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 47, 97, 112, 105, 5, 3, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 182, 16, 1, 65, 2, 1, 65, 12, 1, 66, 26, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 0, 1, 114, 1, 5, 118, 97, 108, 117, 101, 115, 4, 0, 3, 117, 114, 105, 3, 0, 2, 1, 112, 1, 1, 107, 1, 1, 111, 2, 121, 5, 1, 112, 127, 1, 106, 1, 5, 1, 5, 1, 111, 2, 3, 119, 1, 113, 22, 12, 114, 101, 99, 111, 114, 100, 45, 118, 97, 108, 117, 101, 1, 4, 0, 13, 118, 97, 114, 105, 97, 110, 116, 45, 118, 97, 108, 117, 101, 1, 6, 0, 10, 101, 110, 117, 109, 45, 118, 97, 108, 117, 101, 1, 121, 0, 11, 102, 108, 97, 103, 115, 45, 118, 97, 108, 117, 101, 1, 7, 0, 11, 116, 117, 112, 108, 101, 45, 118, 97, 108, 117, 101, 1, 4, 0, 10, 108, 105, 115, 116, 45, 118, 97, 108, 117, 101, 1, 4, 0, 12, 111, 112, 116, 105, 111, 110, 45, 118, 97, 108, 117, 101, 1, 5, 0, 12, 114, 101, 115, 117, 108, 116, 45, 118, 97, 108, 117, 101, 1, 8, 0, 7, 112, 114, 105, 109, 45, 117, 56, 1, 125, 0, 8, 112, 114, 105, 109, 45, 117, 49, 54, 1, 123, 0, 8, 112, 114, 105, 109, 45, 117, 51, 50, 1, 121, 0, 8, 112, 114, 105, 109, 45, 117, 54, 52, 1, 119, 0, 7, 112, 114, 105, 109, 45, 115, 56, 1, 126, 0, 8, 112, 114, 105, 109, 45, 115, 49, 54, 1, 124, 0, 8, 112, 114, 105, 109, 45, 115, 51, 50, 1, 122, 0, 8, 112, 114, 105, 109, 45, 115, 54, 52, 1, 120, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 51, 50, 1, 118, 0, 12, 112, 114, 105, 109, 45, 102, 108, 111, 97, 116, 54, 52, 1, 117, 0, 9, 112, 114, 105, 109, 45, 99, 104, 97, 114, 1, 116, 0, 9, 112, 114, 105, 109, 45, 98, 111, 111, 108, 1, 127, 0, 11, 112, 114, 105, 109, 45, 115, 116, 114, 105, 110, 103, 1, 115, 0, 6, 104, 97, 110, 100, 108, 101, 1, 9, 0, 4, 0, 8, 119, 105, 116, 45, 110, 111, 100, 101, 3, 0, 10, 1, 112, 11, 1, 114, 1, 5, 110, 111, 100, 101, 115, 12, 4, 0, 9, 119, 105, 116, 45, 118, 97, 108, 117, 101, 3, 0, 13, 1, 113, 4, 14, 112, 114, 111, 116, 111, 99, 111, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 6, 100, 101, 110, 105, 101, 100, 1, 115, 0, 9, 110, 111, 116, 45, 102, 111, 117, 110, 100, 1, 115, 0, 21, 114, 101, 109, 111, 116, 101, 45, 105, 110, 116, 101, 114, 110, 97, 108, 45, 101, 114, 114, 111, 114, 1, 115, 0, 4, 0, 9, 114, 112, 99, 45, 101, 114, 114, 111, 114, 3, 0, 15, 4, 0, 8, 119, 97, 115, 109, 45, 114, 112, 99, 3, 1, 1, 105, 17, 1, 64, 1, 8, 108, 111, 99, 97, 116, 105, 111, 110, 3, 0, 18, 4, 0, 21, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 119, 97, 115, 109, 45, 114, 112, 99, 1, 19, 1, 104, 17, 1, 112, 14, 1, 106, 1, 14, 1, 16, 1, 64, 3, 4, 115, 101, 108, 102, 20, 13, 102, 117, 110, 99, 116, 105, 111, 110, 45, 110, 97, 109, 101, 115, 15, 102, 117, 110, 99, 116, 105, 111, 110, 45, 112, 97, 114, 97, 109, 115, 21, 0, 22, 4, 0, 33, 91, 109, 101, 116, 104, 111, 100, 93, 119, 97, 115, 109, 45, 114, 112, 99, 46, 105, 110, 118, 111, 107, 101, 45, 97, 110, 100, 45, 97, 119, 97, 105, 116, 1, 23, 3, 1, 21, 103, 111, 108, 101, 109, 58, 114, 112, 99, 47, 116, 121, 112, 101, 115, 64, 48, 46, 49, 46, 48, 5, 0, 1, 66, 15, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 1, 114, 2, 4, 116, 105, 109, 101, 119, 5, 101, 118, 101, 110, 116, 1, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 4, 1, 64, 1, 6, 119, 111, 114, 107, 101, 114, 5, 1, 0, 4, 0, 10, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 1, 6, 1, 64, 1, 5, 111, 114, 100, 101, 114, 3, 1, 0, 4, 0, 9, 97, 100, 100, 45, 101, 118, 101, 110, 116, 1, 7, 1, 64, 1, 4, 116, 105, 109, 101, 119, 0, 3, 4, 0, 9, 103, 101, 116, 45, 101, 118, 101, 110, 116, 1, 8, 1, 112, 3, 1, 64, 0, 0, 9, 4, 0, 10, 103, 101, 116, 45, 101, 118, 101, 110, 116, 115, 1, 10, 3, 1, 23, 116, 105, 109, 101, 108, 105, 110, 101, 58, 114, 97, 119, 45, 101, 118, 101, 110, 116, 115, 47, 97, 112, 105, 5, 1, 2, 3, 0, 0, 3, 117, 114, 105, 2, 3, 0, 1, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 2, 3, 0, 1, 5, 101, 118, 101, 110, 116, 2, 3, 0, 1, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 1, 66, 22, 2, 3, 2, 1, 2, 4, 0, 3, 117, 114, 105, 3, 0, 0, 2, 3, 2, 1, 3, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 2, 2, 3, 2, 1, 4, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 4, 2, 3, 2, 1, 5, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 6, 4, 0, 3, 97, 112, 105, 3, 1, 1, 105, 8, 1, 64, 1, 8, 108, 111, 99, 97, 116, 105, 111, 110, 1, 0, 9, 4, 0, 16, 91, 99, 111, 110, 115, 116, 114, 117, 99, 116, 111, 114, 93, 97, 112, 105, 1, 10, 1, 104, 8, 1, 64, 2, 4, 115, 101, 108, 102, 11, 6, 119, 111, 114, 107, 101, 114, 7, 1, 0, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 1, 12, 1, 64, 2, 4, 115, 101, 108, 102, 11, 5, 111, 114, 100, 101, 114, 5, 1, 0, 4, 0, 21, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 97, 100, 100, 45, 101, 118, 101, 110, 116, 1, 13, 1, 64, 2, 4, 115, 101, 108, 102, 11, 4, 116, 105, 109, 101, 119, 0, 5, 4, 0, 21, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 103, 101, 116, 45, 101, 118, 101, 110, 116, 1, 14, 1, 112, 5, 1, 64, 1, 4, 115, 101, 108, 102, 11, 0, 15, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 97, 112, 105, 46, 103, 101, 116, 45, 101, 118, 101, 110, 116, 115, 1, 16, 3, 1, 40, 116, 105, 109, 101, 108, 105, 110, 101, 58, 114, 97, 119, 45, 101, 118, 101, 110, 116, 115, 45, 115, 116, 117, 98, 47, 115, 116, 117, 98, 45, 114, 97, 119, 45, 101, 118, 101, 110, 116, 115, 5, 6, 1, 66, 29, 2, 3, 2, 1, 3, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 2, 3, 2, 1, 4, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 4, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 6, 1, 109, 4, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 18, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 15, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 4, 0, 27, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 108, 97, 115, 115, 105, 99, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 3, 0, 8, 1, 114, 4, 2, 111, 112, 9, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 5, 118, 97, 108, 117, 101, 1, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 16, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 108, 97, 115, 115, 105, 99, 3, 0, 10, 1, 114, 2, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 20, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 108, 97, 115, 115, 105, 99, 45, 110, 111, 116, 3, 0, 12, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 28, 116, 105, 109, 101, 108, 105, 110, 101, 45, 115, 112, 101, 99, 105, 102, 105, 99, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 3, 0, 14, 1, 114, 2, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 1, 4, 0, 27, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 3, 0, 16, 1, 114, 4, 6, 102, 105, 108, 116, 101, 114, 15, 4, 110, 111, 100, 101, 5, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 17, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 17, 116, 105, 109, 101, 108, 105, 110, 101, 45, 115, 112, 101, 99, 105, 102, 105, 99, 3, 0, 18, 1, 114, 2, 8, 102, 105, 108, 116, 101, 114, 101, 100, 19, 4, 116, 105, 109, 101, 119, 4, 0, 24, 116, 105, 109, 101, 108, 105, 110, 101, 45, 115, 112, 101, 99, 105, 102, 105, 99, 45, 119, 105, 116, 104, 105, 110, 3, 0, 20, 1, 113, 7, 4, 108, 101, 97, 102, 1, 7, 0, 9, 112, 114, 105, 109, 105, 116, 105, 118, 101, 1, 11, 0, 8, 110, 111, 116, 45, 110, 111, 100, 101, 1, 13, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 19, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 21, 0, 17, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 119, 104, 101, 114, 101, 1, 19, 0, 24, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 105, 110, 45, 99, 117, 114, 45, 115, 116, 97, 116, 101, 1, 19, 0, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 22, 1, 112, 23, 1, 114, 1, 5, 110, 111, 100, 101, 115, 24, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 25, 1, 64, 1, 8, 116, 105, 109, 101, 108, 105, 110, 101, 26, 1, 0, 4, 0, 19, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 27, 4, 1, 17, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 47, 97, 112, 105, 5, 7, 4, 1, 18, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 47, 99, 111, 114, 101, 4, 0, 11, 10, 1, 0, 4, 99, 111, 114, 101, 3, 2, 0, 0, 163, 4, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 34, 105, 110, 116, 101, 114, 102, 97, 99, 101, 115, 34, 58, 123, 34, 97, 112, 105, 34, 58, 123, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 108, 97, 115, 115, 105, 99, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 32, 32, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 108, 97, 115, 115, 105, 99, 32, 99, 111, 114, 114, 101, 115, 112, 111, 110, 100, 115, 32, 116, 111, 32, 99, 108, 97, 115, 115, 105, 99, 32, 116, 105, 109, 101, 108, 105, 110, 101, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 92, 110, 105, 110, 32, 116, 104, 101, 32, 112, 97, 112, 101, 114, 92, 110, 65, 32, 112, 114, 105, 109, 105, 116, 105, 118, 101, 32, 116, 105, 109, 101, 108, 105, 110, 101, 32, 105, 115, 32, 97, 108, 115, 111, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 105, 110, 32, 97, 32, 115, 101, 112, 97, 114, 97, 116, 101, 32, 119, 111, 114, 107, 101, 114, 47, 115, 101, 114, 118, 101, 114, 34, 125, 44, 34, 116, 105, 109, 101, 108, 105, 110, 101, 45, 115, 112, 101, 99, 105, 102, 105, 99, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 32, 102, 105, 108, 116, 101, 114, 101, 100, 32, 116, 105, 109, 101, 108, 105, 110, 101, 32, 105, 115, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 32, 111, 110, 32, 115, 116, 97, 116, 101, 32, 100, 121, 110, 97, 109, 105, 99, 32, 116, 105, 109, 101, 108, 105, 110, 101, 115, 92, 110, 97, 112, 112, 108, 105, 101, 100, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 102, 105, 108, 116, 101, 114, 92, 110, 84, 76, 72, 97, 115, 69, 120, 105, 115, 116, 101, 100, 87, 105, 116, 104, 73, 110, 40, 99, 111, 108, 40, 92, 34, 117, 115, 101, 114, 65, 99, 116, 105, 111, 110, 92, 34, 32, 41, 32, 61, 61, 32, 92, 34, 115, 101, 101, 107, 92, 34, 41, 92, 110, 115, 101, 101, 107, 32, 97, 110, 100, 32, 99, 111, 108, 40, 92, 34, 117, 115, 101, 114, 65, 99, 116, 105, 111, 110, 41, 32, 105, 115, 32, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 92, 110, 97, 110, 100, 32, 61, 61, 32, 105, 115, 32, 102, 105, 108, 116, 101, 114, 45, 111, 112, 92, 110, 65, 32, 102, 105, 108, 116, 101, 114, 101, 100, 32, 116, 105, 109, 101, 108, 105, 110, 101, 32, 105, 115, 32, 97, 108, 115, 111, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 105, 110, 32, 97, 32, 115, 101, 112, 97, 114, 97, 116, 101, 32, 119, 111, 114, 107, 101, 114, 47, 115, 101, 114, 118, 101, 114, 34, 125, 125, 125, 125, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];
          
          #[inline(never)]
          #[doc(hidden)]
          #[cfg(target_arch = "wasm32")]
          pub fn __link_section() {}
          