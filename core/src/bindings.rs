// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod timeline {
  pub mod raw_events {
    
    #[allow(clippy::all)]
    pub mod api {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[derive(Clone)]
      pub enum EventValue{
        StringValue(wit_bindgen::rt::string::String),
        IntValue(i64),
        FloatValue(f64),
        BoolValue(bool),
      }
      impl ::core::fmt::Debug for EventValue {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            EventValue::StringValue(e) => {
              f.debug_tuple("EventValue::StringValue").field(e).finish()
            }
            EventValue::IntValue(e) => {
              f.debug_tuple("EventValue::IntValue").field(e).finish()
            }
            EventValue::FloatValue(e) => {
              f.debug_tuple("EventValue::FloatValue").field(e).finish()
            }
            EventValue::BoolValue(e) => {
              f.debug_tuple("EventValue::BoolValue").field(e).finish()
            }
          }
        }
      }
      #[derive(Clone)]
      pub struct Event {
        pub time: u64,
        pub event: EventValue,
      }
      impl ::core::fmt::Debug for Event {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Event").field("time", &self.time).field("event", &self.event).finish()
        }
      }
      #[derive(Clone)]
      pub struct WorkerId {
        pub name: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for WorkerId {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("WorkerId").field("name", &self.name).finish()
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn initialize(worker: &WorkerId,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let WorkerId{ name:name0, } = worker;
          let vec1 = name0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "timeline:raw-events/api")]
          extern "C" {
            #[link_name = "initialize"]
            fn wit_import(_: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1);
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn add_event(order: &Event,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let Event{ time:time0, event:event0, } = order;
          let (result2_0,result2_1,result2_2,) = match event0 {
            EventValue::StringValue(e) => {
              let vec1 = e;
              let ptr1 = vec1.as_ptr() as i32;
              let len1 = vec1.len() as i32;
              
              (0i32, i64::from(ptr1), len1)
            },
            EventValue::IntValue(e) => (1i32, wit_bindgen::rt::as_i64(e), 0i32),
            EventValue::FloatValue(e) => (2i32, (wit_bindgen::rt::as_f64(e)).to_bits() as i64, 0i32),
            EventValue::BoolValue(e) => (3i32, i64::from(match e { true => 1, false => 0 }), 0i32),
          };
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "timeline:raw-events/api")]
          extern "C" {
            #[link_name = "add-event"]
            fn wit_import(_: i64, _: i32, _: i64, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i64, _: i32, _: i64, _: i32, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i64(time0), result2_0, result2_1, result2_2);
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn get_event(time: u64,) -> Event{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(8))]
          struct RetArea([u8; 24]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "timeline:raw-events/api")]
          extern "C" {
            #[link_name = "get-event"]
            fn wit_import(_: i64, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i64, _: i32, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i64(time), ptr0);
          let l1 = *((ptr0 + 0) as *const i64);
          let l2 = i32::from(*((ptr0 + 8) as *const u8));
          let v9 = match l2 {
            0 => {
              let e9 = {
                let l3 = *((ptr0 + 16) as *const i32);
                let l4 = *((ptr0 + 20) as *const i32);
                let len5 = l4 as usize;
                let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);
                
                wit_bindgen::rt::string_lift(bytes5)
              };
              EventValue::StringValue(e9)
            }
            1 => {
              let e9 = {
                let l6 = *((ptr0 + 16) as *const i64);
                
                l6
              };
              EventValue::IntValue(e9)
            }
            2 => {
              let e9 = {
                let l7 = *((ptr0 + 16) as *const f64);
                
                l7
              };
              EventValue::FloatValue(e9)
            }
            n => {
              debug_assert_eq!(n, 3, "invalid enum discriminant");
              let e9 = {
                let l8 = i32::from(*((ptr0 + 16) as *const u8));
                
                wit_bindgen::rt::bool_lift(l8 as u8)
              };
              EventValue::BoolValue(e9)
            }
          };
          Event{
            time: l1 as u64,
            event: v9,
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn get_events() -> wit_bindgen::rt::vec::Vec::<Event>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "timeline:raw-events/api")]
          extern "C" {
            #[link_name = "get-events"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *((ptr0 + 0) as *const i32);
          let l2 = *((ptr0 + 4) as *const i32);
          let base12 = l1;
          let len12 = l2;
          let mut result12 = Vec::with_capacity(len12 as usize);
          for i in 0..len12 {
            let base = base12 + i * 24;
            let e12 = {
              let l3 = *((base + 0) as *const i64);
              let l4 = i32::from(*((base + 8) as *const u8));
              let v11 = match l4 {
                0 => {
                  let e11 = {
                    let l5 = *((base + 16) as *const i32);
                    let l6 = *((base + 20) as *const i32);
                    let len7 = l6 as usize;
                    let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                    
                    wit_bindgen::rt::string_lift(bytes7)
                  };
                  EventValue::StringValue(e11)
                }
                1 => {
                  let e11 = {
                    let l8 = *((base + 16) as *const i64);
                    
                    l8
                  };
                  EventValue::IntValue(e11)
                }
                2 => {
                  let e11 = {
                    let l9 = *((base + 16) as *const f64);
                    
                    l9
                  };
                  EventValue::FloatValue(e11)
                }
                n => {
                  debug_assert_eq!(n, 3, "invalid enum discriminant");
                  let e11 = {
                    let l10 = i32::from(*((base + 16) as *const u8));
                    
                    wit_bindgen::rt::bool_lift(l10 as u8)
                  };
                  EventValue::BoolValue(e11)
                }
              };
              
              Event{
                time: l3 as u64,
                event: v11,
              }
            };
            result12.push(e12);
          }
          wit_bindgen::rt::dealloc(base12, (len12 as usize) * 24, 8);
          result12
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod timeline {
    pub mod core {
      
      #[allow(clippy::all)]
      pub mod api {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type EventValue = super::super::super::super::timeline::raw_events::api::EventValue;
        pub type NodeIndex = i32;
        #[derive(Clone)]
        pub struct WorkerId {
          pub name: wit_bindgen::rt::string::String,
        }
        impl ::core::fmt::Debug for WorkerId {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("WorkerId").field("name", &self.name).finish()
          }
        }
        #[repr(u8)]
        #[derive(Clone, Copy, Eq, PartialEq)]
        pub enum TimelineClassicComparator {
          GreaterThan,
          GreaterThanEqual,
          LessThan,
          LessThanEqual,
        }
        impl ::core::fmt::Debug for TimelineClassicComparator {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              TimelineClassicComparator::GreaterThan => {
                f.debug_tuple("TimelineClassicComparator::GreaterThan").finish()
              }
              TimelineClassicComparator::GreaterThanEqual => {
                f.debug_tuple("TimelineClassicComparator::GreaterThanEqual").finish()
              }
              TimelineClassicComparator::LessThan => {
                f.debug_tuple("TimelineClassicComparator::LessThan").finish()
              }
              TimelineClassicComparator::LessThanEqual => {
                f.debug_tuple("TimelineClassicComparator::LessThanEqual").finish()
              }
            }
          }
        }
        
        impl TimelineClassicComparator{
          pub(crate) unsafe fn _lift(val: u8) -> TimelineClassicComparator{
            if !cfg!(debug_assertions) {
              return ::core::mem::transmute(val);
            }
            
            match val {
              0 => TimelineClassicComparator::GreaterThan,
              1 => TimelineClassicComparator::GreaterThanEqual,
              2 => TimelineClassicComparator::LessThan,
              3 => TimelineClassicComparator::LessThanEqual,
              
              _ => panic!("invalid enum discriminant"),
            }
          }
        }
        
        /// A  timeline-classic corresponds to classic timeline operations
        /// in the paper
        /// A primitive timeline is also maintained in a separate worker/server
        #[derive(Clone)]
        pub struct TimelineClassic {
          pub op: TimelineClassicComparator,
          pub timeline: NodeIndex,
          pub value: EventValue,
          pub server: WorkerId,
        }
        impl ::core::fmt::Debug for TimelineClassic {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("TimelineClassic").field("op", &self.op).field("timeline", &self.timeline).field("value", &self.value).field("server", &self.server).finish()
          }
        }
        #[derive(Clone)]
        pub struct TimelineClassicNot {
          pub timeline: NodeIndex,
          pub server: WorkerId,
        }
        impl ::core::fmt::Debug for TimelineClassicNot {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("TimelineClassicNot").field("timeline", &self.timeline).field("server", &self.server).finish()
          }
        }
        #[repr(u8)]
        #[derive(Clone, Copy, Eq, PartialEq)]
        pub enum TimelineSpecificComparator {
          Equal,
          GreaterThan,
          LessThan,
        }
        impl ::core::fmt::Debug for TimelineSpecificComparator {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              TimelineSpecificComparator::Equal => {
                f.debug_tuple("TimelineSpecificComparator::Equal").finish()
              }
              TimelineSpecificComparator::GreaterThan => {
                f.debug_tuple("TimelineSpecificComparator::GreaterThan").finish()
              }
              TimelineSpecificComparator::LessThan => {
                f.debug_tuple("TimelineSpecificComparator::LessThan").finish()
              }
            }
          }
        }
        
        impl TimelineSpecificComparator{
          pub(crate) unsafe fn _lift(val: u8) -> TimelineSpecificComparator{
            if !cfg!(debug_assertions) {
              return ::core::mem::transmute(val);
            }
            
            match val {
              0 => TimelineSpecificComparator::Equal,
              1 => TimelineSpecificComparator::GreaterThan,
              2 => TimelineSpecificComparator::LessThan,
              
              _ => panic!("invalid enum discriminant"),
            }
          }
        }
        
        #[derive(Clone)]
        pub struct EventColumnPredicateInfo {
          pub col_name: wit_bindgen::rt::string::String,
          pub value: EventValue,
        }
        impl ::core::fmt::Debug for EventColumnPredicateInfo {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("EventColumnPredicateInfo").field("col-name", &self.col_name).field("value", &self.value).finish()
          }
        }
        /// A filtered timeline is operation on state dynamic timelines
        /// applied with an event filter
        /// TLHasExistedWithIn(col("userAction" ) == "seek")
        /// seek and col("userAction) is event-column-predicate-info
        /// and == is filter-op
        /// A filtered timeline is also maintained in a separate worker/server
        #[derive(Clone)]
        pub struct TimelineSpecific {
          pub filter: TimelineSpecificComparator,
          pub node: NodeIndex,
          pub event_predicate: EventColumnPredicateInfo,
          pub server: WorkerId,
        }
        impl ::core::fmt::Debug for TimelineSpecific {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("TimelineSpecific").field("filter", &self.filter).field("node", &self.node).field("event-predicate", &self.event_predicate).field("server", &self.server).finish()
          }
        }
        #[derive(Clone)]
        pub struct TimelineSpecificWithin {
          pub filtered: TimelineSpecific,
          pub time: u64,
        }
        impl ::core::fmt::Debug for TimelineSpecificWithin {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("TimelineSpecificWithin").field("filtered", &self.filtered).field("time", &self.time).finish()
          }
        }
        #[derive(Clone)]
        pub enum TimelineNode{
          Leaf(WorkerId),
          Primitive(TimelineClassic),
          NotNode(TimelineClassicNot),
          TlHasExisted(TimelineSpecific),
          TlHasExistedWithin(TimelineSpecificWithin),
          TlDurationWhere(TimelineSpecific),
          TlDurationInCurState(TimelineSpecific),
        }
        impl ::core::fmt::Debug for TimelineNode {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              TimelineNode::Leaf(e) => {
                f.debug_tuple("TimelineNode::Leaf").field(e).finish()
              }
              TimelineNode::Primitive(e) => {
                f.debug_tuple("TimelineNode::Primitive").field(e).finish()
              }
              TimelineNode::NotNode(e) => {
                f.debug_tuple("TimelineNode::NotNode").field(e).finish()
              }
              TimelineNode::TlHasExisted(e) => {
                f.debug_tuple("TimelineNode::TlHasExisted").field(e).finish()
              }
              TimelineNode::TlHasExistedWithin(e) => {
                f.debug_tuple("TimelineNode::TlHasExistedWithin").field(e).finish()
              }
              TimelineNode::TlDurationWhere(e) => {
                f.debug_tuple("TimelineNode::TlDurationWhere").field(e).finish()
              }
              TimelineNode::TlDurationInCurState(e) => {
                f.debug_tuple("TimelineNode::TlDurationInCurState").field(e).finish()
              }
            }
          }
        }
        #[derive(Clone)]
        pub struct TimelineOp {
          pub nodes: wit_bindgen::rt::vec::Vec::<TimelineNode>,
        }
        impl ::core::fmt::Debug for TimelineOp {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("TimelineOp").field("nodes", &self.nodes).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "timeline:core/api#initialize-timeline"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_initialize_timeline(arg0: i32,arg1: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let base87 = arg0;
            let len87 = arg1;
            let mut result87 = Vec::with_capacity(len87 as usize);
            for i in 0..len87 {
              let base = base87 + i * 56;
              let e87 = {
                let l0 = i32::from(*((base + 0) as *const u8));
                let v86 = match l0 {
                  0 => {
                    let e86 = {
                      let l1 = *((base + 8) as *const i32);
                      let l2 = *((base + 12) as *const i32);
                      let len3 = l2 as usize;
                      let bytes3 = Vec::from_raw_parts(l1 as *mut _, len3, len3);
                      
                      WorkerId{
                        name: wit_bindgen::rt::string_lift(bytes3),
                      }
                    };
                    TimelineNode::Leaf(e86)
                  }
                  1 => {
                    let e86 = {
                      let l4 = i32::from(*((base + 8) as *const u8));
                      let l5 = *((base + 12) as *const i32);
                      let l6 = i32::from(*((base + 16) as *const u8));
                      use super::super::super::super::timeline::raw_events::api::EventValue as V13;
                      let v13 = match l6 {
                        0 => {
                          let e13 = {
                            let l7 = *((base + 24) as *const i32);
                            let l8 = *((base + 28) as *const i32);
                            let len9 = l8 as usize;
                            let bytes9 = Vec::from_raw_parts(l7 as *mut _, len9, len9);
                            
                            wit_bindgen::rt::string_lift(bytes9)
                          };
                          V13::StringValue(e13)
                        }
                        1 => {
                          let e13 = {
                            let l10 = *((base + 24) as *const i64);
                            
                            l10
                          };
                          V13::IntValue(e13)
                        }
                        2 => {
                          let e13 = {
                            let l11 = *((base + 24) as *const f64);
                            
                            l11
                          };
                          V13::FloatValue(e13)
                        }
                        n => {
                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                          let e13 = {
                            let l12 = i32::from(*((base + 24) as *const u8));
                            
                            wit_bindgen::rt::bool_lift(l12 as u8)
                          };
                          V13::BoolValue(e13)
                        }
                      };
                      let l14 = *((base + 32) as *const i32);
                      let l15 = *((base + 36) as *const i32);
                      let len16 = l15 as usize;
                      let bytes16 = Vec::from_raw_parts(l14 as *mut _, len16, len16);
                      
                      TimelineClassic{
                        op: TimelineClassicComparator::_lift(l4 as u8),
                        timeline: l5,
                        value: v13,
                        server: WorkerId{
                          name: wit_bindgen::rt::string_lift(bytes16),
                        },
                      }
                    };
                    TimelineNode::Primitive(e86)
                  }
                  2 => {
                    let e86 = {
                      let l17 = *((base + 8) as *const i32);
                      let l18 = *((base + 12) as *const i32);
                      let l19 = *((base + 16) as *const i32);
                      let len20 = l19 as usize;
                      let bytes20 = Vec::from_raw_parts(l18 as *mut _, len20, len20);
                      
                      TimelineClassicNot{
                        timeline: l17,
                        server: WorkerId{
                          name: wit_bindgen::rt::string_lift(bytes20),
                        },
                      }
                    };
                    TimelineNode::NotNode(e86)
                  }
                  3 => {
                    let e86 = {
                      let l21 = i32::from(*((base + 8) as *const u8));
                      let l22 = *((base + 12) as *const i32);
                      let l23 = *((base + 16) as *const i32);
                      let l24 = *((base + 20) as *const i32);
                      let len25 = l24 as usize;
                      let bytes25 = Vec::from_raw_parts(l23 as *mut _, len25, len25);
                      let l26 = i32::from(*((base + 24) as *const u8));
                      use super::super::super::super::timeline::raw_events::api::EventValue as V33;
                      let v33 = match l26 {
                        0 => {
                          let e33 = {
                            let l27 = *((base + 32) as *const i32);
                            let l28 = *((base + 36) as *const i32);
                            let len29 = l28 as usize;
                            let bytes29 = Vec::from_raw_parts(l27 as *mut _, len29, len29);
                            
                            wit_bindgen::rt::string_lift(bytes29)
                          };
                          V33::StringValue(e33)
                        }
                        1 => {
                          let e33 = {
                            let l30 = *((base + 32) as *const i64);
                            
                            l30
                          };
                          V33::IntValue(e33)
                        }
                        2 => {
                          let e33 = {
                            let l31 = *((base + 32) as *const f64);
                            
                            l31
                          };
                          V33::FloatValue(e33)
                        }
                        n => {
                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                          let e33 = {
                            let l32 = i32::from(*((base + 32) as *const u8));
                            
                            wit_bindgen::rt::bool_lift(l32 as u8)
                          };
                          V33::BoolValue(e33)
                        }
                      };
                      let l34 = *((base + 40) as *const i32);
                      let l35 = *((base + 44) as *const i32);
                      let len36 = l35 as usize;
                      let bytes36 = Vec::from_raw_parts(l34 as *mut _, len36, len36);
                      
                      TimelineSpecific{
                        filter: TimelineSpecificComparator::_lift(l21 as u8),
                        node: l22,
                        event_predicate: EventColumnPredicateInfo{
                          col_name: wit_bindgen::rt::string_lift(bytes25),
                          value: v33,
                        },
                        server: WorkerId{
                          name: wit_bindgen::rt::string_lift(bytes36),
                        },
                      }
                    };
                    TimelineNode::TlHasExisted(e86)
                  }
                  4 => {
                    let e86 = {
                      let l37 = i32::from(*((base + 8) as *const u8));
                      let l38 = *((base + 12) as *const i32);
                      let l39 = *((base + 16) as *const i32);
                      let l40 = *((base + 20) as *const i32);
                      let len41 = l40 as usize;
                      let bytes41 = Vec::from_raw_parts(l39 as *mut _, len41, len41);
                      let l42 = i32::from(*((base + 24) as *const u8));
                      use super::super::super::super::timeline::raw_events::api::EventValue as V49;
                      let v49 = match l42 {
                        0 => {
                          let e49 = {
                            let l43 = *((base + 32) as *const i32);
                            let l44 = *((base + 36) as *const i32);
                            let len45 = l44 as usize;
                            let bytes45 = Vec::from_raw_parts(l43 as *mut _, len45, len45);
                            
                            wit_bindgen::rt::string_lift(bytes45)
                          };
                          V49::StringValue(e49)
                        }
                        1 => {
                          let e49 = {
                            let l46 = *((base + 32) as *const i64);
                            
                            l46
                          };
                          V49::IntValue(e49)
                        }
                        2 => {
                          let e49 = {
                            let l47 = *((base + 32) as *const f64);
                            
                            l47
                          };
                          V49::FloatValue(e49)
                        }
                        n => {
                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                          let e49 = {
                            let l48 = i32::from(*((base + 32) as *const u8));
                            
                            wit_bindgen::rt::bool_lift(l48 as u8)
                          };
                          V49::BoolValue(e49)
                        }
                      };
                      let l50 = *((base + 40) as *const i32);
                      let l51 = *((base + 44) as *const i32);
                      let len52 = l51 as usize;
                      let bytes52 = Vec::from_raw_parts(l50 as *mut _, len52, len52);
                      let l53 = *((base + 48) as *const i64);
                      
                      TimelineSpecificWithin{
                        filtered: TimelineSpecific{
                          filter: TimelineSpecificComparator::_lift(l37 as u8),
                          node: l38,
                          event_predicate: EventColumnPredicateInfo{
                            col_name: wit_bindgen::rt::string_lift(bytes41),
                            value: v49,
                          },
                          server: WorkerId{
                            name: wit_bindgen::rt::string_lift(bytes52),
                          },
                        },
                        time: l53 as u64,
                      }
                    };
                    TimelineNode::TlHasExistedWithin(e86)
                  }
                  5 => {
                    let e86 = {
                      let l54 = i32::from(*((base + 8) as *const u8));
                      let l55 = *((base + 12) as *const i32);
                      let l56 = *((base + 16) as *const i32);
                      let l57 = *((base + 20) as *const i32);
                      let len58 = l57 as usize;
                      let bytes58 = Vec::from_raw_parts(l56 as *mut _, len58, len58);
                      let l59 = i32::from(*((base + 24) as *const u8));
                      use super::super::super::super::timeline::raw_events::api::EventValue as V66;
                      let v66 = match l59 {
                        0 => {
                          let e66 = {
                            let l60 = *((base + 32) as *const i32);
                            let l61 = *((base + 36) as *const i32);
                            let len62 = l61 as usize;
                            let bytes62 = Vec::from_raw_parts(l60 as *mut _, len62, len62);
                            
                            wit_bindgen::rt::string_lift(bytes62)
                          };
                          V66::StringValue(e66)
                        }
                        1 => {
                          let e66 = {
                            let l63 = *((base + 32) as *const i64);
                            
                            l63
                          };
                          V66::IntValue(e66)
                        }
                        2 => {
                          let e66 = {
                            let l64 = *((base + 32) as *const f64);
                            
                            l64
                          };
                          V66::FloatValue(e66)
                        }
                        n => {
                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                          let e66 = {
                            let l65 = i32::from(*((base + 32) as *const u8));
                            
                            wit_bindgen::rt::bool_lift(l65 as u8)
                          };
                          V66::BoolValue(e66)
                        }
                      };
                      let l67 = *((base + 40) as *const i32);
                      let l68 = *((base + 44) as *const i32);
                      let len69 = l68 as usize;
                      let bytes69 = Vec::from_raw_parts(l67 as *mut _, len69, len69);
                      
                      TimelineSpecific{
                        filter: TimelineSpecificComparator::_lift(l54 as u8),
                        node: l55,
                        event_predicate: EventColumnPredicateInfo{
                          col_name: wit_bindgen::rt::string_lift(bytes58),
                          value: v66,
                        },
                        server: WorkerId{
                          name: wit_bindgen::rt::string_lift(bytes69),
                        },
                      }
                    };
                    TimelineNode::TlDurationWhere(e86)
                  }
                  n => {
                    debug_assert_eq!(n, 6, "invalid enum discriminant");
                    let e86 = {
                      let l70 = i32::from(*((base + 8) as *const u8));
                      let l71 = *((base + 12) as *const i32);
                      let l72 = *((base + 16) as *const i32);
                      let l73 = *((base + 20) as *const i32);
                      let len74 = l73 as usize;
                      let bytes74 = Vec::from_raw_parts(l72 as *mut _, len74, len74);
                      let l75 = i32::from(*((base + 24) as *const u8));
                      use super::super::super::super::timeline::raw_events::api::EventValue as V82;
                      let v82 = match l75 {
                        0 => {
                          let e82 = {
                            let l76 = *((base + 32) as *const i32);
                            let l77 = *((base + 36) as *const i32);
                            let len78 = l77 as usize;
                            let bytes78 = Vec::from_raw_parts(l76 as *mut _, len78, len78);
                            
                            wit_bindgen::rt::string_lift(bytes78)
                          };
                          V82::StringValue(e82)
                        }
                        1 => {
                          let e82 = {
                            let l79 = *((base + 32) as *const i64);
                            
                            l79
                          };
                          V82::IntValue(e82)
                        }
                        2 => {
                          let e82 = {
                            let l80 = *((base + 32) as *const f64);
                            
                            l80
                          };
                          V82::FloatValue(e82)
                        }
                        n => {
                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                          let e82 = {
                            let l81 = i32::from(*((base + 32) as *const u8));
                            
                            wit_bindgen::rt::bool_lift(l81 as u8)
                          };
                          V82::BoolValue(e82)
                        }
                      };
                      let l83 = *((base + 40) as *const i32);
                      let l84 = *((base + 44) as *const i32);
                      let len85 = l84 as usize;
                      let bytes85 = Vec::from_raw_parts(l83 as *mut _, len85, len85);
                      
                      TimelineSpecific{
                        filter: TimelineSpecificComparator::_lift(l70 as u8),
                        node: l71,
                        event_predicate: EventColumnPredicateInfo{
                          col_name: wit_bindgen::rt::string_lift(bytes74),
                          value: v82,
                        },
                        server: WorkerId{
                          name: wit_bindgen::rt::string_lift(bytes85),
                        },
                      }
                    };
                    TimelineNode::TlDurationInCurState(e86)
                  }
                };
                
                v86
              };
              result87.push(e87);
            }
            wit_bindgen::rt::dealloc(base87, (len87 as usize) * 56, 8);
            <_GuestImpl as Guest>::initialize_timeline(TimelineOp{
              nodes: result87,
            });
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn initialize_timeline(timeline: TimelineOp,);
        }
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:core"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2670] = [3, 0, 4, 99, 111, 114, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 170, 7, 1, 65, 6, 1, 66, 6, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 1, 114, 2, 4, 116, 105, 109, 101, 119, 5, 101, 118, 101, 110, 116, 1, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 4, 3, 1, 23, 116, 105, 109, 101, 108, 105, 110, 101, 58, 114, 97, 119, 45, 101, 118, 101, 110, 116, 115, 47, 97, 112, 105, 5, 0, 2, 3, 0, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 2, 3, 0, 0, 5, 101, 118, 101, 110, 116, 1, 66, 29, 2, 3, 2, 1, 1, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 2, 3, 2, 1, 2, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 4, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 6, 1, 109, 4, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 18, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 15, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 4, 0, 27, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 108, 97, 115, 115, 105, 99, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 3, 0, 8, 1, 114, 4, 2, 111, 112, 9, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 5, 118, 97, 108, 117, 101, 1, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 16, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 108, 97, 115, 115, 105, 99, 3, 0, 10, 1, 114, 2, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 20, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 108, 97, 115, 115, 105, 99, 45, 110, 111, 116, 3, 0, 12, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 28, 116, 105, 109, 101, 108, 105, 110, 101, 45, 115, 112, 101, 99, 105, 102, 105, 99, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 3, 0, 14, 1, 114, 2, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 1, 4, 0, 27, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 3, 0, 16, 1, 114, 4, 6, 102, 105, 108, 116, 101, 114, 15, 4, 110, 111, 100, 101, 5, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 17, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 17, 116, 105, 109, 101, 108, 105, 110, 101, 45, 115, 112, 101, 99, 105, 102, 105, 99, 3, 0, 18, 1, 114, 2, 8, 102, 105, 108, 116, 101, 114, 101, 100, 19, 4, 116, 105, 109, 101, 119, 4, 0, 24, 116, 105, 109, 101, 108, 105, 110, 101, 45, 115, 112, 101, 99, 105, 102, 105, 99, 45, 119, 105, 116, 104, 105, 110, 3, 0, 20, 1, 113, 7, 4, 108, 101, 97, 102, 1, 7, 0, 9, 112, 114, 105, 109, 105, 116, 105, 118, 101, 1, 11, 0, 8, 110, 111, 116, 45, 110, 111, 100, 101, 1, 13, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 19, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 21, 0, 17, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 119, 104, 101, 114, 101, 1, 19, 0, 24, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 105, 110, 45, 99, 117, 114, 45, 115, 116, 97, 116, 101, 1, 19, 0, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 22, 1, 112, 23, 1, 114, 1, 5, 110, 111, 100, 101, 115, 24, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 25, 1, 64, 1, 8, 116, 105, 109, 101, 108, 105, 110, 101, 26, 1, 0, 4, 0, 19, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 27, 4, 1, 17, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 47, 97, 112, 105, 5, 3, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 170, 8, 1, 65, 2, 1, 65, 6, 1, 66, 15, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 1, 114, 2, 4, 116, 105, 109, 101, 119, 5, 101, 118, 101, 110, 116, 1, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 4, 1, 64, 1, 6, 119, 111, 114, 107, 101, 114, 5, 1, 0, 4, 0, 10, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 1, 6, 1, 64, 1, 5, 111, 114, 100, 101, 114, 3, 1, 0, 4, 0, 9, 97, 100, 100, 45, 101, 118, 101, 110, 116, 1, 7, 1, 64, 1, 4, 116, 105, 109, 101, 119, 0, 3, 4, 0, 9, 103, 101, 116, 45, 101, 118, 101, 110, 116, 1, 8, 1, 112, 3, 1, 64, 0, 0, 9, 4, 0, 10, 103, 101, 116, 45, 101, 118, 101, 110, 116, 115, 1, 10, 3, 1, 23, 116, 105, 109, 101, 108, 105, 110, 101, 58, 114, 97, 119, 45, 101, 118, 101, 110, 116, 115, 47, 97, 112, 105, 5, 0, 2, 3, 0, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 2, 3, 0, 0, 5, 101, 118, 101, 110, 116, 1, 66, 29, 2, 3, 2, 1, 1, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 2, 3, 2, 1, 2, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 4, 1, 114, 1, 4, 110, 97, 109, 101, 115, 4, 0, 9, 119, 111, 114, 107, 101, 114, 45, 105, 100, 3, 0, 6, 1, 109, 4, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 18, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 15, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 4, 0, 27, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 108, 97, 115, 115, 105, 99, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 3, 0, 8, 1, 114, 4, 2, 111, 112, 9, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 5, 118, 97, 108, 117, 101, 1, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 16, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 108, 97, 115, 115, 105, 99, 3, 0, 10, 1, 114, 2, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 20, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 108, 97, 115, 115, 105, 99, 45, 110, 111, 116, 3, 0, 12, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 28, 116, 105, 109, 101, 108, 105, 110, 101, 45, 115, 112, 101, 99, 105, 102, 105, 99, 45, 99, 111, 109, 112, 97, 114, 97, 116, 111, 114, 3, 0, 14, 1, 114, 2, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 1, 4, 0, 27, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 3, 0, 16, 1, 114, 4, 6, 102, 105, 108, 116, 101, 114, 15, 4, 110, 111, 100, 101, 5, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 17, 6, 115, 101, 114, 118, 101, 114, 7, 4, 0, 17, 116, 105, 109, 101, 108, 105, 110, 101, 45, 115, 112, 101, 99, 105, 102, 105, 99, 3, 0, 18, 1, 114, 2, 8, 102, 105, 108, 116, 101, 114, 101, 100, 19, 4, 116, 105, 109, 101, 119, 4, 0, 24, 116, 105, 109, 101, 108, 105, 110, 101, 45, 115, 112, 101, 99, 105, 102, 105, 99, 45, 119, 105, 116, 104, 105, 110, 3, 0, 20, 1, 113, 7, 4, 108, 101, 97, 102, 1, 7, 0, 9, 112, 114, 105, 109, 105, 116, 105, 118, 101, 1, 11, 0, 8, 110, 111, 116, 45, 110, 111, 100, 101, 1, 13, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 19, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 21, 0, 17, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 119, 104, 101, 114, 101, 1, 19, 0, 24, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 105, 110, 45, 99, 117, 114, 45, 115, 116, 97, 116, 101, 1, 19, 0, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 22, 1, 112, 23, 1, 114, 1, 5, 110, 111, 100, 101, 115, 24, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 25, 1, 64, 1, 8, 116, 105, 109, 101, 108, 105, 110, 101, 26, 1, 0, 4, 0, 19, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 27, 4, 1, 17, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 47, 97, 112, 105, 5, 3, 4, 1, 18, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 47, 99, 111, 114, 101, 4, 0, 11, 10, 1, 0, 4, 99, 111, 114, 101, 3, 2, 0, 0, 163, 4, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 34, 105, 110, 116, 101, 114, 102, 97, 99, 101, 115, 34, 58, 123, 34, 97, 112, 105, 34, 58, 123, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 108, 97, 115, 115, 105, 99, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 32, 32, 116, 105, 109, 101, 108, 105, 110, 101, 45, 99, 108, 97, 115, 115, 105, 99, 32, 99, 111, 114, 114, 101, 115, 112, 111, 110, 100, 115, 32, 116, 111, 32, 99, 108, 97, 115, 115, 105, 99, 32, 116, 105, 109, 101, 108, 105, 110, 101, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 92, 110, 105, 110, 32, 116, 104, 101, 32, 112, 97, 112, 101, 114, 92, 110, 65, 32, 112, 114, 105, 109, 105, 116, 105, 118, 101, 32, 116, 105, 109, 101, 108, 105, 110, 101, 32, 105, 115, 32, 97, 108, 115, 111, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 105, 110, 32, 97, 32, 115, 101, 112, 97, 114, 97, 116, 101, 32, 119, 111, 114, 107, 101, 114, 47, 115, 101, 114, 118, 101, 114, 34, 125, 44, 34, 116, 105, 109, 101, 108, 105, 110, 101, 45, 115, 112, 101, 99, 105, 102, 105, 99, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 32, 102, 105, 108, 116, 101, 114, 101, 100, 32, 116, 105, 109, 101, 108, 105, 110, 101, 32, 105, 115, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 32, 111, 110, 32, 115, 116, 97, 116, 101, 32, 100, 121, 110, 97, 109, 105, 99, 32, 116, 105, 109, 101, 108, 105, 110, 101, 115, 92, 110, 97, 112, 112, 108, 105, 101, 100, 32, 119, 105, 116, 104, 32, 97, 110, 32, 101, 118, 101, 110, 116, 32, 102, 105, 108, 116, 101, 114, 92, 110, 84, 76, 72, 97, 115, 69, 120, 105, 115, 116, 101, 100, 87, 105, 116, 104, 73, 110, 40, 99, 111, 108, 40, 92, 34, 117, 115, 101, 114, 65, 99, 116, 105, 111, 110, 92, 34, 32, 41, 32, 61, 61, 32, 92, 34, 115, 101, 101, 107, 92, 34, 41, 92, 110, 115, 101, 101, 107, 32, 97, 110, 100, 32, 99, 111, 108, 40, 92, 34, 117, 115, 101, 114, 65, 99, 116, 105, 111, 110, 41, 32, 105, 115, 32, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 92, 110, 97, 110, 100, 32, 61, 61, 32, 105, 115, 32, 102, 105, 108, 116, 101, 114, 45, 111, 112, 92, 110, 65, 32, 102, 105, 108, 116, 101, 114, 101, 100, 32, 116, 105, 109, 101, 108, 105, 110, 101, 32, 105, 115, 32, 97, 108, 115, 111, 32, 109, 97, 105, 110, 116, 97, 105, 110, 101, 100, 32, 105, 110, 32, 97, 32, 115, 101, 112, 97, 114, 97, 116, 101, 32, 119, 111, 114, 107, 101, 114, 47, 115, 101, 114, 118, 101, 114, 34, 125, 125, 125, 125, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
