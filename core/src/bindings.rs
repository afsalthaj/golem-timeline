// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod timeline {
    #[allow(dead_code)]
    pub mod event_processor {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum EventValue {
                StringValue(_rt::String),
                IntValue(i64),
                FloatValue(f64),
                BoolValue(bool),
            }
            impl ::core::fmt::Debug for EventValue {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        EventValue::StringValue(e) => {
                            f.debug_tuple("EventValue::StringValue").field(e).finish()
                        }
                        EventValue::IntValue(e) => {
                            f.debug_tuple("EventValue::IntValue").field(e).finish()
                        }
                        EventValue::FloatValue(e) => {
                            f.debug_tuple("EventValue::FloatValue").field(e).finish()
                        }
                        EventValue::BoolValue(e) => {
                            f.debug_tuple("EventValue::BoolValue").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct Event {
                pub time: u64,
                pub event: _rt::Vec<(_rt::String, EventValue)>,
            }
            impl ::core::fmt::Debug for Event {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Event")
                        .field("time", &self.time)
                        .field("event", &self.event)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct TimePeriod {
                pub t1: u64,
                pub t2: Option<u64>,
            }
            impl ::core::fmt::Debug for TimePeriod {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TimePeriod")
                        .field("t1", &self.t1)
                        .field("t2", &self.t2)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TimelineResultPoint {
                pub time_period: TimePeriod,
                pub value: EventValue,
            }
            impl ::core::fmt::Debug for TimelineResultPoint {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TimelineResultPoint")
                        .field("time-period", &self.time_period)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TimelineResult {
                pub results: _rt::Vec<TimelineResultPoint>,
            }
            impl ::core::fmt::Debug for TimelineResult {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TimelineResult").field("results", &self.results).finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum EventPredicateOp {
                Equal,
                GreaterThan,
                LessThan,
            }
            impl ::core::fmt::Debug for EventPredicateOp {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        EventPredicateOp::Equal => {
                            f.debug_tuple("EventPredicateOp::Equal").finish()
                        }
                        EventPredicateOp::GreaterThan => {
                            f.debug_tuple("EventPredicateOp::GreaterThan").finish()
                        }
                        EventPredicateOp::LessThan => {
                            f.debug_tuple("EventPredicateOp::LessThan").finish()
                        }
                    }
                }
            }

            impl EventPredicateOp {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> EventPredicateOp {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => EventPredicateOp::Equal,
                        1 => EventPredicateOp::GreaterThan,
                        2 => EventPredicateOp::LessThan,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct EventPredicate {
                pub col_name: _rt::String,
                pub value: EventValue,
                pub op: EventPredicateOp,
            }
            impl ::core::fmt::Debug for EventPredicate {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("EventPredicate")
                        .field("col-name", &self.col_name)
                        .field("value", &self.value)
                        .field("op", &self.op)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_latest_event_state(
                event_col_name: &str,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let vec0 = event_col_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-latest-event-state"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                    match l2 {
                        0 => {
                            let e = {
                                let l3 = *ptr1.add(4).cast::<*mut u8>();
                                let l4 = *ptr1.add(8).cast::<usize>();
                                let len5 = l4;
                                let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                _rt::string_lift(bytes5)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = *ptr1.add(4).cast::<*mut u8>();
                                let l7 = *ptr1.add(8).cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                _rt::string_lift(bytes8)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_tl_has_existed(
                event_predicate: &EventPredicate,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let EventPredicate { col_name: col_name0, value: value0, op: op0 } =
                        event_predicate;
                    let vec1 = col_name0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result3_0, result3_1, result3_2) = match value0 {
                        EventValue::StringValue(e) => {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();

                            (
                                0i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr2.cast_mut());
                                    t
                                },
                                len2,
                            )
                        }
                        EventValue::IntValue(e) => {
                            (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                        }
                        EventValue::FloatValue(e) => (
                            2i32,
                            ::core::mem::MaybeUninit::new((_rt::as_f64(e)).to_bits() as i64 as u64),
                            0usize,
                        ),
                        EventValue::BoolValue(e) => (
                            3i32,
                            ::core::mem::MaybeUninit::new(i64::from(match e {
                                true => 1,
                                false => 0,
                            }) as u64),
                            0usize,
                        ),
                    };
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-tl-has-existed"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr1.cast_mut(),
                        len1,
                        result3_0,
                        result3_1,
                        result3_2,
                        op0.clone() as i32,
                        ptr4,
                    );
                    let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                    match l5 {
                        0 => {
                            let e = {
                                let l6 = *ptr4.add(4).cast::<*mut u8>();
                                let l7 = *ptr4.add(8).cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                _rt::string_lift(bytes8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l9 = *ptr4.add(4).cast::<*mut u8>();
                                let l10 = *ptr4.add(8).cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                                _rt::string_lift(bytes11)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_tl_has_existed_within(
                event_predicate: &EventPredicate,
                time: u64,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let EventPredicate { col_name: col_name0, value: value0, op: op0 } =
                        event_predicate;
                    let vec1 = col_name0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let (result3_0, result3_1, result3_2) = match value0 {
                        EventValue::StringValue(e) => {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();

                            (
                                0i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr2.cast_mut());
                                    t
                                },
                                len2,
                            )
                        }
                        EventValue::IntValue(e) => {
                            (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                        }
                        EventValue::FloatValue(e) => (
                            2i32,
                            ::core::mem::MaybeUninit::new((_rt::as_f64(e)).to_bits() as i64 as u64),
                            0usize,
                        ),
                        EventValue::BoolValue(e) => (
                            3i32,
                            ::core::mem::MaybeUninit::new(i64::from(match e {
                                true => 1,
                                false => 0,
                            }) as u64),
                            0usize,
                        ),
                    };
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-tl-has-existed-within"]
                        fn wit_import(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: i64,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: i64,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        ptr1.cast_mut(),
                        len1,
                        result3_0,
                        result3_1,
                        result3_2,
                        op0.clone() as i32,
                        _rt::as_i64(&time),
                        ptr4,
                    );
                    let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                    match l5 {
                        0 => {
                            let e = {
                                let l6 = *ptr4.add(4).cast::<*mut u8>();
                                let l7 = *ptr4.add(8).cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                _rt::string_lift(bytes8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l9 = *ptr4.add(4).cast::<*mut u8>();
                                let l10 = *ptr4.add(8).cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                                _rt::string_lift(bytes11)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn add_event(event: &Event) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let Event { time: time0, event: event0 } = event;
                    let vec4 = event0;
                    let len4 = vec4.len();
                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(vec4.len() * 24, 8);
                    let result4 = if layout4.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout4);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec4.into_iter().enumerate() {
                        let base = result4.add(i * 24);
                        {
                            let (t1_0, t1_1) = e;
                            let vec2 = t1_0;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base.add(4).cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                            match t1_1 {
                                EventValue::StringValue(e) => {
                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec3 = e;
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    *base.add(20).cast::<usize>() = len3;
                                    *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                EventValue::IntValue(e) => {
                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                    *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                }
                                EventValue::FloatValue(e) => {
                                    *base.add(8).cast::<u8>() = (2i32) as u8;
                                    *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                }
                                EventValue::BoolValue(e) => {
                                    *base.add(8).cast::<u8>() = (3i32) as u8;
                                    *base.add(16).cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    })
                                        as u8;
                                }
                            }
                        }
                    }
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "add-event"]
                        fn wit_import(_: i64, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(time0), result4, len4, ptr5);
                    let l6 = i32::from(*ptr5.add(0).cast::<u8>());
                    if layout4.size() != 0 {
                        _rt::alloc::dealloc(result4.cast(), layout4);
                    }
                    match l6 {
                        0 => {
                            let e = {
                                let l7 = *ptr5.add(4).cast::<*mut u8>();
                                let l8 = *ptr5.add(8).cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                _rt::string_lift(bytes9)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l10 = *ptr5.add(4).cast::<*mut u8>();
                                let l11 = *ptr5.add(8).cast::<usize>();
                                let len12 = l11;
                                let bytes12 = _rt::Vec::from_raw_parts(l10.cast(), len12, len12);

                                _rt::string_lift(bytes12)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn latest_event_to_state(t1: u64) -> Result<TimelineResult, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "latest-event-to-state"]
                        fn wit_import(_: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&t1), ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<*mut u8>();
                                let l3 = *ptr0.add(8).cast::<usize>();
                                let base15 = l2;
                                let len15 = l3;
                                let mut result15 = _rt::Vec::with_capacity(len15);
                                for i in 0..len15 {
                                    let base = base15.add(i * 40);
                                    let e15 = {
                                        let l4 = *base.add(0).cast::<i64>();
                                        let l5 = i32::from(*base.add(8).cast::<u8>());
                                        let l7 = i32::from(*base.add(24).cast::<u8>());
                                        let v14 = match l7 {
                                            0 => {
                                                let e14 = {
                                                    let l8 = *base.add(32).cast::<*mut u8>();
                                                    let l9 = *base.add(36).cast::<usize>();
                                                    let len10 = l9;
                                                    let bytes10 = _rt::Vec::from_raw_parts(
                                                        l8.cast(),
                                                        len10,
                                                        len10,
                                                    );

                                                    _rt::string_lift(bytes10)
                                                };
                                                EventValue::StringValue(e14)
                                            }
                                            1 => {
                                                let e14 = {
                                                    let l11 = *base.add(32).cast::<i64>();

                                                    l11
                                                };
                                                EventValue::IntValue(e14)
                                            }
                                            2 => {
                                                let e14 = {
                                                    let l12 = *base.add(32).cast::<f64>();

                                                    l12
                                                };
                                                EventValue::FloatValue(e14)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                let e14 = {
                                                    let l13 = i32::from(*base.add(32).cast::<u8>());

                                                    _rt::bool_lift(l13 as u8)
                                                };
                                                EventValue::BoolValue(e14)
                                            }
                                        };

                                        TimelineResultPoint {
                                            time_period: TimePeriod {
                                                t1: l4 as u64,
                                                t2: match l5 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l6 = *base.add(16).cast::<i64>();

                                                            l6 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            value: v14,
                                        }
                                    };
                                    result15.push(e15);
                                }
                                _rt::cabi_dealloc(base15, len15 * 40, 8);

                                TimelineResult { results: result15 }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l16 = *ptr0.add(4).cast::<*mut u8>();
                                let l17 = *ptr0.add(8).cast::<usize>();
                                let len18 = l17;
                                let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                _rt::string_lift(bytes18)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn tl_has_existed(t1: u64) -> Result<TimelineResult, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "tl-has-existed"]
                        fn wit_import(_: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&t1), ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<*mut u8>();
                                let l3 = *ptr0.add(8).cast::<usize>();
                                let base15 = l2;
                                let len15 = l3;
                                let mut result15 = _rt::Vec::with_capacity(len15);
                                for i in 0..len15 {
                                    let base = base15.add(i * 40);
                                    let e15 = {
                                        let l4 = *base.add(0).cast::<i64>();
                                        let l5 = i32::from(*base.add(8).cast::<u8>());
                                        let l7 = i32::from(*base.add(24).cast::<u8>());
                                        let v14 = match l7 {
                                            0 => {
                                                let e14 = {
                                                    let l8 = *base.add(32).cast::<*mut u8>();
                                                    let l9 = *base.add(36).cast::<usize>();
                                                    let len10 = l9;
                                                    let bytes10 = _rt::Vec::from_raw_parts(
                                                        l8.cast(),
                                                        len10,
                                                        len10,
                                                    );

                                                    _rt::string_lift(bytes10)
                                                };
                                                EventValue::StringValue(e14)
                                            }
                                            1 => {
                                                let e14 = {
                                                    let l11 = *base.add(32).cast::<i64>();

                                                    l11
                                                };
                                                EventValue::IntValue(e14)
                                            }
                                            2 => {
                                                let e14 = {
                                                    let l12 = *base.add(32).cast::<f64>();

                                                    l12
                                                };
                                                EventValue::FloatValue(e14)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                let e14 = {
                                                    let l13 = i32::from(*base.add(32).cast::<u8>());

                                                    _rt::bool_lift(l13 as u8)
                                                };
                                                EventValue::BoolValue(e14)
                                            }
                                        };

                                        TimelineResultPoint {
                                            time_period: TimePeriod {
                                                t1: l4 as u64,
                                                t2: match l5 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l6 = *base.add(16).cast::<i64>();

                                                            l6 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            value: v14,
                                        }
                                    };
                                    result15.push(e15);
                                }
                                _rt::cabi_dealloc(base15, len15 * 40, 8);

                                TimelineResult { results: result15 }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l16 = *ptr0.add(4).cast::<*mut u8>();
                                let l17 = *ptr0.add(8).cast::<usize>();
                                let len18 = l17;
                                let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                _rt::string_lift(bytes18)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn tl_has_existed_within(t1: u64) -> Result<TimelineResult, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:event-processor/api")]
                    extern "C" {
                        #[link_name = "tl-has-existed-within"]
                        fn wit_import(_: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&t1), ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<*mut u8>();
                                let l3 = *ptr0.add(8).cast::<usize>();
                                let base15 = l2;
                                let len15 = l3;
                                let mut result15 = _rt::Vec::with_capacity(len15);
                                for i in 0..len15 {
                                    let base = base15.add(i * 40);
                                    let e15 = {
                                        let l4 = *base.add(0).cast::<i64>();
                                        let l5 = i32::from(*base.add(8).cast::<u8>());
                                        let l7 = i32::from(*base.add(24).cast::<u8>());
                                        let v14 = match l7 {
                                            0 => {
                                                let e14 = {
                                                    let l8 = *base.add(32).cast::<*mut u8>();
                                                    let l9 = *base.add(36).cast::<usize>();
                                                    let len10 = l9;
                                                    let bytes10 = _rt::Vec::from_raw_parts(
                                                        l8.cast(),
                                                        len10,
                                                        len10,
                                                    );

                                                    _rt::string_lift(bytes10)
                                                };
                                                EventValue::StringValue(e14)
                                            }
                                            1 => {
                                                let e14 = {
                                                    let l11 = *base.add(32).cast::<i64>();

                                                    l11
                                                };
                                                EventValue::IntValue(e14)
                                            }
                                            2 => {
                                                let e14 = {
                                                    let l12 = *base.add(32).cast::<f64>();

                                                    l12
                                                };
                                                EventValue::FloatValue(e14)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                let e14 = {
                                                    let l13 = i32::from(*base.add(32).cast::<u8>());

                                                    _rt::bool_lift(l13 as u8)
                                                };
                                                EventValue::BoolValue(e14)
                                            }
                                        };

                                        TimelineResultPoint {
                                            time_period: TimePeriod {
                                                t1: l4 as u64,
                                                t2: match l5 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l6 = *base.add(16).cast::<i64>();

                                                            l6 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            },
                                            value: v14,
                                        }
                                    };
                                    result15.push(e15);
                                }
                                _rt::cabi_dealloc(base15, len15 * 40, 8);

                                TimelineResult { results: result15 }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l16 = *ptr0.add(4).cast::<*mut u8>();
                                let l17 = *ptr0.add(8).cast::<usize>();
                                let len18 = l17;
                                let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                _rt::string_lift(bytes18)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod timeline_processor {
        #[allow(dead_code, clippy::all)]
        pub mod api {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type EventValue = super::super::super::timeline::event_processor::api::EventValue;
            pub type TimelineResult =
                super::super::super::timeline::event_processor::api::TimelineResult;
            #[derive(Clone)]
            pub struct TimelineResultWorker {
                pub worker_id: _rt::String,
                pub template_id: _rt::String,
            }
            impl ::core::fmt::Debug for TimelineResultWorker {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("TimelineResultWorker")
                        .field("worker-id", &self.worker_id)
                        .field("template-id", &self.template_id)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum LeafTimelineNode {
                TlHasExisted(TimelineResultWorker),
                TlHasExistedWithin(TimelineResultWorker),
                TlLatestEventToState(TimelineResultWorker),
            }
            impl ::core::fmt::Debug for LeafTimelineNode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        LeafTimelineNode::TlHasExisted(e) => {
                            f.debug_tuple("LeafTimelineNode::TlHasExisted").field(e).finish()
                        }
                        LeafTimelineNode::TlHasExistedWithin(e) => {
                            f.debug_tuple("LeafTimelineNode::TlHasExistedWithin").field(e).finish()
                        }
                        LeafTimelineNode::TlLatestEventToState(e) => f
                            .debug_tuple("LeafTimelineNode::TlLatestEventToState")
                            .field(e)
                            .finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub enum DerivedTimelineNode {
                EqualTo(TimelineResultWorker),
                GreaterThan(TimelineResultWorker),
                GreaterThanOrEqualTo(TimelineResultWorker),
                LessThan(TimelineResultWorker),
                LessThanOrEqualTo(TimelineResultWorker),
                And(TimelineResultWorker),
                Or(TimelineResultWorker),
                Not(TimelineResultWorker),
            }
            impl ::core::fmt::Debug for DerivedTimelineNode {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        DerivedTimelineNode::EqualTo(e) => {
                            f.debug_tuple("DerivedTimelineNode::EqualTo").field(e).finish()
                        }
                        DerivedTimelineNode::GreaterThan(e) => {
                            f.debug_tuple("DerivedTimelineNode::GreaterThan").field(e).finish()
                        }
                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => f
                            .debug_tuple("DerivedTimelineNode::GreaterThanOrEqualTo")
                            .field(e)
                            .finish(),
                        DerivedTimelineNode::LessThan(e) => {
                            f.debug_tuple("DerivedTimelineNode::LessThan").field(e).finish()
                        }
                        DerivedTimelineNode::LessThanOrEqualTo(e) => f
                            .debug_tuple("DerivedTimelineNode::LessThanOrEqualTo")
                            .field(e)
                            .finish(),
                        DerivedTimelineNode::And(e) => {
                            f.debug_tuple("DerivedTimelineNode::And").field(e).finish()
                        }
                        DerivedTimelineNode::Or(e) => {
                            f.debug_tuple("DerivedTimelineNode::Or").field(e).finish()
                        }
                        DerivedTimelineNode::Not(e) => {
                            f.debug_tuple("DerivedTimelineNode::Not").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub enum TypedTimelineResultWorker {
                LeafTimeline(LeafTimelineNode),
                DerivedTimeline(DerivedTimelineNode),
            }
            impl ::core::fmt::Debug for TypedTimelineResultWorker {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        TypedTimelineResultWorker::LeafTimeline(e) => f
                            .debug_tuple("TypedTimelineResultWorker::LeafTimeline")
                            .field(e)
                            .finish(),
                        TypedTimelineResultWorker::DerivedTimeline(e) => f
                            .debug_tuple("TypedTimelineResultWorker::DerivedTimeline")
                            .field(e)
                            .finish(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_equal(
                child_worker: &TypedTimelineResultWorker,
                event_value: &EventValue,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let (result35_0, result35_1, result35_2, result35_3, result35_4, result35_5) =
                        match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                    use super::super::super::timeline::event_processor::api::EventValue as V37;
                    let (result38_0, result38_1, result38_2) = match event_value {
                        V37::StringValue(e) => {
                            let vec36 = e;
                            let ptr36 = vec36.as_ptr().cast::<u8>();
                            let len36 = vec36.len();

                            (
                                0i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr36.cast_mut());
                                    t
                                },
                                len36,
                            )
                        }
                        V37::IntValue(e) => {
                            (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                        }
                        V37::FloatValue(e) => (
                            2i32,
                            ::core::mem::MaybeUninit::new((_rt::as_f64(e)).to_bits() as i64 as u64),
                            0usize,
                        ),
                        V37::BoolValue(e) => (
                            3i32,
                            ::core::mem::MaybeUninit::new(i64::from(match e {
                                true => 1,
                                false => 0,
                            }) as u64),
                            0usize,
                        ),
                    };
                    let ptr39 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:timeline-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-equal"]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        result35_0, result35_1, result35_2, result35_3, result35_4, result35_5,
                        result38_0, result38_1, result38_2, ptr39,
                    );
                    let l40 = i32::from(*ptr39.add(0).cast::<u8>());
                    match l40 {
                        0 => {
                            let e = {
                                let l41 = *ptr39.add(4).cast::<*mut u8>();
                                let l42 = *ptr39.add(8).cast::<usize>();
                                let len43 = l42;
                                let bytes43 = _rt::Vec::from_raw_parts(l41.cast(), len43, len43);

                                _rt::string_lift(bytes43)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l44 = *ptr39.add(4).cast::<*mut u8>();
                                let l45 = *ptr39.add(8).cast::<usize>();
                                let len46 = l45;
                                let bytes46 = _rt::Vec::from_raw_parts(l44.cast(), len46, len46);

                                _rt::string_lift(bytes46)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_greater_than(
                child_worker: &TypedTimelineResultWorker,
                event_value: &EventValue,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let (result35_0, result35_1, result35_2, result35_3, result35_4, result35_5) =
                        match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                    use super::super::super::timeline::event_processor::api::EventValue as V37;
                    let (result38_0, result38_1, result38_2) = match event_value {
                        V37::StringValue(e) => {
                            let vec36 = e;
                            let ptr36 = vec36.as_ptr().cast::<u8>();
                            let len36 = vec36.len();

                            (
                                0i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr36.cast_mut());
                                    t
                                },
                                len36,
                            )
                        }
                        V37::IntValue(e) => {
                            (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                        }
                        V37::FloatValue(e) => (
                            2i32,
                            ::core::mem::MaybeUninit::new((_rt::as_f64(e)).to_bits() as i64 as u64),
                            0usize,
                        ),
                        V37::BoolValue(e) => (
                            3i32,
                            ::core::mem::MaybeUninit::new(i64::from(match e {
                                true => 1,
                                false => 0,
                            }) as u64),
                            0usize,
                        ),
                    };
                    let ptr39 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:timeline-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-greater-than"]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        result35_0, result35_1, result35_2, result35_3, result35_4, result35_5,
                        result38_0, result38_1, result38_2, ptr39,
                    );
                    let l40 = i32::from(*ptr39.add(0).cast::<u8>());
                    match l40 {
                        0 => {
                            let e = {
                                let l41 = *ptr39.add(4).cast::<*mut u8>();
                                let l42 = *ptr39.add(8).cast::<usize>();
                                let len43 = l42;
                                let bytes43 = _rt::Vec::from_raw_parts(l41.cast(), len43, len43);

                                _rt::string_lift(bytes43)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l44 = *ptr39.add(4).cast::<*mut u8>();
                                let l45 = *ptr39.add(8).cast::<usize>();
                                let len46 = l45;
                                let bytes46 = _rt::Vec::from_raw_parts(l44.cast(), len46, len46);

                                _rt::string_lift(bytes46)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_greater_than_or_equal_to(
                child_worker: &TypedTimelineResultWorker,
                event_value: &EventValue,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let (result35_0, result35_1, result35_2, result35_3, result35_4, result35_5) =
                        match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                    use super::super::super::timeline::event_processor::api::EventValue as V37;
                    let (result38_0, result38_1, result38_2) = match event_value {
                        V37::StringValue(e) => {
                            let vec36 = e;
                            let ptr36 = vec36.as_ptr().cast::<u8>();
                            let len36 = vec36.len();

                            (
                                0i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr36.cast_mut());
                                    t
                                },
                                len36,
                            )
                        }
                        V37::IntValue(e) => {
                            (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                        }
                        V37::FloatValue(e) => (
                            2i32,
                            ::core::mem::MaybeUninit::new((_rt::as_f64(e)).to_bits() as i64 as u64),
                            0usize,
                        ),
                        V37::BoolValue(e) => (
                            3i32,
                            ::core::mem::MaybeUninit::new(i64::from(match e {
                                true => 1,
                                false => 0,
                            }) as u64),
                            0usize,
                        ),
                    };
                    let ptr39 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:timeline-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-greater-than-or-equal-to"]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        result35_0, result35_1, result35_2, result35_3, result35_4, result35_5,
                        result38_0, result38_1, result38_2, ptr39,
                    );
                    let l40 = i32::from(*ptr39.add(0).cast::<u8>());
                    match l40 {
                        0 => {
                            let e = {
                                let l41 = *ptr39.add(4).cast::<*mut u8>();
                                let l42 = *ptr39.add(8).cast::<usize>();
                                let len43 = l42;
                                let bytes43 = _rt::Vec::from_raw_parts(l41.cast(), len43, len43);

                                _rt::string_lift(bytes43)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l44 = *ptr39.add(4).cast::<*mut u8>();
                                let l45 = *ptr39.add(8).cast::<usize>();
                                let len46 = l45;
                                let bytes46 = _rt::Vec::from_raw_parts(l44.cast(), len46, len46);

                                _rt::string_lift(bytes46)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_less_than(
                child_worker: &TypedTimelineResultWorker,
                event_value: &EventValue,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let (result35_0, result35_1, result35_2, result35_3, result35_4, result35_5) =
                        match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                    use super::super::super::timeline::event_processor::api::EventValue as V37;
                    let (result38_0, result38_1, result38_2) = match event_value {
                        V37::StringValue(e) => {
                            let vec36 = e;
                            let ptr36 = vec36.as_ptr().cast::<u8>();
                            let len36 = vec36.len();

                            (
                                0i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr36.cast_mut());
                                    t
                                },
                                len36,
                            )
                        }
                        V37::IntValue(e) => {
                            (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                        }
                        V37::FloatValue(e) => (
                            2i32,
                            ::core::mem::MaybeUninit::new((_rt::as_f64(e)).to_bits() as i64 as u64),
                            0usize,
                        ),
                        V37::BoolValue(e) => (
                            3i32,
                            ::core::mem::MaybeUninit::new(i64::from(match e {
                                true => 1,
                                false => 0,
                            }) as u64),
                            0usize,
                        ),
                    };
                    let ptr39 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:timeline-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-less-than"]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        result35_0, result35_1, result35_2, result35_3, result35_4, result35_5,
                        result38_0, result38_1, result38_2, ptr39,
                    );
                    let l40 = i32::from(*ptr39.add(0).cast::<u8>());
                    match l40 {
                        0 => {
                            let e = {
                                let l41 = *ptr39.add(4).cast::<*mut u8>();
                                let l42 = *ptr39.add(8).cast::<usize>();
                                let len43 = l42;
                                let bytes43 = _rt::Vec::from_raw_parts(l41.cast(), len43, len43);

                                _rt::string_lift(bytes43)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l44 = *ptr39.add(4).cast::<*mut u8>();
                                let l45 = *ptr39.add(8).cast::<usize>();
                                let len46 = l45;
                                let bytes46 = _rt::Vec::from_raw_parts(l44.cast(), len46, len46);

                                _rt::string_lift(bytes46)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_less_than_or_equal_to(
                child_worker: &TypedTimelineResultWorker,
                event_value: &EventValue,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let (result35_0, result35_1, result35_2, result35_3, result35_4, result35_5) =
                        match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                    use super::super::super::timeline::event_processor::api::EventValue as V37;
                    let (result38_0, result38_1, result38_2) = match event_value {
                        V37::StringValue(e) => {
                            let vec36 = e;
                            let ptr36 = vec36.as_ptr().cast::<u8>();
                            let len36 = vec36.len();

                            (
                                0i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr36.cast_mut());
                                    t
                                },
                                len36,
                            )
                        }
                        V37::IntValue(e) => {
                            (1i32, ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64), 0usize)
                        }
                        V37::FloatValue(e) => (
                            2i32,
                            ::core::mem::MaybeUninit::new((_rt::as_f64(e)).to_bits() as i64 as u64),
                            0usize,
                        ),
                        V37::BoolValue(e) => (
                            3i32,
                            ::core::mem::MaybeUninit::new(i64::from(match e {
                                true => 1,
                                false => 0,
                            }) as u64),
                            0usize,
                        ),
                    };
                    let ptr39 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:timeline-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-less-than-or-equal-to"]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        result35_0, result35_1, result35_2, result35_3, result35_4, result35_5,
                        result38_0, result38_1, result38_2, ptr39,
                    );
                    let l40 = i32::from(*ptr39.add(0).cast::<u8>());
                    match l40 {
                        0 => {
                            let e = {
                                let l41 = *ptr39.add(4).cast::<*mut u8>();
                                let l42 = *ptr39.add(8).cast::<usize>();
                                let len43 = l42;
                                let bytes43 = _rt::Vec::from_raw_parts(l41.cast(), len43, len43);

                                _rt::string_lift(bytes43)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l44 = *ptr39.add(4).cast::<*mut u8>();
                                let l45 = *ptr39.add(8).cast::<usize>();
                                let len46 = l45;
                                let bytes46 = _rt::Vec::from_raw_parts(l44.cast(), len46, len46);

                                _rt::string_lift(bytes46)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_and(
                child_worker1: &TypedTimelineResultWorker,
                child_worker2: &TypedTimelineResultWorker,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let (result35_0, result35_1, result35_2, result35_3, result35_4, result35_5) =
                        match child_worker1 {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                    let (result71_0, result71_1, result71_2, result71_3, result71_4, result71_5) =
                        match child_worker2 {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result45_0, result45_1, result45_2, result45_3, result45_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id36,
                                                template_id: template_id36,
                                            } = e;
                                            let vec37 = worker_id36;
                                            let ptr37 = vec37.as_ptr().cast::<u8>();
                                            let len37 = vec37.len();
                                            let vec38 = template_id36;
                                            let ptr38 = vec38.as_ptr().cast::<u8>();
                                            let len38 = vec38.len();

                                            (0i32, ptr37.cast_mut(), len37, ptr38.cast_mut(), len38)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id39,
                                                template_id: template_id39,
                                            } = e;
                                            let vec40 = worker_id39;
                                            let ptr40 = vec40.as_ptr().cast::<u8>();
                                            let len40 = vec40.len();
                                            let vec41 = template_id39;
                                            let ptr41 = vec41.as_ptr().cast::<u8>();
                                            let len41 = vec41.len();

                                            (1i32, ptr40.cast_mut(), len40, ptr41.cast_mut(), len41)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id42,
                                                template_id: template_id42,
                                            } = e;
                                            let vec43 = worker_id42;
                                            let ptr43 = vec43.as_ptr().cast::<u8>();
                                            let len43 = vec43.len();
                                            let vec44 = template_id42;
                                            let ptr44 = vec44.as_ptr().cast::<u8>();
                                            let len44 = vec44.len();

                                            (2i32, ptr43.cast_mut(), len43, ptr44.cast_mut(), len44)
                                        }
                                    };

                                (0i32, result45_0, result45_1, result45_2, result45_3, result45_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result70_0, result70_1, result70_2, result70_3, result70_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id46,
                                                template_id: template_id46,
                                            } = e;
                                            let vec47 = worker_id46;
                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                            let len47 = vec47.len();
                                            let vec48 = template_id46;
                                            let ptr48 = vec48.as_ptr().cast::<u8>();
                                            let len48 = vec48.len();

                                            (0i32, ptr47.cast_mut(), len47, ptr48.cast_mut(), len48)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id49,
                                                template_id: template_id49,
                                            } = e;
                                            let vec50 = worker_id49;
                                            let ptr50 = vec50.as_ptr().cast::<u8>();
                                            let len50 = vec50.len();
                                            let vec51 = template_id49;
                                            let ptr51 = vec51.as_ptr().cast::<u8>();
                                            let len51 = vec51.len();

                                            (1i32, ptr50.cast_mut(), len50, ptr51.cast_mut(), len51)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id52,
                                                template_id: template_id52,
                                            } = e;
                                            let vec53 = worker_id52;
                                            let ptr53 = vec53.as_ptr().cast::<u8>();
                                            let len53 = vec53.len();
                                            let vec54 = template_id52;
                                            let ptr54 = vec54.as_ptr().cast::<u8>();
                                            let len54 = vec54.len();

                                            (2i32, ptr53.cast_mut(), len53, ptr54.cast_mut(), len54)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id55,
                                                template_id: template_id55,
                                            } = e;
                                            let vec56 = worker_id55;
                                            let ptr56 = vec56.as_ptr().cast::<u8>();
                                            let len56 = vec56.len();
                                            let vec57 = template_id55;
                                            let ptr57 = vec57.as_ptr().cast::<u8>();
                                            let len57 = vec57.len();

                                            (3i32, ptr56.cast_mut(), len56, ptr57.cast_mut(), len57)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id58,
                                                template_id: template_id58,
                                            } = e;
                                            let vec59 = worker_id58;
                                            let ptr59 = vec59.as_ptr().cast::<u8>();
                                            let len59 = vec59.len();
                                            let vec60 = template_id58;
                                            let ptr60 = vec60.as_ptr().cast::<u8>();
                                            let len60 = vec60.len();

                                            (4i32, ptr59.cast_mut(), len59, ptr60.cast_mut(), len60)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id61,
                                                template_id: template_id61,
                                            } = e;
                                            let vec62 = worker_id61;
                                            let ptr62 = vec62.as_ptr().cast::<u8>();
                                            let len62 = vec62.len();
                                            let vec63 = template_id61;
                                            let ptr63 = vec63.as_ptr().cast::<u8>();
                                            let len63 = vec63.len();

                                            (5i32, ptr62.cast_mut(), len62, ptr63.cast_mut(), len63)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id64,
                                                template_id: template_id64,
                                            } = e;
                                            let vec65 = worker_id64;
                                            let ptr65 = vec65.as_ptr().cast::<u8>();
                                            let len65 = vec65.len();
                                            let vec66 = template_id64;
                                            let ptr66 = vec66.as_ptr().cast::<u8>();
                                            let len66 = vec66.len();

                                            (6i32, ptr65.cast_mut(), len65, ptr66.cast_mut(), len66)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id67,
                                                template_id: template_id67,
                                            } = e;
                                            let vec68 = worker_id67;
                                            let ptr68 = vec68.as_ptr().cast::<u8>();
                                            let len68 = vec68.len();
                                            let vec69 = template_id67;
                                            let ptr69 = vec69.as_ptr().cast::<u8>();
                                            let len69 = vec69.len();

                                            (7i32, ptr68.cast_mut(), len68, ptr69.cast_mut(), len69)
                                        }
                                    };

                                (1i32, result70_0, result70_1, result70_2, result70_3, result70_4)
                            }
                        };
                    let ptr72 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:timeline-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-and"]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        result35_0, result35_1, result35_2, result35_3, result35_4, result35_5,
                        result71_0, result71_1, result71_2, result71_3, result71_4, result71_5,
                        ptr72,
                    );
                    let l73 = i32::from(*ptr72.add(0).cast::<u8>());
                    match l73 {
                        0 => {
                            let e = {
                                let l74 = *ptr72.add(4).cast::<*mut u8>();
                                let l75 = *ptr72.add(8).cast::<usize>();
                                let len76 = l75;
                                let bytes76 = _rt::Vec::from_raw_parts(l74.cast(), len76, len76);

                                _rt::string_lift(bytes76)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l77 = *ptr72.add(4).cast::<*mut u8>();
                                let l78 = *ptr72.add(8).cast::<usize>();
                                let len79 = l78;
                                let bytes79 = _rt::Vec::from_raw_parts(l77.cast(), len79, len79);

                                _rt::string_lift(bytes79)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_or(
                child_worker1: &TypedTimelineResultWorker,
                child_worker2: &TypedTimelineResultWorker,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let (result35_0, result35_1, result35_2, result35_3, result35_4, result35_5) =
                        match child_worker1 {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                    let (result71_0, result71_1, result71_2, result71_3, result71_4, result71_5) =
                        match child_worker2 {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result45_0, result45_1, result45_2, result45_3, result45_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id36,
                                                template_id: template_id36,
                                            } = e;
                                            let vec37 = worker_id36;
                                            let ptr37 = vec37.as_ptr().cast::<u8>();
                                            let len37 = vec37.len();
                                            let vec38 = template_id36;
                                            let ptr38 = vec38.as_ptr().cast::<u8>();
                                            let len38 = vec38.len();

                                            (0i32, ptr37.cast_mut(), len37, ptr38.cast_mut(), len38)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id39,
                                                template_id: template_id39,
                                            } = e;
                                            let vec40 = worker_id39;
                                            let ptr40 = vec40.as_ptr().cast::<u8>();
                                            let len40 = vec40.len();
                                            let vec41 = template_id39;
                                            let ptr41 = vec41.as_ptr().cast::<u8>();
                                            let len41 = vec41.len();

                                            (1i32, ptr40.cast_mut(), len40, ptr41.cast_mut(), len41)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id42,
                                                template_id: template_id42,
                                            } = e;
                                            let vec43 = worker_id42;
                                            let ptr43 = vec43.as_ptr().cast::<u8>();
                                            let len43 = vec43.len();
                                            let vec44 = template_id42;
                                            let ptr44 = vec44.as_ptr().cast::<u8>();
                                            let len44 = vec44.len();

                                            (2i32, ptr43.cast_mut(), len43, ptr44.cast_mut(), len44)
                                        }
                                    };

                                (0i32, result45_0, result45_1, result45_2, result45_3, result45_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result70_0, result70_1, result70_2, result70_3, result70_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id46,
                                                template_id: template_id46,
                                            } = e;
                                            let vec47 = worker_id46;
                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                            let len47 = vec47.len();
                                            let vec48 = template_id46;
                                            let ptr48 = vec48.as_ptr().cast::<u8>();
                                            let len48 = vec48.len();

                                            (0i32, ptr47.cast_mut(), len47, ptr48.cast_mut(), len48)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id49,
                                                template_id: template_id49,
                                            } = e;
                                            let vec50 = worker_id49;
                                            let ptr50 = vec50.as_ptr().cast::<u8>();
                                            let len50 = vec50.len();
                                            let vec51 = template_id49;
                                            let ptr51 = vec51.as_ptr().cast::<u8>();
                                            let len51 = vec51.len();

                                            (1i32, ptr50.cast_mut(), len50, ptr51.cast_mut(), len51)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id52,
                                                template_id: template_id52,
                                            } = e;
                                            let vec53 = worker_id52;
                                            let ptr53 = vec53.as_ptr().cast::<u8>();
                                            let len53 = vec53.len();
                                            let vec54 = template_id52;
                                            let ptr54 = vec54.as_ptr().cast::<u8>();
                                            let len54 = vec54.len();

                                            (2i32, ptr53.cast_mut(), len53, ptr54.cast_mut(), len54)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id55,
                                                template_id: template_id55,
                                            } = e;
                                            let vec56 = worker_id55;
                                            let ptr56 = vec56.as_ptr().cast::<u8>();
                                            let len56 = vec56.len();
                                            let vec57 = template_id55;
                                            let ptr57 = vec57.as_ptr().cast::<u8>();
                                            let len57 = vec57.len();

                                            (3i32, ptr56.cast_mut(), len56, ptr57.cast_mut(), len57)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id58,
                                                template_id: template_id58,
                                            } = e;
                                            let vec59 = worker_id58;
                                            let ptr59 = vec59.as_ptr().cast::<u8>();
                                            let len59 = vec59.len();
                                            let vec60 = template_id58;
                                            let ptr60 = vec60.as_ptr().cast::<u8>();
                                            let len60 = vec60.len();

                                            (4i32, ptr59.cast_mut(), len59, ptr60.cast_mut(), len60)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id61,
                                                template_id: template_id61,
                                            } = e;
                                            let vec62 = worker_id61;
                                            let ptr62 = vec62.as_ptr().cast::<u8>();
                                            let len62 = vec62.len();
                                            let vec63 = template_id61;
                                            let ptr63 = vec63.as_ptr().cast::<u8>();
                                            let len63 = vec63.len();

                                            (5i32, ptr62.cast_mut(), len62, ptr63.cast_mut(), len63)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id64,
                                                template_id: template_id64,
                                            } = e;
                                            let vec65 = worker_id64;
                                            let ptr65 = vec65.as_ptr().cast::<u8>();
                                            let len65 = vec65.len();
                                            let vec66 = template_id64;
                                            let ptr66 = vec66.as_ptr().cast::<u8>();
                                            let len66 = vec66.len();

                                            (6i32, ptr65.cast_mut(), len65, ptr66.cast_mut(), len66)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id67,
                                                template_id: template_id67,
                                            } = e;
                                            let vec68 = worker_id67;
                                            let ptr68 = vec68.as_ptr().cast::<u8>();
                                            let len68 = vec68.len();
                                            let vec69 = template_id67;
                                            let ptr69 = vec69.as_ptr().cast::<u8>();
                                            let len69 = vec69.len();

                                            (7i32, ptr68.cast_mut(), len68, ptr69.cast_mut(), len69)
                                        }
                                    };

                                (1i32, result70_0, result70_1, result70_2, result70_3, result70_4)
                            }
                        };
                    let ptr72 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:timeline-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-or"]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        result35_0, result35_1, result35_2, result35_3, result35_4, result35_5,
                        result71_0, result71_1, result71_2, result71_3, result71_4, result71_5,
                        ptr72,
                    );
                    let l73 = i32::from(*ptr72.add(0).cast::<u8>());
                    match l73 {
                        0 => {
                            let e = {
                                let l74 = *ptr72.add(4).cast::<*mut u8>();
                                let l75 = *ptr72.add(8).cast::<usize>();
                                let len76 = l75;
                                let bytes76 = _rt::Vec::from_raw_parts(l74.cast(), len76, len76);

                                _rt::string_lift(bytes76)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l77 = *ptr72.add(4).cast::<*mut u8>();
                                let l78 = *ptr72.add(8).cast::<usize>();
                                let len79 = l78;
                                let bytes79 = _rt::Vec::from_raw_parts(l77.cast(), len79, len79);

                                _rt::string_lift(bytes79)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn initialize_not(
                child_worker: &TypedTimelineResultWorker,
            ) -> Result<_rt::String, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let (result35_0, result35_1, result35_2, result35_3, result35_4, result35_5) =
                        match child_worker {
                            TypedTimelineResultWorker::LeafTimeline(e) => {
                                let (result9_0, result9_1, result9_2, result9_3, result9_4) =
                                    match e {
                                        LeafTimelineNode::TlHasExisted(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id0,
                                                template_id: template_id0,
                                            } = e;
                                            let vec1 = worker_id0;
                                            let ptr1 = vec1.as_ptr().cast::<u8>();
                                            let len1 = vec1.len();
                                            let vec2 = template_id0;
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();

                                            (0i32, ptr1.cast_mut(), len1, ptr2.cast_mut(), len2)
                                        }
                                        LeafTimelineNode::TlHasExistedWithin(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id3,
                                                template_id: template_id3,
                                            } = e;
                                            let vec4 = worker_id3;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            let vec5 = template_id3;
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();

                                            (1i32, ptr4.cast_mut(), len4, ptr5.cast_mut(), len5)
                                        }
                                        LeafTimelineNode::TlLatestEventToState(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id6,
                                                template_id: template_id6,
                                            } = e;
                                            let vec7 = worker_id6;
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            let vec8 = template_id6;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();

                                            (2i32, ptr7.cast_mut(), len7, ptr8.cast_mut(), len8)
                                        }
                                    };

                                (0i32, result9_0, result9_1, result9_2, result9_3, result9_4)
                            }
                            TypedTimelineResultWorker::DerivedTimeline(e) => {
                                let (result34_0, result34_1, result34_2, result34_3, result34_4) =
                                    match e {
                                        DerivedTimelineNode::EqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id10,
                                                template_id: template_id10,
                                            } = e;
                                            let vec11 = worker_id10;
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            let vec12 = template_id10;
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();

                                            (0i32, ptr11.cast_mut(), len11, ptr12.cast_mut(), len12)
                                        }
                                        DerivedTimelineNode::GreaterThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id13,
                                                template_id: template_id13,
                                            } = e;
                                            let vec14 = worker_id13;
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            let vec15 = template_id13;
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();

                                            (1i32, ptr14.cast_mut(), len14, ptr15.cast_mut(), len15)
                                        }
                                        DerivedTimelineNode::GreaterThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id16,
                                                template_id: template_id16,
                                            } = e;
                                            let vec17 = worker_id16;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            let vec18 = template_id16;
                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                            let len18 = vec18.len();

                                            (2i32, ptr17.cast_mut(), len17, ptr18.cast_mut(), len18)
                                        }
                                        DerivedTimelineNode::LessThan(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id19,
                                                template_id: template_id19,
                                            } = e;
                                            let vec20 = worker_id19;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            let vec21 = template_id19;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();

                                            (3i32, ptr20.cast_mut(), len20, ptr21.cast_mut(), len21)
                                        }
                                        DerivedTimelineNode::LessThanOrEqualTo(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id22,
                                                template_id: template_id22,
                                            } = e;
                                            let vec23 = worker_id22;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            let vec24 = template_id22;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();

                                            (4i32, ptr23.cast_mut(), len23, ptr24.cast_mut(), len24)
                                        }
                                        DerivedTimelineNode::And(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id25,
                                                template_id: template_id25,
                                            } = e;
                                            let vec26 = worker_id25;
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            let vec27 = template_id25;
                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                            let len27 = vec27.len();

                                            (5i32, ptr26.cast_mut(), len26, ptr27.cast_mut(), len27)
                                        }
                                        DerivedTimelineNode::Or(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id28,
                                                template_id: template_id28,
                                            } = e;
                                            let vec29 = worker_id28;
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            let vec30 = template_id28;
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();

                                            (6i32, ptr29.cast_mut(), len29, ptr30.cast_mut(), len30)
                                        }
                                        DerivedTimelineNode::Not(e) => {
                                            let TimelineResultWorker {
                                                worker_id: worker_id31,
                                                template_id: template_id31,
                                            } = e;
                                            let vec32 = worker_id31;
                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                            let len32 = vec32.len();
                                            let vec33 = template_id31;
                                            let ptr33 = vec33.as_ptr().cast::<u8>();
                                            let len33 = vec33.len();

                                            (7i32, ptr32.cast_mut(), len32, ptr33.cast_mut(), len33)
                                        }
                                    };

                                (1i32, result34_0, result34_1, result34_2, result34_3, result34_4)
                            }
                        };
                    let ptr36 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:timeline-processor/api")]
                    extern "C" {
                        #[link_name = "initialize-not"]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        result35_0, result35_1, result35_2, result35_3, result35_4, result35_5,
                        ptr36,
                    );
                    let l37 = i32::from(*ptr36.add(0).cast::<u8>());
                    match l37 {
                        0 => {
                            let e = {
                                let l38 = *ptr36.add(4).cast::<*mut u8>();
                                let l39 = *ptr36.add(8).cast::<usize>();
                                let len40 = l39;
                                let bytes40 = _rt::Vec::from_raw_parts(l38.cast(), len40, len40);

                                _rt::string_lift(bytes40)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l41 = *ptr36.add(4).cast::<*mut u8>();
                                let l42 = *ptr36.add(8).cast::<usize>();
                                let len43 = l42;
                                let bytes43 = _rt::Vec::from_raw_parts(l41.cast(), len43, len43);

                                _rt::string_lift(bytes43)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_timeline_result(t1: u64) -> Result<TimelineResult, _rt::String> {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 12]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 12]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "timeline:timeline-processor/api")]
                    extern "C" {
                        #[link_name = "get-timeline-result"]
                        fn wit_import(_: i64, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i64, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(_rt::as_i64(&t1), ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = {
                                let l2 = *ptr0.add(4).cast::<*mut u8>();
                                let l3 = *ptr0.add(8).cast::<usize>();
                                let base15 = l2;
                                let len15 = l3;
                                let mut result15 = _rt::Vec::with_capacity(len15);
                                for i in 0..len15 {
                                    let base = base15.add(i * 40);
                                    let e15 = {
                                        let l4 = *base.add(0).cast::<i64>();
                                        let l5 = i32::from(*base.add(8).cast::<u8>());
                                        let l7 = i32::from(*base.add(24).cast::<u8>());
                                        use super::super::super::timeline::event_processor::api::EventValue as V14;
                                        let v14 = match l7 {
                                            0 => {
                                                let e14 = {
                                                    let l8 = *base.add(32).cast::<*mut u8>();
                                                    let l9 = *base.add(36).cast::<usize>();
                                                    let len10 = l9;
                                                    let bytes10 = _rt::Vec::from_raw_parts(
                                                        l8.cast(),
                                                        len10,
                                                        len10,
                                                    );

                                                    _rt::string_lift(bytes10)
                                                };
                                                V14::StringValue(e14)
                                            }
                                            1 => {
                                                let e14 = {
                                                    let l11 = *base.add(32).cast::<i64>();

                                                    l11
                                                };
                                                V14::IntValue(e14)
                                            }
                                            2 => {
                                                let e14 = {
                                                    let l12 = *base.add(32).cast::<f64>();

                                                    l12
                                                };
                                                V14::FloatValue(e14)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                let e14 = {
                                                    let l13 = i32::from(*base.add(32).cast::<u8>());

                                                    _rt::bool_lift(l13 as u8)
                                                };
                                                V14::BoolValue(e14)
                                            }
                                        };

                                        super::super::super::timeline::event_processor::api::TimelineResultPoint{
                      time_period: super::super::super::timeline::event_processor::api::TimePeriod{
                        t1: l4 as u64,
                        t2: match l5 {
                          0 => None,
                          1 => {
                            let e = {
                              let l6 = *base.add(16).cast::<i64>();

                              l6 as u64
                            };
                            Some(e)
                          }
                          _ => _rt::invalid_enum_discriminant(),
                        },
                      },
                      value: v14,
                    }
                                    };
                                    result15.push(e15);
                                }
                                _rt::cabi_dealloc(base15, len15 * 40, 8);

                                super::super::super::timeline::event_processor::api::TimelineResult{
                  results: result15,
                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l16 = *ptr0.add(4).cast::<*mut u8>();
                                let l17 = *ptr0.add(8).cast::<usize>();
                                let len18 = l17;
                                let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);

                                _rt::string_lift(bytes18)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod timeline {
        #[allow(dead_code)]
        pub mod core {
            #[allow(dead_code, clippy::all)]
            pub mod api {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type EventValue =
                    super::super::super::super::timeline::event_processor::api::EventValue;
                pub type EventPredicate =
                    super::super::super::super::timeline::event_processor::api::EventPredicate;
                pub type TypedTimelineResultWorker = super::super::super::super::timeline::timeline_processor::api::TypedTimelineResultWorker;
                pub type NodeIndex = i32;
                /// A user can provide a prefix to each worker
                /// however it is the engine to decide the exact worker-id which
                /// will be prefixed by worker-id-prefix
                /// In future, we can allow users to simply use prefix
                /// to aggregate workers (to reduce number of workers)
                #[derive(Clone)]
                pub struct Server {
                    pub worker_id_prefix: _rt::String,
                    pub template_id: _rt::String,
                }
                impl ::core::fmt::Debug for Server {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Server")
                            .field("worker-id-prefix", &self.worker_id_prefix)
                            .field("template-id", &self.template_id)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct ServerWithEventColumnName {
                    pub server: Option<Server>,
                    pub event_column_name: _rt::String,
                }
                impl ::core::fmt::Debug for ServerWithEventColumnName {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ServerWithEventColumnName")
                            .field("server", &self.server)
                            .field("event-column-name", &self.event_column_name)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct BiTimelineWithServer {
                    pub server: Option<Server>,
                    pub left: NodeIndex,
                    pub right: NodeIndex,
                }
                impl ::core::fmt::Debug for BiTimelineWithServer {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("BiTimelineWithServer")
                            .field("server", &self.server)
                            .field("left", &self.left)
                            .field("right", &self.right)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct TimelineWithServer {
                    pub server: Option<Server>,
                    pub timeline: NodeIndex,
                }
                impl ::core::fmt::Debug for TimelineWithServer {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("TimelineWithServer")
                            .field("server", &self.server)
                            .field("timeline", &self.timeline)
                            .finish()
                    }
                }
                /// Comparators used to compare a timeline with a constant
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum TimelineConstantComparator {
                    EqualTo,
                    GreaterThan,
                    GreaterThanEqual,
                    LessThan,
                    LessThanEqual,
                }
                impl ::core::fmt::Debug for TimelineConstantComparator {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            TimelineConstantComparator::EqualTo => {
                                f.debug_tuple("TimelineConstantComparator::EqualTo").finish()
                            }
                            TimelineConstantComparator::GreaterThan => {
                                f.debug_tuple("TimelineConstantComparator::GreaterThan").finish()
                            }
                            TimelineConstantComparator::GreaterThanEqual => f
                                .debug_tuple("TimelineConstantComparator::GreaterThanEqual")
                                .finish(),
                            TimelineConstantComparator::LessThan => {
                                f.debug_tuple("TimelineConstantComparator::LessThan").finish()
                            }
                            TimelineConstantComparator::LessThanEqual => {
                                f.debug_tuple("TimelineConstantComparator::LessThanEqual").finish()
                            }
                        }
                    }
                }

                impl TimelineConstantComparator {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> TimelineConstantComparator {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => TimelineConstantComparator::EqualTo,
                            1 => TimelineConstantComparator::GreaterThan,
                            2 => TimelineConstantComparator::GreaterThanEqual,
                            3 => TimelineConstantComparator::LessThan,
                            4 => TimelineConstantComparator::LessThanEqual,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                /// A  timeline-constant-compared corresponds to classic timeline operations
                /// in the paper
                /// A primitive timeline is also maintained in a separate worker/server
                #[derive(Clone)]
                pub struct TimelineConstantCompared {
                    pub op: TimelineConstantComparator,
                    pub timeline: NodeIndex,
                    pub value: EventValue,
                    pub server: Option<Server>,
                }
                impl ::core::fmt::Debug for TimelineConstantCompared {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("TimelineConstantCompared")
                            .field("op", &self.op)
                            .field("timeline", &self.timeline)
                            .field("value", &self.value)
                            .field("server", &self.server)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct TimelineNegated {
                    pub timeline: NodeIndex,
                    pub server: Option<Server>,
                }
                impl ::core::fmt::Debug for TimelineNegated {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("TimelineNegated")
                            .field("timeline", &self.timeline)
                            .field("server", &self.server)
                            .finish()
                    }
                }
                /// A filtered timeline is operation on state dynamic timelines
                /// applied with an event filter
                /// TLHasExistedWithIn(col("userAction" ) == "seek")
                /// seek and col("userAction) is event-predicate
                /// and == is filter-op
                /// A filtered timeline is also maintained in a separate worker/server
                #[derive(Clone)]
                pub struct ServerWithEventPredicate {
                    pub event_predicate: EventPredicate,
                    pub server: Option<Server>,
                }
                impl ::core::fmt::Debug for ServerWithEventPredicate {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ServerWithEventPredicate")
                            .field("event-predicate", &self.event_predicate)
                            .field("server", &self.server)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct ServerWithEventPredicateWithin {
                    pub filtered: ServerWithEventPredicate,
                    pub time: u64,
                }
                impl ::core::fmt::Debug for ServerWithEventPredicateWithin {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ServerWithEventPredicateWithin")
                            .field("filtered", &self.filtered)
                            .field("time", &self.time)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum TimelineNode {
                    TlLatestEventToState(ServerWithEventColumnName),
                    TlHasExisted(ServerWithEventPredicate),
                    TlHasExistedWithin(ServerWithEventPredicateWithin),
                    TimelineComparison(TimelineConstantCompared),
                    TimelineNegation(TimelineNegated),
                    TlDurationWhere(TimelineWithServer),
                    TlDurationInCurState(TimelineWithServer),
                    TlAnd(BiTimelineWithServer),
                    TlOr(BiTimelineWithServer),
                }
                impl ::core::fmt::Debug for TimelineNode {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            TimelineNode::TlLatestEventToState(e) => f
                                .debug_tuple("TimelineNode::TlLatestEventToState")
                                .field(e)
                                .finish(),
                            TimelineNode::TlHasExisted(e) => {
                                f.debug_tuple("TimelineNode::TlHasExisted").field(e).finish()
                            }
                            TimelineNode::TlHasExistedWithin(e) => {
                                f.debug_tuple("TimelineNode::TlHasExistedWithin").field(e).finish()
                            }
                            TimelineNode::TimelineComparison(e) => {
                                f.debug_tuple("TimelineNode::TimelineComparison").field(e).finish()
                            }
                            TimelineNode::TimelineNegation(e) => {
                                f.debug_tuple("TimelineNode::TimelineNegation").field(e).finish()
                            }
                            TimelineNode::TlDurationWhere(e) => {
                                f.debug_tuple("TimelineNode::TlDurationWhere").field(e).finish()
                            }
                            TimelineNode::TlDurationInCurState(e) => f
                                .debug_tuple("TimelineNode::TlDurationInCurState")
                                .field(e)
                                .finish(),
                            TimelineNode::TlAnd(e) => {
                                f.debug_tuple("TimelineNode::TlAnd").field(e).finish()
                            }
                            TimelineNode::TlOr(e) => {
                                f.debug_tuple("TimelineNode::TlOr").field(e).finish()
                            }
                        }
                    }
                }
                #[derive(Clone)]
                pub struct TimelineOp {
                    pub nodes: _rt::Vec<TimelineNode>,
                }
                impl ::core::fmt::Debug for TimelineOp {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("TimelineOp").field("nodes", &self.nodes).finish()
                    }
                }
                #[derive(Clone)]
                pub struct WorkerDetails {
                    pub event_processor_workers: _rt::Vec<TypedTimelineResultWorker>,
                    pub result_worker: TypedTimelineResultWorker,
                }
                impl ::core::fmt::Debug for WorkerDetails {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("WorkerDetails")
                            .field("event-processor-workers", &self.event_processor_workers)
                            .field("result-worker", &self.result_worker)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_initialize_timeline_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base110 = arg0;
                    let len110 = arg1;
                    let mut result110 = _rt::Vec::with_capacity(len110);
                    for i in 0..len110 {
                        let base = base110.add(i * 72);
                        let e110 = {
                            let l0 = i32::from(*base.add(0).cast::<u8>());
                            let v109 = match l0 {
                                0 => {
                                    let e109 = {
                                        let l1 = i32::from(*base.add(8).cast::<u8>());
                                        let l8 = *base.add(28).cast::<*mut u8>();
                                        let l9 = *base.add(32).cast::<usize>();
                                        let len10 = l9;
                                        let bytes10 =
                                            _rt::Vec::from_raw_parts(l8.cast(), len10, len10);

                                        ServerWithEventColumnName {
                                            server: match l1 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l2 = *base.add(12).cast::<*mut u8>();
                                                        let l3 = *base.add(16).cast::<usize>();
                                                        let len4 = l3;
                                                        let bytes4 = _rt::Vec::from_raw_parts(
                                                            l2.cast(),
                                                            len4,
                                                            len4,
                                                        );
                                                        let l5 = *base.add(20).cast::<*mut u8>();
                                                        let l6 = *base.add(24).cast::<usize>();
                                                        let len7 = l6;
                                                        let bytes7 = _rt::Vec::from_raw_parts(
                                                            l5.cast(),
                                                            len7,
                                                            len7,
                                                        );

                                                        Server {
                                                            worker_id_prefix: _rt::string_lift(
                                                                bytes4,
                                                            ),
                                                            template_id: _rt::string_lift(bytes7),
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            event_column_name: _rt::string_lift(bytes10),
                                        }
                                    };
                                    TimelineNode::TlLatestEventToState(e109)
                                }
                                1 => {
                                    let e109 = {
                                        let l11 = *base.add(8).cast::<*mut u8>();
                                        let l12 = *base.add(12).cast::<usize>();
                                        let len13 = l12;
                                        let bytes13 =
                                            _rt::Vec::from_raw_parts(l11.cast(), len13, len13);
                                        let l14 = i32::from(*base.add(16).cast::<u8>());
                                        use super::super::super::super::timeline::event_processor::api::EventValue as V21;
                                        let v21 = match l14 {
                                            0 => {
                                                let e21 = {
                                                    let l15 = *base.add(24).cast::<*mut u8>();
                                                    let l16 = *base.add(28).cast::<usize>();
                                                    let len17 = l16;
                                                    let bytes17 = _rt::Vec::from_raw_parts(
                                                        l15.cast(),
                                                        len17,
                                                        len17,
                                                    );

                                                    _rt::string_lift(bytes17)
                                                };
                                                V21::StringValue(e21)
                                            }
                                            1 => {
                                                let e21 = {
                                                    let l18 = *base.add(24).cast::<i64>();

                                                    l18
                                                };
                                                V21::IntValue(e21)
                                            }
                                            2 => {
                                                let e21 = {
                                                    let l19 = *base.add(24).cast::<f64>();

                                                    l19
                                                };
                                                V21::FloatValue(e21)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                let e21 = {
                                                    let l20 = i32::from(*base.add(24).cast::<u8>());

                                                    _rt::bool_lift(l20 as u8)
                                                };
                                                V21::BoolValue(e21)
                                            }
                                        };
                                        let l22 = i32::from(*base.add(32).cast::<u8>());
                                        let l23 = i32::from(*base.add(40).cast::<u8>());

                                        ServerWithEventPredicate{
                    event_predicate: super::super::super::super::timeline::event_processor::api::EventPredicate{
                      col_name: _rt::string_lift(bytes13),
                      value: v21,
                      op: super::super::super::super::timeline::event_processor::api::EventPredicateOp::_lift(l22 as u8),
                    },
                    server: match l23 {
                      0 => None,
                      1 => {
                        let e = {
                          let l24 = *base.add(44).cast::<*mut u8>();
                          let l25 = *base.add(48).cast::<usize>();
                          let len26 = l25;
                          let bytes26 = _rt::Vec::from_raw_parts(l24.cast(), len26, len26);
                          let l27 = *base.add(52).cast::<*mut u8>();
                          let l28 = *base.add(56).cast::<usize>();
                          let len29 = l28;
                          let bytes29 = _rt::Vec::from_raw_parts(l27.cast(), len29, len29);

                          Server{
                            worker_id_prefix: _rt::string_lift(bytes26),
                            template_id: _rt::string_lift(bytes29),
                          }
                        };
                        Some(e)
                      }
                      _ => _rt::invalid_enum_discriminant(),
                    },
                  }
                                    };
                                    TimelineNode::TlHasExisted(e109)
                                }
                                2 => {
                                    let e109 = {
                                        let l30 = *base.add(8).cast::<*mut u8>();
                                        let l31 = *base.add(12).cast::<usize>();
                                        let len32 = l31;
                                        let bytes32 =
                                            _rt::Vec::from_raw_parts(l30.cast(), len32, len32);
                                        let l33 = i32::from(*base.add(16).cast::<u8>());
                                        use super::super::super::super::timeline::event_processor::api::EventValue as V40;
                                        let v40 = match l33 {
                                            0 => {
                                                let e40 = {
                                                    let l34 = *base.add(24).cast::<*mut u8>();
                                                    let l35 = *base.add(28).cast::<usize>();
                                                    let len36 = l35;
                                                    let bytes36 = _rt::Vec::from_raw_parts(
                                                        l34.cast(),
                                                        len36,
                                                        len36,
                                                    );

                                                    _rt::string_lift(bytes36)
                                                };
                                                V40::StringValue(e40)
                                            }
                                            1 => {
                                                let e40 = {
                                                    let l37 = *base.add(24).cast::<i64>();

                                                    l37
                                                };
                                                V40::IntValue(e40)
                                            }
                                            2 => {
                                                let e40 = {
                                                    let l38 = *base.add(24).cast::<f64>();

                                                    l38
                                                };
                                                V40::FloatValue(e40)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                let e40 = {
                                                    let l39 = i32::from(*base.add(24).cast::<u8>());

                                                    _rt::bool_lift(l39 as u8)
                                                };
                                                V40::BoolValue(e40)
                                            }
                                        };
                                        let l41 = i32::from(*base.add(32).cast::<u8>());
                                        let l42 = i32::from(*base.add(40).cast::<u8>());
                                        let l49 = *base.add(64).cast::<i64>();

                                        ServerWithEventPredicateWithin{
                    filtered: ServerWithEventPredicate{
                      event_predicate: super::super::super::super::timeline::event_processor::api::EventPredicate{
                        col_name: _rt::string_lift(bytes32),
                        value: v40,
                        op: super::super::super::super::timeline::event_processor::api::EventPredicateOp::_lift(l41 as u8),
                      },
                      server: match l42 {
                        0 => None,
                        1 => {
                          let e = {
                            let l43 = *base.add(44).cast::<*mut u8>();
                            let l44 = *base.add(48).cast::<usize>();
                            let len45 = l44;
                            let bytes45 = _rt::Vec::from_raw_parts(l43.cast(), len45, len45);
                            let l46 = *base.add(52).cast::<*mut u8>();
                            let l47 = *base.add(56).cast::<usize>();
                            let len48 = l47;
                            let bytes48 = _rt::Vec::from_raw_parts(l46.cast(), len48, len48);

                            Server{
                              worker_id_prefix: _rt::string_lift(bytes45),
                              template_id: _rt::string_lift(bytes48),
                            }
                          };
                          Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                      },
                    },
                    time: l49 as u64,
                  }
                                    };
                                    TimelineNode::TlHasExistedWithin(e109)
                                }
                                3 => {
                                    let e109 = {
                                        let l50 = i32::from(*base.add(8).cast::<u8>());
                                        let l51 = *base.add(12).cast::<i32>();
                                        let l52 = i32::from(*base.add(16).cast::<u8>());
                                        use super::super::super::super::timeline::event_processor::api::EventValue as V59;
                                        let v59 = match l52 {
                                            0 => {
                                                let e59 = {
                                                    let l53 = *base.add(24).cast::<*mut u8>();
                                                    let l54 = *base.add(28).cast::<usize>();
                                                    let len55 = l54;
                                                    let bytes55 = _rt::Vec::from_raw_parts(
                                                        l53.cast(),
                                                        len55,
                                                        len55,
                                                    );

                                                    _rt::string_lift(bytes55)
                                                };
                                                V59::StringValue(e59)
                                            }
                                            1 => {
                                                let e59 = {
                                                    let l56 = *base.add(24).cast::<i64>();

                                                    l56
                                                };
                                                V59::IntValue(e59)
                                            }
                                            2 => {
                                                let e59 = {
                                                    let l57 = *base.add(24).cast::<f64>();

                                                    l57
                                                };
                                                V59::FloatValue(e59)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                let e59 = {
                                                    let l58 = i32::from(*base.add(24).cast::<u8>());

                                                    _rt::bool_lift(l58 as u8)
                                                };
                                                V59::BoolValue(e59)
                                            }
                                        };
                                        let l60 = i32::from(*base.add(32).cast::<u8>());

                                        TimelineConstantCompared {
                                            op: TimelineConstantComparator::_lift(l50 as u8),
                                            timeline: l51,
                                            value: v59,
                                            server: match l60 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l61 = *base.add(36).cast::<*mut u8>();
                                                        let l62 = *base.add(40).cast::<usize>();
                                                        let len63 = l62;
                                                        let bytes63 = _rt::Vec::from_raw_parts(
                                                            l61.cast(),
                                                            len63,
                                                            len63,
                                                        );
                                                        let l64 = *base.add(44).cast::<*mut u8>();
                                                        let l65 = *base.add(48).cast::<usize>();
                                                        let len66 = l65;
                                                        let bytes66 = _rt::Vec::from_raw_parts(
                                                            l64.cast(),
                                                            len66,
                                                            len66,
                                                        );

                                                        Server {
                                                            worker_id_prefix: _rt::string_lift(
                                                                bytes63,
                                                            ),
                                                            template_id: _rt::string_lift(bytes66),
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    TimelineNode::TimelineComparison(e109)
                                }
                                4 => {
                                    let e109 = {
                                        let l67 = *base.add(8).cast::<i32>();
                                        let l68 = i32::from(*base.add(12).cast::<u8>());

                                        TimelineNegated {
                                            timeline: l67,
                                            server: match l68 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l69 = *base.add(16).cast::<*mut u8>();
                                                        let l70 = *base.add(20).cast::<usize>();
                                                        let len71 = l70;
                                                        let bytes71 = _rt::Vec::from_raw_parts(
                                                            l69.cast(),
                                                            len71,
                                                            len71,
                                                        );
                                                        let l72 = *base.add(24).cast::<*mut u8>();
                                                        let l73 = *base.add(28).cast::<usize>();
                                                        let len74 = l73;
                                                        let bytes74 = _rt::Vec::from_raw_parts(
                                                            l72.cast(),
                                                            len74,
                                                            len74,
                                                        );

                                                        Server {
                                                            worker_id_prefix: _rt::string_lift(
                                                                bytes71,
                                                            ),
                                                            template_id: _rt::string_lift(bytes74),
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        }
                                    };
                                    TimelineNode::TimelineNegation(e109)
                                }
                                5 => {
                                    let e109 = {
                                        let l75 = i32::from(*base.add(8).cast::<u8>());
                                        let l82 = *base.add(28).cast::<i32>();

                                        TimelineWithServer {
                                            server: match l75 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l76 = *base.add(12).cast::<*mut u8>();
                                                        let l77 = *base.add(16).cast::<usize>();
                                                        let len78 = l77;
                                                        let bytes78 = _rt::Vec::from_raw_parts(
                                                            l76.cast(),
                                                            len78,
                                                            len78,
                                                        );
                                                        let l79 = *base.add(20).cast::<*mut u8>();
                                                        let l80 = *base.add(24).cast::<usize>();
                                                        let len81 = l80;
                                                        let bytes81 = _rt::Vec::from_raw_parts(
                                                            l79.cast(),
                                                            len81,
                                                            len81,
                                                        );

                                                        Server {
                                                            worker_id_prefix: _rt::string_lift(
                                                                bytes78,
                                                            ),
                                                            template_id: _rt::string_lift(bytes81),
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            timeline: l82,
                                        }
                                    };
                                    TimelineNode::TlDurationWhere(e109)
                                }
                                6 => {
                                    let e109 = {
                                        let l83 = i32::from(*base.add(8).cast::<u8>());
                                        let l90 = *base.add(28).cast::<i32>();

                                        TimelineWithServer {
                                            server: match l83 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l84 = *base.add(12).cast::<*mut u8>();
                                                        let l85 = *base.add(16).cast::<usize>();
                                                        let len86 = l85;
                                                        let bytes86 = _rt::Vec::from_raw_parts(
                                                            l84.cast(),
                                                            len86,
                                                            len86,
                                                        );
                                                        let l87 = *base.add(20).cast::<*mut u8>();
                                                        let l88 = *base.add(24).cast::<usize>();
                                                        let len89 = l88;
                                                        let bytes89 = _rt::Vec::from_raw_parts(
                                                            l87.cast(),
                                                            len89,
                                                            len89,
                                                        );

                                                        Server {
                                                            worker_id_prefix: _rt::string_lift(
                                                                bytes86,
                                                            ),
                                                            template_id: _rt::string_lift(bytes89),
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            timeline: l90,
                                        }
                                    };
                                    TimelineNode::TlDurationInCurState(e109)
                                }
                                7 => {
                                    let e109 = {
                                        let l91 = i32::from(*base.add(8).cast::<u8>());
                                        let l98 = *base.add(28).cast::<i32>();
                                        let l99 = *base.add(32).cast::<i32>();

                                        BiTimelineWithServer {
                                            server: match l91 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l92 = *base.add(12).cast::<*mut u8>();
                                                        let l93 = *base.add(16).cast::<usize>();
                                                        let len94 = l93;
                                                        let bytes94 = _rt::Vec::from_raw_parts(
                                                            l92.cast(),
                                                            len94,
                                                            len94,
                                                        );
                                                        let l95 = *base.add(20).cast::<*mut u8>();
                                                        let l96 = *base.add(24).cast::<usize>();
                                                        let len97 = l96;
                                                        let bytes97 = _rt::Vec::from_raw_parts(
                                                            l95.cast(),
                                                            len97,
                                                            len97,
                                                        );

                                                        Server {
                                                            worker_id_prefix: _rt::string_lift(
                                                                bytes94,
                                                            ),
                                                            template_id: _rt::string_lift(bytes97),
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            left: l98,
                                            right: l99,
                                        }
                                    };
                                    TimelineNode::TlAnd(e109)
                                }
                                n => {
                                    debug_assert_eq!(n, 8, "invalid enum discriminant");
                                    let e109 = {
                                        let l100 = i32::from(*base.add(8).cast::<u8>());
                                        let l107 = *base.add(28).cast::<i32>();
                                        let l108 = *base.add(32).cast::<i32>();

                                        BiTimelineWithServer {
                                            server: match l100 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l101 = *base.add(12).cast::<*mut u8>();
                                                        let l102 = *base.add(16).cast::<usize>();
                                                        let len103 = l102;
                                                        let bytes103 = _rt::Vec::from_raw_parts(
                                                            l101.cast(),
                                                            len103,
                                                            len103,
                                                        );
                                                        let l104 = *base.add(20).cast::<*mut u8>();
                                                        let l105 = *base.add(24).cast::<usize>();
                                                        let len106 = l105;
                                                        let bytes106 = _rt::Vec::from_raw_parts(
                                                            l104.cast(),
                                                            len106,
                                                            len106,
                                                        );

                                                        Server {
                                                            worker_id_prefix: _rt::string_lift(
                                                                bytes103,
                                                            ),
                                                            template_id: _rt::string_lift(bytes106),
                                                        }
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            left: l107,
                                            right: l108,
                                        }
                                    };
                                    TimelineNode::TlOr(e109)
                                }
                            };

                            v109
                        };
                        result110.push(e110);
                    }
                    _rt::cabi_dealloc(base110, len110 * 72, 8);
                    let result111 = T::initialize_timeline(TimelineOp { nodes: result110 });
                    let ptr112 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result111 {
                        Ok(e) => {
                            *ptr112.add(0).cast::<u8>() = (0i32) as u8;
                            let WorkerDetails {
                                event_processor_workers: event_processor_workers113,
                                result_worker: result_worker113,
                            } = e;
                            let vec150 = event_processor_workers113;
                            let len150 = vec150.len();
                            let layout150 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec150.len() * 24, 4);
                            let result150 = if layout150.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout150).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout150);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec150.into_iter().enumerate() {
                                let base = result150.add(i * 24);
                                {
                                    use super::super::super::super::timeline::timeline_processor::api::TypedTimelineResultWorker as V149;
                                    match e {
                                        V149::LeafTimeline(e) => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                            use super::super::super::super::timeline::timeline_processor::api::LeafTimelineNode as V123;
                                            match e {
                                                V123::TlHasExisted(e) => {
                                                    *base.add(4).cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id114, template_id:template_id114, } = e;
                                                    let vec115 = (worker_id114.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr115 = vec115.as_ptr().cast::<u8>();
                                                    let len115 = vec115.len();
                                                    ::core::mem::forget(vec115);
                                                    *base.add(12).cast::<usize>() = len115;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr115.cast_mut();
                                                    let vec116 = (template_id114.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr116 = vec116.as_ptr().cast::<u8>();
                                                    let len116 = vec116.len();
                                                    ::core::mem::forget(vec116);
                                                    *base.add(20).cast::<usize>() = len116;
                                                    *base.add(16).cast::<*mut u8>() =
                                                        ptr116.cast_mut();
                                                }
                                                V123::TlHasExistedWithin(e) => {
                                                    *base.add(4).cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id117, template_id:template_id117, } = e;
                                                    let vec118 = (worker_id117.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr118 = vec118.as_ptr().cast::<u8>();
                                                    let len118 = vec118.len();
                                                    ::core::mem::forget(vec118);
                                                    *base.add(12).cast::<usize>() = len118;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr118.cast_mut();
                                                    let vec119 = (template_id117.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr119 = vec119.as_ptr().cast::<u8>();
                                                    let len119 = vec119.len();
                                                    ::core::mem::forget(vec119);
                                                    *base.add(20).cast::<usize>() = len119;
                                                    *base.add(16).cast::<*mut u8>() =
                                                        ptr119.cast_mut();
                                                }
                                                V123::TlLatestEventToState(e) => {
                                                    *base.add(4).cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id120, template_id:template_id120, } = e;
                                                    let vec121 = (worker_id120.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr121 = vec121.as_ptr().cast::<u8>();
                                                    let len121 = vec121.len();
                                                    ::core::mem::forget(vec121);
                                                    *base.add(12).cast::<usize>() = len121;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr121.cast_mut();
                                                    let vec122 = (template_id120.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr122 = vec122.as_ptr().cast::<u8>();
                                                    let len122 = vec122.len();
                                                    ::core::mem::forget(vec122);
                                                    *base.add(20).cast::<usize>() = len122;
                                                    *base.add(16).cast::<*mut u8>() =
                                                        ptr122.cast_mut();
                                                }
                                            }
                                        }
                                        V149::DerivedTimeline(e) => {
                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                            use super::super::super::super::timeline::timeline_processor::api::DerivedTimelineNode as V148;
                                            match e {
                                                V148::EqualTo(e) => {
                                                    *base.add(4).cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id124, template_id:template_id124, } = e;
                                                    let vec125 = (worker_id124.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr125 = vec125.as_ptr().cast::<u8>();
                                                    let len125 = vec125.len();
                                                    ::core::mem::forget(vec125);
                                                    *base.add(12).cast::<usize>() = len125;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr125.cast_mut();
                                                    let vec126 = (template_id124.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr126 = vec126.as_ptr().cast::<u8>();
                                                    let len126 = vec126.len();
                                                    ::core::mem::forget(vec126);
                                                    *base.add(20).cast::<usize>() = len126;
                                                    *base.add(16).cast::<*mut u8>() =
                                                        ptr126.cast_mut();
                                                }
                                                V148::GreaterThan(e) => {
                                                    *base.add(4).cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id127, template_id:template_id127, } = e;
                                                    let vec128 = (worker_id127.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr128 = vec128.as_ptr().cast::<u8>();
                                                    let len128 = vec128.len();
                                                    ::core::mem::forget(vec128);
                                                    *base.add(12).cast::<usize>() = len128;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr128.cast_mut();
                                                    let vec129 = (template_id127.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr129 = vec129.as_ptr().cast::<u8>();
                                                    let len129 = vec129.len();
                                                    ::core::mem::forget(vec129);
                                                    *base.add(20).cast::<usize>() = len129;
                                                    *base.add(16).cast::<*mut u8>() =
                                                        ptr129.cast_mut();
                                                }
                                                V148::GreaterThanOrEqualTo(e) => {
                                                    *base.add(4).cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id130, template_id:template_id130, } = e;
                                                    let vec131 = (worker_id130.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr131 = vec131.as_ptr().cast::<u8>();
                                                    let len131 = vec131.len();
                                                    ::core::mem::forget(vec131);
                                                    *base.add(12).cast::<usize>() = len131;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr131.cast_mut();
                                                    let vec132 = (template_id130.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr132 = vec132.as_ptr().cast::<u8>();
                                                    let len132 = vec132.len();
                                                    ::core::mem::forget(vec132);
                                                    *base.add(20).cast::<usize>() = len132;
                                                    *base.add(16).cast::<*mut u8>() =
                                                        ptr132.cast_mut();
                                                }
                                                V148::LessThan(e) => {
                                                    *base.add(4).cast::<u8>() = (3i32) as u8;
                                                    let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id133, template_id:template_id133, } = e;
                                                    let vec134 = (worker_id133.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr134 = vec134.as_ptr().cast::<u8>();
                                                    let len134 = vec134.len();
                                                    ::core::mem::forget(vec134);
                                                    *base.add(12).cast::<usize>() = len134;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr134.cast_mut();
                                                    let vec135 = (template_id133.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr135 = vec135.as_ptr().cast::<u8>();
                                                    let len135 = vec135.len();
                                                    ::core::mem::forget(vec135);
                                                    *base.add(20).cast::<usize>() = len135;
                                                    *base.add(16).cast::<*mut u8>() =
                                                        ptr135.cast_mut();
                                                }
                                                V148::LessThanOrEqualTo(e) => {
                                                    *base.add(4).cast::<u8>() = (4i32) as u8;
                                                    let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id136, template_id:template_id136, } = e;
                                                    let vec137 = (worker_id136.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr137 = vec137.as_ptr().cast::<u8>();
                                                    let len137 = vec137.len();
                                                    ::core::mem::forget(vec137);
                                                    *base.add(12).cast::<usize>() = len137;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr137.cast_mut();
                                                    let vec138 = (template_id136.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr138 = vec138.as_ptr().cast::<u8>();
                                                    let len138 = vec138.len();
                                                    ::core::mem::forget(vec138);
                                                    *base.add(20).cast::<usize>() = len138;
                                                    *base.add(16).cast::<*mut u8>() =
                                                        ptr138.cast_mut();
                                                }
                                                V148::And(e) => {
                                                    *base.add(4).cast::<u8>() = (5i32) as u8;
                                                    let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id139, template_id:template_id139, } = e;
                                                    let vec140 = (worker_id139.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr140 = vec140.as_ptr().cast::<u8>();
                                                    let len140 = vec140.len();
                                                    ::core::mem::forget(vec140);
                                                    *base.add(12).cast::<usize>() = len140;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr140.cast_mut();
                                                    let vec141 = (template_id139.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr141 = vec141.as_ptr().cast::<u8>();
                                                    let len141 = vec141.len();
                                                    ::core::mem::forget(vec141);
                                                    *base.add(20).cast::<usize>() = len141;
                                                    *base.add(16).cast::<*mut u8>() =
                                                        ptr141.cast_mut();
                                                }
                                                V148::Or(e) => {
                                                    *base.add(4).cast::<u8>() = (6i32) as u8;
                                                    let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id142, template_id:template_id142, } = e;
                                                    let vec143 = (worker_id142.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr143 = vec143.as_ptr().cast::<u8>();
                                                    let len143 = vec143.len();
                                                    ::core::mem::forget(vec143);
                                                    *base.add(12).cast::<usize>() = len143;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr143.cast_mut();
                                                    let vec144 = (template_id142.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr144 = vec144.as_ptr().cast::<u8>();
                                                    let len144 = vec144.len();
                                                    ::core::mem::forget(vec144);
                                                    *base.add(20).cast::<usize>() = len144;
                                                    *base.add(16).cast::<*mut u8>() =
                                                        ptr144.cast_mut();
                                                }
                                                V148::Not(e) => {
                                                    *base.add(4).cast::<u8>() = (7i32) as u8;
                                                    let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id145, template_id:template_id145, } = e;
                                                    let vec146 = (worker_id145.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr146 = vec146.as_ptr().cast::<u8>();
                                                    let len146 = vec146.len();
                                                    ::core::mem::forget(vec146);
                                                    *base.add(12).cast::<usize>() = len146;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr146.cast_mut();
                                                    let vec147 = (template_id145.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr147 = vec147.as_ptr().cast::<u8>();
                                                    let len147 = vec147.len();
                                                    ::core::mem::forget(vec147);
                                                    *base.add(20).cast::<usize>() = len147;
                                                    *base.add(16).cast::<*mut u8>() =
                                                        ptr147.cast_mut();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            *ptr112.add(8).cast::<usize>() = len150;
                            *ptr112.add(4).cast::<*mut u8>() = result150;
                            use super::super::super::super::timeline::timeline_processor::api::TypedTimelineResultWorker as V186;
                            match result_worker113 {
                                V186::LeafTimeline(e) => {
                                    *ptr112.add(12).cast::<u8>() = (0i32) as u8;
                                    use super::super::super::super::timeline::timeline_processor::api::LeafTimelineNode as V160;
                                    match e {
                                        V160::TlHasExisted(e) => {
                                            *ptr112.add(16).cast::<u8>() = (0i32) as u8;
                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id151, template_id:template_id151, } = e;
                                            let vec152 =
                                                (worker_id151.into_bytes()).into_boxed_slice();
                                            let ptr152 = vec152.as_ptr().cast::<u8>();
                                            let len152 = vec152.len();
                                            ::core::mem::forget(vec152);
                                            *ptr112.add(24).cast::<usize>() = len152;
                                            *ptr112.add(20).cast::<*mut u8>() = ptr152.cast_mut();
                                            let vec153 =
                                                (template_id151.into_bytes()).into_boxed_slice();
                                            let ptr153 = vec153.as_ptr().cast::<u8>();
                                            let len153 = vec153.len();
                                            ::core::mem::forget(vec153);
                                            *ptr112.add(32).cast::<usize>() = len153;
                                            *ptr112.add(28).cast::<*mut u8>() = ptr153.cast_mut();
                                        }
                                        V160::TlHasExistedWithin(e) => {
                                            *ptr112.add(16).cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id154, template_id:template_id154, } = e;
                                            let vec155 =
                                                (worker_id154.into_bytes()).into_boxed_slice();
                                            let ptr155 = vec155.as_ptr().cast::<u8>();
                                            let len155 = vec155.len();
                                            ::core::mem::forget(vec155);
                                            *ptr112.add(24).cast::<usize>() = len155;
                                            *ptr112.add(20).cast::<*mut u8>() = ptr155.cast_mut();
                                            let vec156 =
                                                (template_id154.into_bytes()).into_boxed_slice();
                                            let ptr156 = vec156.as_ptr().cast::<u8>();
                                            let len156 = vec156.len();
                                            ::core::mem::forget(vec156);
                                            *ptr112.add(32).cast::<usize>() = len156;
                                            *ptr112.add(28).cast::<*mut u8>() = ptr156.cast_mut();
                                        }
                                        V160::TlLatestEventToState(e) => {
                                            *ptr112.add(16).cast::<u8>() = (2i32) as u8;
                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id157, template_id:template_id157, } = e;
                                            let vec158 =
                                                (worker_id157.into_bytes()).into_boxed_slice();
                                            let ptr158 = vec158.as_ptr().cast::<u8>();
                                            let len158 = vec158.len();
                                            ::core::mem::forget(vec158);
                                            *ptr112.add(24).cast::<usize>() = len158;
                                            *ptr112.add(20).cast::<*mut u8>() = ptr158.cast_mut();
                                            let vec159 =
                                                (template_id157.into_bytes()).into_boxed_slice();
                                            let ptr159 = vec159.as_ptr().cast::<u8>();
                                            let len159 = vec159.len();
                                            ::core::mem::forget(vec159);
                                            *ptr112.add(32).cast::<usize>() = len159;
                                            *ptr112.add(28).cast::<*mut u8>() = ptr159.cast_mut();
                                        }
                                    }
                                }
                                V186::DerivedTimeline(e) => {
                                    *ptr112.add(12).cast::<u8>() = (1i32) as u8;
                                    use super::super::super::super::timeline::timeline_processor::api::DerivedTimelineNode as V185;
                                    match e {
                                        V185::EqualTo(e) => {
                                            *ptr112.add(16).cast::<u8>() = (0i32) as u8;
                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id161, template_id:template_id161, } = e;
                                            let vec162 =
                                                (worker_id161.into_bytes()).into_boxed_slice();
                                            let ptr162 = vec162.as_ptr().cast::<u8>();
                                            let len162 = vec162.len();
                                            ::core::mem::forget(vec162);
                                            *ptr112.add(24).cast::<usize>() = len162;
                                            *ptr112.add(20).cast::<*mut u8>() = ptr162.cast_mut();
                                            let vec163 =
                                                (template_id161.into_bytes()).into_boxed_slice();
                                            let ptr163 = vec163.as_ptr().cast::<u8>();
                                            let len163 = vec163.len();
                                            ::core::mem::forget(vec163);
                                            *ptr112.add(32).cast::<usize>() = len163;
                                            *ptr112.add(28).cast::<*mut u8>() = ptr163.cast_mut();
                                        }
                                        V185::GreaterThan(e) => {
                                            *ptr112.add(16).cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id164, template_id:template_id164, } = e;
                                            let vec165 =
                                                (worker_id164.into_bytes()).into_boxed_slice();
                                            let ptr165 = vec165.as_ptr().cast::<u8>();
                                            let len165 = vec165.len();
                                            ::core::mem::forget(vec165);
                                            *ptr112.add(24).cast::<usize>() = len165;
                                            *ptr112.add(20).cast::<*mut u8>() = ptr165.cast_mut();
                                            let vec166 =
                                                (template_id164.into_bytes()).into_boxed_slice();
                                            let ptr166 = vec166.as_ptr().cast::<u8>();
                                            let len166 = vec166.len();
                                            ::core::mem::forget(vec166);
                                            *ptr112.add(32).cast::<usize>() = len166;
                                            *ptr112.add(28).cast::<*mut u8>() = ptr166.cast_mut();
                                        }
                                        V185::GreaterThanOrEqualTo(e) => {
                                            *ptr112.add(16).cast::<u8>() = (2i32) as u8;
                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id167, template_id:template_id167, } = e;
                                            let vec168 =
                                                (worker_id167.into_bytes()).into_boxed_slice();
                                            let ptr168 = vec168.as_ptr().cast::<u8>();
                                            let len168 = vec168.len();
                                            ::core::mem::forget(vec168);
                                            *ptr112.add(24).cast::<usize>() = len168;
                                            *ptr112.add(20).cast::<*mut u8>() = ptr168.cast_mut();
                                            let vec169 =
                                                (template_id167.into_bytes()).into_boxed_slice();
                                            let ptr169 = vec169.as_ptr().cast::<u8>();
                                            let len169 = vec169.len();
                                            ::core::mem::forget(vec169);
                                            *ptr112.add(32).cast::<usize>() = len169;
                                            *ptr112.add(28).cast::<*mut u8>() = ptr169.cast_mut();
                                        }
                                        V185::LessThan(e) => {
                                            *ptr112.add(16).cast::<u8>() = (3i32) as u8;
                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id170, template_id:template_id170, } = e;
                                            let vec171 =
                                                (worker_id170.into_bytes()).into_boxed_slice();
                                            let ptr171 = vec171.as_ptr().cast::<u8>();
                                            let len171 = vec171.len();
                                            ::core::mem::forget(vec171);
                                            *ptr112.add(24).cast::<usize>() = len171;
                                            *ptr112.add(20).cast::<*mut u8>() = ptr171.cast_mut();
                                            let vec172 =
                                                (template_id170.into_bytes()).into_boxed_slice();
                                            let ptr172 = vec172.as_ptr().cast::<u8>();
                                            let len172 = vec172.len();
                                            ::core::mem::forget(vec172);
                                            *ptr112.add(32).cast::<usize>() = len172;
                                            *ptr112.add(28).cast::<*mut u8>() = ptr172.cast_mut();
                                        }
                                        V185::LessThanOrEqualTo(e) => {
                                            *ptr112.add(16).cast::<u8>() = (4i32) as u8;
                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id173, template_id:template_id173, } = e;
                                            let vec174 =
                                                (worker_id173.into_bytes()).into_boxed_slice();
                                            let ptr174 = vec174.as_ptr().cast::<u8>();
                                            let len174 = vec174.len();
                                            ::core::mem::forget(vec174);
                                            *ptr112.add(24).cast::<usize>() = len174;
                                            *ptr112.add(20).cast::<*mut u8>() = ptr174.cast_mut();
                                            let vec175 =
                                                (template_id173.into_bytes()).into_boxed_slice();
                                            let ptr175 = vec175.as_ptr().cast::<u8>();
                                            let len175 = vec175.len();
                                            ::core::mem::forget(vec175);
                                            *ptr112.add(32).cast::<usize>() = len175;
                                            *ptr112.add(28).cast::<*mut u8>() = ptr175.cast_mut();
                                        }
                                        V185::And(e) => {
                                            *ptr112.add(16).cast::<u8>() = (5i32) as u8;
                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id176, template_id:template_id176, } = e;
                                            let vec177 =
                                                (worker_id176.into_bytes()).into_boxed_slice();
                                            let ptr177 = vec177.as_ptr().cast::<u8>();
                                            let len177 = vec177.len();
                                            ::core::mem::forget(vec177);
                                            *ptr112.add(24).cast::<usize>() = len177;
                                            *ptr112.add(20).cast::<*mut u8>() = ptr177.cast_mut();
                                            let vec178 =
                                                (template_id176.into_bytes()).into_boxed_slice();
                                            let ptr178 = vec178.as_ptr().cast::<u8>();
                                            let len178 = vec178.len();
                                            ::core::mem::forget(vec178);
                                            *ptr112.add(32).cast::<usize>() = len178;
                                            *ptr112.add(28).cast::<*mut u8>() = ptr178.cast_mut();
                                        }
                                        V185::Or(e) => {
                                            *ptr112.add(16).cast::<u8>() = (6i32) as u8;
                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id179, template_id:template_id179, } = e;
                                            let vec180 =
                                                (worker_id179.into_bytes()).into_boxed_slice();
                                            let ptr180 = vec180.as_ptr().cast::<u8>();
                                            let len180 = vec180.len();
                                            ::core::mem::forget(vec180);
                                            *ptr112.add(24).cast::<usize>() = len180;
                                            *ptr112.add(20).cast::<*mut u8>() = ptr180.cast_mut();
                                            let vec181 =
                                                (template_id179.into_bytes()).into_boxed_slice();
                                            let ptr181 = vec181.as_ptr().cast::<u8>();
                                            let len181 = vec181.len();
                                            ::core::mem::forget(vec181);
                                            *ptr112.add(32).cast::<usize>() = len181;
                                            *ptr112.add(28).cast::<*mut u8>() = ptr181.cast_mut();
                                        }
                                        V185::Not(e) => {
                                            *ptr112.add(16).cast::<u8>() = (7i32) as u8;
                                            let super::super::super::super::timeline::timeline_processor::api::TimelineResultWorker{ worker_id:worker_id182, template_id:template_id182, } = e;
                                            let vec183 =
                                                (worker_id182.into_bytes()).into_boxed_slice();
                                            let ptr183 = vec183.as_ptr().cast::<u8>();
                                            let len183 = vec183.len();
                                            ::core::mem::forget(vec183);
                                            *ptr112.add(24).cast::<usize>() = len183;
                                            *ptr112.add(20).cast::<*mut u8>() = ptr183.cast_mut();
                                            let vec184 =
                                                (template_id182.into_bytes()).into_boxed_slice();
                                            let ptr184 = vec184.as_ptr().cast::<u8>();
                                            let len184 = vec184.len();
                                            ::core::mem::forget(vec184);
                                            *ptr112.add(32).cast::<usize>() = len184;
                                            *ptr112.add(28).cast::<*mut u8>() = ptr184.cast_mut();
                                        }
                                    }
                                }
                            }
                        }
                        Err(e) => {
                            *ptr112.add(0).cast::<u8>() = (1i32) as u8;
                            let vec187 = (e.into_bytes()).into_boxed_slice();
                            let ptr187 = vec187.as_ptr().cast::<u8>();
                            let len187 = vec187.len();
                            ::core::mem::forget(vec187);
                            *ptr112.add(8).cast::<usize>() = len187;
                            *ptr112.add(4).cast::<*mut u8>() = ptr187.cast_mut();
                        }
                    };
                    ptr112
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_initialize_timeline<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l48 = *arg0.add(4).cast::<*mut u8>();
                            let l49 = *arg0.add(8).cast::<usize>();
                            let base50 = l48;
                            let len50 = l49;
                            for i in 0..len50 {
                                let base = base50.add(i * 24);
                                {
                                    let l1 = i32::from(*base.add(0).cast::<u8>());
                                    match l1 {
                                        0 => {
                                            let l2 = i32::from(*base.add(4).cast::<u8>());
                                            match l2 {
                                                0 => {
                                                    let l3 = *base.add(8).cast::<*mut u8>();
                                                    let l4 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l3, l4, 1);
                                                    let l5 = *base.add(16).cast::<*mut u8>();
                                                    let l6 = *base.add(20).cast::<usize>();
                                                    _rt::cabi_dealloc(l5, l6, 1);
                                                }
                                                1 => {
                                                    let l7 = *base.add(8).cast::<*mut u8>();
                                                    let l8 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l7, l8, 1);
                                                    let l9 = *base.add(16).cast::<*mut u8>();
                                                    let l10 = *base.add(20).cast::<usize>();
                                                    _rt::cabi_dealloc(l9, l10, 1);
                                                }
                                                _ => {
                                                    let l11 = *base.add(8).cast::<*mut u8>();
                                                    let l12 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l11, l12, 1);
                                                    let l13 = *base.add(16).cast::<*mut u8>();
                                                    let l14 = *base.add(20).cast::<usize>();
                                                    _rt::cabi_dealloc(l13, l14, 1);
                                                }
                                            }
                                        }
                                        _ => {
                                            let l15 = i32::from(*base.add(4).cast::<u8>());
                                            match l15 {
                                                0 => {
                                                    let l16 = *base.add(8).cast::<*mut u8>();
                                                    let l17 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l16, l17, 1);
                                                    let l18 = *base.add(16).cast::<*mut u8>();
                                                    let l19 = *base.add(20).cast::<usize>();
                                                    _rt::cabi_dealloc(l18, l19, 1);
                                                }
                                                1 => {
                                                    let l20 = *base.add(8).cast::<*mut u8>();
                                                    let l21 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l20, l21, 1);
                                                    let l22 = *base.add(16).cast::<*mut u8>();
                                                    let l23 = *base.add(20).cast::<usize>();
                                                    _rt::cabi_dealloc(l22, l23, 1);
                                                }
                                                2 => {
                                                    let l24 = *base.add(8).cast::<*mut u8>();
                                                    let l25 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l24, l25, 1);
                                                    let l26 = *base.add(16).cast::<*mut u8>();
                                                    let l27 = *base.add(20).cast::<usize>();
                                                    _rt::cabi_dealloc(l26, l27, 1);
                                                }
                                                3 => {
                                                    let l28 = *base.add(8).cast::<*mut u8>();
                                                    let l29 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l28, l29, 1);
                                                    let l30 = *base.add(16).cast::<*mut u8>();
                                                    let l31 = *base.add(20).cast::<usize>();
                                                    _rt::cabi_dealloc(l30, l31, 1);
                                                }
                                                4 => {
                                                    let l32 = *base.add(8).cast::<*mut u8>();
                                                    let l33 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l32, l33, 1);
                                                    let l34 = *base.add(16).cast::<*mut u8>();
                                                    let l35 = *base.add(20).cast::<usize>();
                                                    _rt::cabi_dealloc(l34, l35, 1);
                                                }
                                                5 => {
                                                    let l36 = *base.add(8).cast::<*mut u8>();
                                                    let l37 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l36, l37, 1);
                                                    let l38 = *base.add(16).cast::<*mut u8>();
                                                    let l39 = *base.add(20).cast::<usize>();
                                                    _rt::cabi_dealloc(l38, l39, 1);
                                                }
                                                6 => {
                                                    let l40 = *base.add(8).cast::<*mut u8>();
                                                    let l41 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l40, l41, 1);
                                                    let l42 = *base.add(16).cast::<*mut u8>();
                                                    let l43 = *base.add(20).cast::<usize>();
                                                    _rt::cabi_dealloc(l42, l43, 1);
                                                }
                                                _ => {
                                                    let l44 = *base.add(8).cast::<*mut u8>();
                                                    let l45 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l44, l45, 1);
                                                    let l46 = *base.add(16).cast::<*mut u8>();
                                                    let l47 = *base.add(20).cast::<usize>();
                                                    _rt::cabi_dealloc(l46, l47, 1);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base50, len50 * 24, 4);
                            let l51 = i32::from(*arg0.add(12).cast::<u8>());
                            match l51 {
                                0 => {
                                    let l52 = i32::from(*arg0.add(16).cast::<u8>());
                                    match l52 {
                                        0 => {
                                            let l53 = *arg0.add(20).cast::<*mut u8>();
                                            let l54 = *arg0.add(24).cast::<usize>();
                                            _rt::cabi_dealloc(l53, l54, 1);
                                            let l55 = *arg0.add(28).cast::<*mut u8>();
                                            let l56 = *arg0.add(32).cast::<usize>();
                                            _rt::cabi_dealloc(l55, l56, 1);
                                        }
                                        1 => {
                                            let l57 = *arg0.add(20).cast::<*mut u8>();
                                            let l58 = *arg0.add(24).cast::<usize>();
                                            _rt::cabi_dealloc(l57, l58, 1);
                                            let l59 = *arg0.add(28).cast::<*mut u8>();
                                            let l60 = *arg0.add(32).cast::<usize>();
                                            _rt::cabi_dealloc(l59, l60, 1);
                                        }
                                        _ => {
                                            let l61 = *arg0.add(20).cast::<*mut u8>();
                                            let l62 = *arg0.add(24).cast::<usize>();
                                            _rt::cabi_dealloc(l61, l62, 1);
                                            let l63 = *arg0.add(28).cast::<*mut u8>();
                                            let l64 = *arg0.add(32).cast::<usize>();
                                            _rt::cabi_dealloc(l63, l64, 1);
                                        }
                                    }
                                }
                                _ => {
                                    let l65 = i32::from(*arg0.add(16).cast::<u8>());
                                    match l65 {
                                        0 => {
                                            let l66 = *arg0.add(20).cast::<*mut u8>();
                                            let l67 = *arg0.add(24).cast::<usize>();
                                            _rt::cabi_dealloc(l66, l67, 1);
                                            let l68 = *arg0.add(28).cast::<*mut u8>();
                                            let l69 = *arg0.add(32).cast::<usize>();
                                            _rt::cabi_dealloc(l68, l69, 1);
                                        }
                                        1 => {
                                            let l70 = *arg0.add(20).cast::<*mut u8>();
                                            let l71 = *arg0.add(24).cast::<usize>();
                                            _rt::cabi_dealloc(l70, l71, 1);
                                            let l72 = *arg0.add(28).cast::<*mut u8>();
                                            let l73 = *arg0.add(32).cast::<usize>();
                                            _rt::cabi_dealloc(l72, l73, 1);
                                        }
                                        2 => {
                                            let l74 = *arg0.add(20).cast::<*mut u8>();
                                            let l75 = *arg0.add(24).cast::<usize>();
                                            _rt::cabi_dealloc(l74, l75, 1);
                                            let l76 = *arg0.add(28).cast::<*mut u8>();
                                            let l77 = *arg0.add(32).cast::<usize>();
                                            _rt::cabi_dealloc(l76, l77, 1);
                                        }
                                        3 => {
                                            let l78 = *arg0.add(20).cast::<*mut u8>();
                                            let l79 = *arg0.add(24).cast::<usize>();
                                            _rt::cabi_dealloc(l78, l79, 1);
                                            let l80 = *arg0.add(28).cast::<*mut u8>();
                                            let l81 = *arg0.add(32).cast::<usize>();
                                            _rt::cabi_dealloc(l80, l81, 1);
                                        }
                                        4 => {
                                            let l82 = *arg0.add(20).cast::<*mut u8>();
                                            let l83 = *arg0.add(24).cast::<usize>();
                                            _rt::cabi_dealloc(l82, l83, 1);
                                            let l84 = *arg0.add(28).cast::<*mut u8>();
                                            let l85 = *arg0.add(32).cast::<usize>();
                                            _rt::cabi_dealloc(l84, l85, 1);
                                        }
                                        5 => {
                                            let l86 = *arg0.add(20).cast::<*mut u8>();
                                            let l87 = *arg0.add(24).cast::<usize>();
                                            _rt::cabi_dealloc(l86, l87, 1);
                                            let l88 = *arg0.add(28).cast::<*mut u8>();
                                            let l89 = *arg0.add(32).cast::<usize>();
                                            _rt::cabi_dealloc(l88, l89, 1);
                                        }
                                        6 => {
                                            let l90 = *arg0.add(20).cast::<*mut u8>();
                                            let l91 = *arg0.add(24).cast::<usize>();
                                            _rt::cabi_dealloc(l90, l91, 1);
                                            let l92 = *arg0.add(28).cast::<*mut u8>();
                                            let l93 = *arg0.add(32).cast::<usize>();
                                            _rt::cabi_dealloc(l92, l93, 1);
                                        }
                                        _ => {
                                            let l94 = *arg0.add(20).cast::<*mut u8>();
                                            let l95 = *arg0.add(24).cast::<usize>();
                                            _rt::cabi_dealloc(l94, l95, 1);
                                            let l96 = *arg0.add(28).cast::<*mut u8>();
                                            let l97 = *arg0.add(32).cast::<usize>();
                                            _rt::cabi_dealloc(l96, l97, 1);
                                        }
                                    }
                                }
                            }
                        }
                        _ => {
                            let l98 = *arg0.add(4).cast::<*mut u8>();
                            let l99 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l98, l99, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn initialize_timeline(
                        timeline: TimelineOp,
                    ) -> Result<WorkerDetails, _rt::String>;
                }
                #[doc(hidden)]

                macro_rules! __export_timeline_core_api_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "timeline:core/api#initialize-timeline"]
          unsafe extern "C" fn export_initialize_timeline(arg0: *mut u8,arg1: usize,) -> *mut u8 {
            $($path_to_types)*::_export_initialize_timeline_cabi::<$ty>(arg0, arg1)
          }
          #[export_name = "cabi_post_timeline:core/api#initialize-timeline"]
          unsafe extern "C" fn _post_return_initialize_timeline(arg0: *mut u8,) {
            $($path_to_types)*::__post_return_initialize_timeline::<$ty>(arg0)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_timeline_core_api_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 36]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 36]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }

    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }

    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }

    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_core_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::timeline::core::api::__export_timeline_core_api_cabi!($ty with_types_in $($path_to_types_root)*::exports::timeline::core::api);
  )
}
#[doc(inline)]
pub(crate) use __export_core_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:core:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2804] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xf9\x14\x01A\x02\x01\
A\x0b\x01B\x20\x01q\x04\x0cstring-value\x01s\0\x09int-value\x01x\0\x0bfloat-valu\
e\x01u\0\x0abool-value\x01\x7f\0\x04\0\x0bevent-value\x03\0\0\x01o\x02s\x01\x01p\
\x02\x01r\x02\x04timew\x05event\x03\x04\0\x05event\x03\0\x04\x01kw\x01r\x02\x02t\
1w\x02t2\x06\x04\0\x0btime-period\x03\0\x07\x01r\x02\x0btime-period\x08\x05value\
\x01\x04\0\x15timeline-result-point\x03\0\x09\x01p\x0a\x01r\x01\x07results\x0b\x04\
\0\x0ftimeline-result\x03\0\x0c\x01m\x03\x05equal\x0cgreater-than\x09less-than\x04\
\0\x12event-predicate-op\x03\0\x0e\x01r\x03\x08col-names\x05value\x01\x02op\x0f\x04\
\0\x0fevent-predicate\x03\0\x10\x01j\x01s\x01s\x01@\x01\x0eevent-col-names\0\x12\
\x04\0\x1dinitialize-latest-event-state\x01\x13\x01@\x01\x0fevent-predicate\x11\0\
\x12\x04\0\x19initialize-tl-has-existed\x01\x14\x01@\x02\x0fevent-predicate\x11\x04\
timew\0\x12\x04\0\x20initialize-tl-has-existed-within\x01\x15\x01@\x01\x05event\x05\
\0\x12\x04\0\x09add-event\x01\x16\x01j\x01\x0d\x01s\x01@\x01\x02t1w\0\x17\x04\0\x15\
latest-event-to-state\x01\x18\x04\0\x0etl-has-existed\x01\x18\x04\0\x15tl-has-ex\
isted-within\x01\x18\x03\x01\x1ctimeline:event-processor/api\x05\0\x02\x03\0\0\x0b\
event-value\x02\x03\0\0\x0ftimeline-result\x01B\x1b\x02\x03\x02\x01\x01\x04\0\x0b\
event-value\x03\0\0\x02\x03\x02\x01\x02\x04\0\x0ftimeline-result\x03\0\x02\x01r\x02\
\x09worker-ids\x0btemplate-ids\x04\0\x16timeline-result-worker\x03\0\x04\x01q\x03\
\x0etl-has-existed\x01\x05\0\x15tl-has-existed-within\x01\x05\0\x18tl-latest-eve\
nt-to-state\x01\x05\0\x04\0\x12leaf-timeline-node\x03\0\x06\x01q\x08\x08equal-to\
\x01\x05\0\x0cgreater-than\x01\x05\0\x18greater-than-or-equal-to\x01\x05\0\x09le\
ss-than\x01\x05\0\x15less-than-or-equal-to\x01\x05\0\x03and\x01\x05\0\x02or\x01\x05\
\0\x03not\x01\x05\0\x04\0\x15derived-timeline-node\x03\0\x08\x01q\x02\x0dleaf-ti\
meline\x01\x07\0\x10derived-timeline\x01\x09\0\x04\0\x1ctyped-timeline-result-wo\
rker\x03\0\x0a\x01j\x01s\x01s\x01@\x02\x0cchild-worker\x0b\x0bevent-value\x01\0\x0c\
\x04\0\x10initialize-equal\x01\x0d\x04\0\x17initialize-greater-than\x01\x0d\x04\0\
#initialize-greater-than-or-equal-to\x01\x0d\x04\0\x14initialize-less-than\x01\x0d\
\x04\0\x20initialize-less-than-or-equal-to\x01\x0d\x01@\x02\x0dchild-worker1\x0b\
\x0dchild-worker2\x0b\0\x0c\x04\0\x0einitialize-and\x01\x0e\x04\0\x0dinitialize-\
or\x01\x0e\x01@\x01\x0cchild-worker\x0b\0\x0c\x04\0\x0einitialize-not\x01\x0f\x01\
j\x01\x03\x01s\x01@\x01\x02t1w\0\x10\x04\0\x13get-timeline-result\x01\x11\x03\x01\
\x1ftimeline:timeline-processor/api\x05\x03\x02\x03\0\0\x05event\x02\x03\0\0\x0f\
event-predicate\x02\x03\0\x01\x1ctyped-timeline-result-worker\x01B,\x02\x03\x02\x01\
\x01\x04\0\x0bevent-value\x03\0\0\x02\x03\x02\x01\x04\x04\0\x05event\x03\0\x02\x02\
\x03\x02\x01\x05\x04\0\x0fevent-predicate\x03\0\x04\x02\x03\x02\x01\x06\x04\0\x1c\
typed-timeline-result-worker\x03\0\x06\x01z\x04\0\x0anode-index\x03\0\x08\x01r\x02\
\x10worker-id-prefixs\x0btemplate-ids\x04\0\x06server\x03\0\x0a\x01k\x0b\x01r\x02\
\x06server\x0c\x11event-column-names\x04\0\x1dserver-with-event-column-name\x03\0\
\x0d\x01r\x03\x06server\x0c\x04left\x09\x05right\x09\x04\0\x17bi-timeline-with-s\
erver\x03\0\x0f\x01r\x02\x06server\x0c\x08timeline\x09\x04\0\x14timeline-with-se\
rver\x03\0\x11\x01r\x01\x04names\x04\0\x09worker-id\x03\0\x13\x01m\x05\x08equal-\
to\x0cgreater-than\x12greater-than-equal\x09less-than\x0fless-than-equal\x04\0\x1c\
timeline-constant-comparator\x03\0\x15\x01r\x04\x02op\x16\x08timeline\x09\x05val\
ue\x01\x06server\x0c\x04\0\x1atimeline-constant-compared\x03\0\x17\x01r\x02\x08t\
imeline\x09\x06server\x0c\x04\0\x10timeline-negated\x03\0\x19\x01r\x02\x0fevent-\
predicate\x05\x06server\x0c\x04\0\x1bserver-with-event-predicate\x03\0\x1b\x01r\x02\
\x08filtered\x1c\x04timew\x04\0\"server-with-event-predicate-within\x03\0\x1d\x01\
q\x09\x18tl-latest-event-to-state\x01\x0e\0\x0etl-has-existed\x01\x1c\0\x15tl-ha\
s-existed-within\x01\x1e\0\x13timeline-comparison\x01\x18\0\x11timeline-negation\
\x01\x1a\0\x11tl-duration-where\x01\x12\0\x18tl-duration-in-cur-state\x01\x12\0\x06\
tl-and\x01\x10\0\x05tl-or\x01\x10\0\x04\0\x0dtimeline-node\x03\0\x1f\x01p\x20\x01\
r\x01\x05nodes!\x04\0\x0btimeline-op\x03\0\"\x01p\x07\x01r\x01\x05nodes$\x04\0\x17\
event-processor-workers\x03\0%\x01r\x02\x17event-processor-workers$\x0dresult-wo\
rker\x07\x04\0\x0eworker-details\x03\0'\x01j\x01(\x01s\x01@\x01\x08timeline#\0)\x04\
\0\x13initialize-timeline\x01*\x04\x01\x11timeline:core/api\x05\x07\x04\x01\x12t\
imeline:core/core\x04\0\x0b\x0a\x01\0\x04core\x03\0\0\0G\x09producers\x01\x0cpro\
cessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
