// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod timeline {
  pub mod raw_events {
    
    #[allow(clippy::all)]
    pub mod api {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[derive(Clone)]
      pub enum EventValue{
        StringValue(wit_bindgen::rt::string::String),
        IntValue(i64),
        FloatValue(f64),
        BoolValue(bool),
      }
      impl ::core::fmt::Debug for EventValue {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            EventValue::StringValue(e) => {
              f.debug_tuple("EventValue::StringValue").field(e).finish()
            }
            EventValue::IntValue(e) => {
              f.debug_tuple("EventValue::IntValue").field(e).finish()
            }
            EventValue::FloatValue(e) => {
              f.debug_tuple("EventValue::FloatValue").field(e).finish()
            }
            EventValue::BoolValue(e) => {
              f.debug_tuple("EventValue::BoolValue").field(e).finish()
            }
          }
        }
      }
      #[derive(Clone)]
      pub struct Event {
        pub time: u64,
        pub event: EventValue,
      }
      impl ::core::fmt::Debug for Event {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Event").field("time", &self.time).field("event", &self.event).finish()
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn add_event(order: &Event,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let Event{ time:time0, event:event0, } = order;
          let (result2_0,result2_1,result2_2,) = match event0 {
            EventValue::StringValue(e) => {
              let vec1 = e;
              let ptr1 = vec1.as_ptr() as i32;
              let len1 = vec1.len() as i32;
              
              (0i32, i64::from(ptr1), len1)
            },
            EventValue::IntValue(e) => (1i32, wit_bindgen::rt::as_i64(e), 0i32),
            EventValue::FloatValue(e) => (2i32, (wit_bindgen::rt::as_f64(e)).to_bits() as i64, 0i32),
            EventValue::BoolValue(e) => (3i32, i64::from(match e { true => 1, false => 0 }), 0i32),
          };
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "timeline:raw-events/api")]
          extern "C" {
            #[link_name = "add-event"]
            fn wit_import(_: i64, _: i32, _: i64, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i64, _: i32, _: i64, _: i32, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i64(time0), result2_0, result2_1, result2_2);
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn get_event(time: u64,) -> Event{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(8))]
          struct RetArea([u8; 24]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "timeline:raw-events/api")]
          extern "C" {
            #[link_name = "get-event"]
            fn wit_import(_: i64, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i64, _: i32, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i64(time), ptr0);
          let l1 = *((ptr0 + 0) as *const i64);
          let l2 = i32::from(*((ptr0 + 8) as *const u8));
          let v9 = match l2 {
            0 => {
              let e9 = {
                let l3 = *((ptr0 + 16) as *const i32);
                let l4 = *((ptr0 + 20) as *const i32);
                let len5 = l4 as usize;
                let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);
                
                wit_bindgen::rt::string_lift(bytes5)
              };
              EventValue::StringValue(e9)
            }
            1 => {
              let e9 = {
                let l6 = *((ptr0 + 16) as *const i64);
                
                l6
              };
              EventValue::IntValue(e9)
            }
            2 => {
              let e9 = {
                let l7 = *((ptr0 + 16) as *const f64);
                
                l7
              };
              EventValue::FloatValue(e9)
            }
            n => {
              debug_assert_eq!(n, 3, "invalid enum discriminant");
              let e9 = {
                let l8 = i32::from(*((ptr0 + 16) as *const u8));
                
                wit_bindgen::rt::bool_lift(l8 as u8)
              };
              EventValue::BoolValue(e9)
            }
          };
          Event{
            time: l1 as u64,
            event: v9,
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn get_events() -> wit_bindgen::rt::vec::Vec::<Event>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "timeline:raw-events/api")]
          extern "C" {
            #[link_name = "get-events"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *((ptr0 + 0) as *const i32);
          let l2 = *((ptr0 + 4) as *const i32);
          let base12 = l1;
          let len12 = l2;
          let mut result12 = Vec::with_capacity(len12 as usize);
          for i in 0..len12 {
            let base = base12 + i * 24;
            let e12 = {
              let l3 = *((base + 0) as *const i64);
              let l4 = i32::from(*((base + 8) as *const u8));
              let v11 = match l4 {
                0 => {
                  let e11 = {
                    let l5 = *((base + 16) as *const i32);
                    let l6 = *((base + 20) as *const i32);
                    let len7 = l6 as usize;
                    let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                    
                    wit_bindgen::rt::string_lift(bytes7)
                  };
                  EventValue::StringValue(e11)
                }
                1 => {
                  let e11 = {
                    let l8 = *((base + 16) as *const i64);
                    
                    l8
                  };
                  EventValue::IntValue(e11)
                }
                2 => {
                  let e11 = {
                    let l9 = *((base + 16) as *const f64);
                    
                    l9
                  };
                  EventValue::FloatValue(e11)
                }
                n => {
                  debug_assert_eq!(n, 3, "invalid enum discriminant");
                  let e11 = {
                    let l10 = i32::from(*((base + 16) as *const u8));
                    
                    wit_bindgen::rt::bool_lift(l10 as u8)
                  };
                  EventValue::BoolValue(e11)
                }
              };
              
              Event{
                time: l3 as u64,
                event: v11,
              }
            };
            result12.push(e12);
          }
          wit_bindgen::rt::dealloc(base12, (len12 as usize) * 24, 8);
          result12
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod timeline {
    pub mod core {
      
      #[allow(clippy::all)]
      pub mod api {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type EventValue = super::super::super::super::timeline::raw_events::api::EventValue;
        pub type NodeIndex = i32;
        #[repr(u8)]
        #[derive(Clone, Copy, Eq, PartialEq)]
        pub enum TimelinePrimitiveOp {
          GreaterThan,
          GreaterThanEqual,
          LessThan,
          LessThanEqual,
        }
        impl ::core::fmt::Debug for TimelinePrimitiveOp {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              TimelinePrimitiveOp::GreaterThan => {
                f.debug_tuple("TimelinePrimitiveOp::GreaterThan").finish()
              }
              TimelinePrimitiveOp::GreaterThanEqual => {
                f.debug_tuple("TimelinePrimitiveOp::GreaterThanEqual").finish()
              }
              TimelinePrimitiveOp::LessThan => {
                f.debug_tuple("TimelinePrimitiveOp::LessThan").finish()
              }
              TimelinePrimitiveOp::LessThanEqual => {
                f.debug_tuple("TimelinePrimitiveOp::LessThanEqual").finish()
              }
            }
          }
        }
        
        impl TimelinePrimitiveOp{
          pub(crate) unsafe fn _lift(val: u8) -> TimelinePrimitiveOp{
            if !cfg!(debug_assertions) {
              return ::core::mem::transmute(val);
            }
            
            match val {
              0 => TimelinePrimitiveOp::GreaterThan,
              1 => TimelinePrimitiveOp::GreaterThanEqual,
              2 => TimelinePrimitiveOp::LessThan,
              3 => TimelinePrimitiveOp::LessThanEqual,
              
              _ => panic!("invalid enum discriminant"),
            }
          }
        }
        
        #[derive(Clone)]
        pub struct PrimitiveTimeline {
          pub op: TimelinePrimitiveOp,
          pub timeline: NodeIndex,
          pub value: EventValue,
        }
        impl ::core::fmt::Debug for PrimitiveTimeline {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("PrimitiveTimeline").field("op", &self.op).field("timeline", &self.timeline).field("value", &self.value).finish()
          }
        }
        #[repr(u8)]
        #[derive(Clone, Copy, Eq, PartialEq)]
        pub enum FilterOp {
          Equal,
          GreaterThan,
          LessThan,
        }
        impl ::core::fmt::Debug for FilterOp {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              FilterOp::Equal => {
                f.debug_tuple("FilterOp::Equal").finish()
              }
              FilterOp::GreaterThan => {
                f.debug_tuple("FilterOp::GreaterThan").finish()
              }
              FilterOp::LessThan => {
                f.debug_tuple("FilterOp::LessThan").finish()
              }
            }
          }
        }
        
        impl FilterOp{
          pub(crate) unsafe fn _lift(val: u8) -> FilterOp{
            if !cfg!(debug_assertions) {
              return ::core::mem::transmute(val);
            }
            
            match val {
              0 => FilterOp::Equal,
              1 => FilterOp::GreaterThan,
              2 => FilterOp::LessThan,
              
              _ => panic!("invalid enum discriminant"),
            }
          }
        }
        
        #[derive(Clone)]
        pub struct EventColumnPredicateInfo {
          pub col_name: wit_bindgen::rt::string::String,
          pub value: EventValue,
        }
        impl ::core::fmt::Debug for EventColumnPredicateInfo {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("EventColumnPredicateInfo").field("col-name", &self.col_name).field("value", &self.value).finish()
          }
        }
        #[derive(Clone)]
        pub struct FilteredTimeline {
          pub filter: FilterOp,
          pub node: NodeIndex,
          pub event_predicate: EventColumnPredicateInfo,
        }
        impl ::core::fmt::Debug for FilteredTimeline {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("FilteredTimeline").field("filter", &self.filter).field("node", &self.node).field("event-predicate", &self.event_predicate).finish()
          }
        }
        #[derive(Clone)]
        pub struct FilteredTimelineWithin {
          pub filtered: FilteredTimeline,
          pub time: u64,
        }
        impl ::core::fmt::Debug for FilteredTimelineWithin {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("FilteredTimelineWithin").field("filtered", &self.filtered).field("time", &self.time).finish()
          }
        }
        #[derive(Clone)]
        pub enum TimelineNode{
          Leaf(i32),
          Primitive(PrimitiveTimeline),
          NotNode(NodeIndex),
          TlHasExisted(FilteredTimeline),
          TlHasExistedWithin(FilteredTimelineWithin),
          TlDurationWhere(FilteredTimeline),
          TlDurationInCurState(FilteredTimeline),
        }
        impl ::core::fmt::Debug for TimelineNode {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
              TimelineNode::Leaf(e) => {
                f.debug_tuple("TimelineNode::Leaf").field(e).finish()
              }
              TimelineNode::Primitive(e) => {
                f.debug_tuple("TimelineNode::Primitive").field(e).finish()
              }
              TimelineNode::NotNode(e) => {
                f.debug_tuple("TimelineNode::NotNode").field(e).finish()
              }
              TimelineNode::TlHasExisted(e) => {
                f.debug_tuple("TimelineNode::TlHasExisted").field(e).finish()
              }
              TimelineNode::TlHasExistedWithin(e) => {
                f.debug_tuple("TimelineNode::TlHasExistedWithin").field(e).finish()
              }
              TimelineNode::TlDurationWhere(e) => {
                f.debug_tuple("TimelineNode::TlDurationWhere").field(e).finish()
              }
              TimelineNode::TlDurationInCurState(e) => {
                f.debug_tuple("TimelineNode::TlDurationInCurState").field(e).finish()
              }
            }
          }
        }
        #[derive(Clone)]
        pub struct TimelineOp {
          pub nodes: wit_bindgen::rt::vec::Vec::<TimelineNode>,
        }
        impl ::core::fmt::Debug for TimelineOp {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("TimelineOp").field("nodes", &self.nodes).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "timeline:core/api#initialize-timeline"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_initialize_timeline(arg0: i32,arg1: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let base67 = arg0;
            let len67 = arg1;
            let mut result67 = Vec::with_capacity(len67 as usize);
            for i in 0..len67 {
              let base = base67 + i * 48;
              let e67 = {
                let l0 = i32::from(*((base + 0) as *const u8));
                let v66 = match l0 {
                  0 => {
                    let e66 = {
                      let l1 = *((base + 8) as *const i32);
                      
                      l1
                    };
                    TimelineNode::Leaf(e66)
                  }
                  1 => {
                    let e66 = {
                      let l2 = i32::from(*((base + 8) as *const u8));
                      let l3 = *((base + 12) as *const i32);
                      let l4 = i32::from(*((base + 16) as *const u8));
                      use super::super::super::super::timeline::raw_events::api::EventValue as V11;
                      let v11 = match l4 {
                        0 => {
                          let e11 = {
                            let l5 = *((base + 24) as *const i32);
                            let l6 = *((base + 28) as *const i32);
                            let len7 = l6 as usize;
                            let bytes7 = Vec::from_raw_parts(l5 as *mut _, len7, len7);
                            
                            wit_bindgen::rt::string_lift(bytes7)
                          };
                          V11::StringValue(e11)
                        }
                        1 => {
                          let e11 = {
                            let l8 = *((base + 24) as *const i64);
                            
                            l8
                          };
                          V11::IntValue(e11)
                        }
                        2 => {
                          let e11 = {
                            let l9 = *((base + 24) as *const f64);
                            
                            l9
                          };
                          V11::FloatValue(e11)
                        }
                        n => {
                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                          let e11 = {
                            let l10 = i32::from(*((base + 24) as *const u8));
                            
                            wit_bindgen::rt::bool_lift(l10 as u8)
                          };
                          V11::BoolValue(e11)
                        }
                      };
                      
                      PrimitiveTimeline{
                        op: TimelinePrimitiveOp::_lift(l2 as u8),
                        timeline: l3,
                        value: v11,
                      }
                    };
                    TimelineNode::Primitive(e66)
                  }
                  2 => {
                    let e66 = {
                      let l12 = *((base + 8) as *const i32);
                      
                      l12
                    };
                    TimelineNode::NotNode(e66)
                  }
                  3 => {
                    let e66 = {
                      let l13 = i32::from(*((base + 8) as *const u8));
                      let l14 = *((base + 12) as *const i32);
                      let l15 = *((base + 16) as *const i32);
                      let l16 = *((base + 20) as *const i32);
                      let len17 = l16 as usize;
                      let bytes17 = Vec::from_raw_parts(l15 as *mut _, len17, len17);
                      let l18 = i32::from(*((base + 24) as *const u8));
                      use super::super::super::super::timeline::raw_events::api::EventValue as V25;
                      let v25 = match l18 {
                        0 => {
                          let e25 = {
                            let l19 = *((base + 32) as *const i32);
                            let l20 = *((base + 36) as *const i32);
                            let len21 = l20 as usize;
                            let bytes21 = Vec::from_raw_parts(l19 as *mut _, len21, len21);
                            
                            wit_bindgen::rt::string_lift(bytes21)
                          };
                          V25::StringValue(e25)
                        }
                        1 => {
                          let e25 = {
                            let l22 = *((base + 32) as *const i64);
                            
                            l22
                          };
                          V25::IntValue(e25)
                        }
                        2 => {
                          let e25 = {
                            let l23 = *((base + 32) as *const f64);
                            
                            l23
                          };
                          V25::FloatValue(e25)
                        }
                        n => {
                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                          let e25 = {
                            let l24 = i32::from(*((base + 32) as *const u8));
                            
                            wit_bindgen::rt::bool_lift(l24 as u8)
                          };
                          V25::BoolValue(e25)
                        }
                      };
                      
                      FilteredTimeline{
                        filter: FilterOp::_lift(l13 as u8),
                        node: l14,
                        event_predicate: EventColumnPredicateInfo{
                          col_name: wit_bindgen::rt::string_lift(bytes17),
                          value: v25,
                        },
                      }
                    };
                    TimelineNode::TlHasExisted(e66)
                  }
                  4 => {
                    let e66 = {
                      let l26 = i32::from(*((base + 8) as *const u8));
                      let l27 = *((base + 12) as *const i32);
                      let l28 = *((base + 16) as *const i32);
                      let l29 = *((base + 20) as *const i32);
                      let len30 = l29 as usize;
                      let bytes30 = Vec::from_raw_parts(l28 as *mut _, len30, len30);
                      let l31 = i32::from(*((base + 24) as *const u8));
                      use super::super::super::super::timeline::raw_events::api::EventValue as V38;
                      let v38 = match l31 {
                        0 => {
                          let e38 = {
                            let l32 = *((base + 32) as *const i32);
                            let l33 = *((base + 36) as *const i32);
                            let len34 = l33 as usize;
                            let bytes34 = Vec::from_raw_parts(l32 as *mut _, len34, len34);
                            
                            wit_bindgen::rt::string_lift(bytes34)
                          };
                          V38::StringValue(e38)
                        }
                        1 => {
                          let e38 = {
                            let l35 = *((base + 32) as *const i64);
                            
                            l35
                          };
                          V38::IntValue(e38)
                        }
                        2 => {
                          let e38 = {
                            let l36 = *((base + 32) as *const f64);
                            
                            l36
                          };
                          V38::FloatValue(e38)
                        }
                        n => {
                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                          let e38 = {
                            let l37 = i32::from(*((base + 32) as *const u8));
                            
                            wit_bindgen::rt::bool_lift(l37 as u8)
                          };
                          V38::BoolValue(e38)
                        }
                      };
                      let l39 = *((base + 40) as *const i64);
                      
                      FilteredTimelineWithin{
                        filtered: FilteredTimeline{
                          filter: FilterOp::_lift(l26 as u8),
                          node: l27,
                          event_predicate: EventColumnPredicateInfo{
                            col_name: wit_bindgen::rt::string_lift(bytes30),
                            value: v38,
                          },
                        },
                        time: l39 as u64,
                      }
                    };
                    TimelineNode::TlHasExistedWithin(e66)
                  }
                  5 => {
                    let e66 = {
                      let l40 = i32::from(*((base + 8) as *const u8));
                      let l41 = *((base + 12) as *const i32);
                      let l42 = *((base + 16) as *const i32);
                      let l43 = *((base + 20) as *const i32);
                      let len44 = l43 as usize;
                      let bytes44 = Vec::from_raw_parts(l42 as *mut _, len44, len44);
                      let l45 = i32::from(*((base + 24) as *const u8));
                      use super::super::super::super::timeline::raw_events::api::EventValue as V52;
                      let v52 = match l45 {
                        0 => {
                          let e52 = {
                            let l46 = *((base + 32) as *const i32);
                            let l47 = *((base + 36) as *const i32);
                            let len48 = l47 as usize;
                            let bytes48 = Vec::from_raw_parts(l46 as *mut _, len48, len48);
                            
                            wit_bindgen::rt::string_lift(bytes48)
                          };
                          V52::StringValue(e52)
                        }
                        1 => {
                          let e52 = {
                            let l49 = *((base + 32) as *const i64);
                            
                            l49
                          };
                          V52::IntValue(e52)
                        }
                        2 => {
                          let e52 = {
                            let l50 = *((base + 32) as *const f64);
                            
                            l50
                          };
                          V52::FloatValue(e52)
                        }
                        n => {
                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                          let e52 = {
                            let l51 = i32::from(*((base + 32) as *const u8));
                            
                            wit_bindgen::rt::bool_lift(l51 as u8)
                          };
                          V52::BoolValue(e52)
                        }
                      };
                      
                      FilteredTimeline{
                        filter: FilterOp::_lift(l40 as u8),
                        node: l41,
                        event_predicate: EventColumnPredicateInfo{
                          col_name: wit_bindgen::rt::string_lift(bytes44),
                          value: v52,
                        },
                      }
                    };
                    TimelineNode::TlDurationWhere(e66)
                  }
                  n => {
                    debug_assert_eq!(n, 6, "invalid enum discriminant");
                    let e66 = {
                      let l53 = i32::from(*((base + 8) as *const u8));
                      let l54 = *((base + 12) as *const i32);
                      let l55 = *((base + 16) as *const i32);
                      let l56 = *((base + 20) as *const i32);
                      let len57 = l56 as usize;
                      let bytes57 = Vec::from_raw_parts(l55 as *mut _, len57, len57);
                      let l58 = i32::from(*((base + 24) as *const u8));
                      use super::super::super::super::timeline::raw_events::api::EventValue as V65;
                      let v65 = match l58 {
                        0 => {
                          let e65 = {
                            let l59 = *((base + 32) as *const i32);
                            let l60 = *((base + 36) as *const i32);
                            let len61 = l60 as usize;
                            let bytes61 = Vec::from_raw_parts(l59 as *mut _, len61, len61);
                            
                            wit_bindgen::rt::string_lift(bytes61)
                          };
                          V65::StringValue(e65)
                        }
                        1 => {
                          let e65 = {
                            let l62 = *((base + 32) as *const i64);
                            
                            l62
                          };
                          V65::IntValue(e65)
                        }
                        2 => {
                          let e65 = {
                            let l63 = *((base + 32) as *const f64);
                            
                            l63
                          };
                          V65::FloatValue(e65)
                        }
                        n => {
                          debug_assert_eq!(n, 3, "invalid enum discriminant");
                          let e65 = {
                            let l64 = i32::from(*((base + 32) as *const u8));
                            
                            wit_bindgen::rt::bool_lift(l64 as u8)
                          };
                          V65::BoolValue(e65)
                        }
                      };
                      
                      FilteredTimeline{
                        filter: FilterOp::_lift(l53 as u8),
                        node: l54,
                        event_predicate: EventColumnPredicateInfo{
                          col_name: wit_bindgen::rt::string_lift(bytes57),
                          value: v65,
                        },
                      }
                    };
                    TimelineNode::TlDurationInCurState(e66)
                  }
                };
                
                v66
              };
              result67.push(e67);
            }
            wit_bindgen::rt::dealloc(base67, (len67 as usize) * 48, 8);
            <_GuestImpl as Guest>::initialize_timeline(TimelineOp{
              nodes: result67,
            });
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn initialize_timeline(timeline: TimelineOp,);
        }
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:core"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1928] = [3, 0, 4, 99, 111, 114, 101, 0, 97, 115, 109, 13, 0, 1, 0, 7, 207, 6, 1, 65, 6, 1, 66, 4, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 1, 114, 2, 4, 116, 105, 109, 101, 119, 5, 101, 118, 101, 110, 116, 1, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 3, 1, 23, 116, 105, 109, 101, 108, 105, 110, 101, 58, 114, 97, 119, 45, 101, 118, 101, 110, 116, 115, 47, 97, 112, 105, 5, 0, 2, 3, 0, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 2, 3, 0, 0, 5, 101, 118, 101, 110, 116, 1, 66, 27, 2, 3, 2, 1, 1, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 2, 3, 2, 1, 2, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 4, 1, 109, 4, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 18, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 15, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 4, 0, 21, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 105, 109, 105, 116, 105, 118, 101, 45, 111, 112, 3, 0, 6, 1, 114, 3, 2, 111, 112, 7, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 5, 118, 97, 108, 117, 101, 1, 4, 0, 18, 112, 114, 105, 109, 105, 116, 105, 118, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 0, 8, 1, 114, 3, 2, 111, 112, 7, 3, 105, 110, 100, 5, 5, 118, 97, 108, 117, 101, 1, 4, 0, 18, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 105, 109, 105, 116, 105, 118, 101, 3, 0, 10, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 9, 102, 105, 108, 116, 101, 114, 45, 111, 112, 3, 0, 12, 1, 114, 2, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 1, 4, 0, 27, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 3, 0, 14, 1, 114, 3, 6, 102, 105, 108, 116, 101, 114, 13, 4, 110, 111, 100, 101, 5, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 15, 4, 0, 17, 102, 105, 108, 116, 101, 114, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 0, 16, 1, 114, 2, 8, 102, 105, 108, 116, 101, 114, 101, 100, 17, 4, 116, 105, 109, 101, 119, 4, 0, 24, 102, 105, 108, 116, 101, 114, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 105, 110, 3, 0, 18, 1, 113, 7, 4, 108, 101, 97, 102, 1, 122, 0, 9, 112, 114, 105, 109, 105, 116, 105, 118, 101, 1, 9, 0, 8, 110, 111, 116, 45, 110, 111, 100, 101, 1, 5, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 17, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 19, 0, 17, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 119, 104, 101, 114, 101, 1, 17, 0, 24, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 105, 110, 45, 99, 117, 114, 45, 115, 116, 97, 116, 101, 1, 17, 0, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 20, 1, 112, 21, 1, 114, 1, 5, 110, 111, 100, 101, 115, 22, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 23, 1, 64, 1, 8, 116, 105, 109, 101, 108, 105, 110, 101, 24, 1, 0, 4, 0, 19, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 25, 4, 1, 17, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 47, 97, 112, 105, 5, 3, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 179, 7, 1, 65, 2, 1, 65, 6, 1, 66, 11, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 1, 114, 2, 4, 116, 105, 109, 101, 119, 5, 101, 118, 101, 110, 116, 1, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 1, 64, 1, 5, 111, 114, 100, 101, 114, 3, 1, 0, 4, 0, 9, 97, 100, 100, 45, 101, 118, 101, 110, 116, 1, 4, 1, 64, 1, 4, 116, 105, 109, 101, 119, 0, 3, 4, 0, 9, 103, 101, 116, 45, 101, 118, 101, 110, 116, 1, 5, 1, 112, 3, 1, 64, 0, 0, 6, 4, 0, 10, 103, 101, 116, 45, 101, 118, 101, 110, 116, 115, 1, 7, 3, 1, 23, 116, 105, 109, 101, 108, 105, 110, 101, 58, 114, 97, 119, 45, 101, 118, 101, 110, 116, 115, 47, 97, 112, 105, 5, 0, 2, 3, 0, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 2, 3, 0, 0, 5, 101, 118, 101, 110, 116, 1, 66, 27, 2, 3, 2, 1, 1, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 2, 3, 2, 1, 2, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 4, 1, 109, 4, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 18, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 15, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 4, 0, 21, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 105, 109, 105, 116, 105, 118, 101, 45, 111, 112, 3, 0, 6, 1, 114, 3, 2, 111, 112, 7, 8, 116, 105, 109, 101, 108, 105, 110, 101, 5, 5, 118, 97, 108, 117, 101, 1, 4, 0, 18, 112, 114, 105, 109, 105, 116, 105, 118, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 0, 8, 1, 114, 3, 2, 111, 112, 7, 3, 105, 110, 100, 5, 5, 118, 97, 108, 117, 101, 1, 4, 0, 18, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 105, 109, 105, 116, 105, 118, 101, 3, 0, 10, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 9, 102, 105, 108, 116, 101, 114, 45, 111, 112, 3, 0, 12, 1, 114, 2, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 1, 4, 0, 27, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 3, 0, 14, 1, 114, 3, 6, 102, 105, 108, 116, 101, 114, 13, 4, 110, 111, 100, 101, 5, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 15, 4, 0, 17, 102, 105, 108, 116, 101, 114, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 0, 16, 1, 114, 2, 8, 102, 105, 108, 116, 101, 114, 101, 100, 17, 4, 116, 105, 109, 101, 119, 4, 0, 24, 102, 105, 108, 116, 101, 114, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 105, 110, 3, 0, 18, 1, 113, 7, 4, 108, 101, 97, 102, 1, 122, 0, 9, 112, 114, 105, 109, 105, 116, 105, 118, 101, 1, 9, 0, 8, 110, 111, 116, 45, 110, 111, 100, 101, 1, 5, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 17, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 19, 0, 17, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 119, 104, 101, 114, 101, 1, 17, 0, 24, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 105, 110, 45, 99, 117, 114, 45, 115, 116, 97, 116, 101, 1, 17, 0, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 20, 1, 112, 21, 1, 114, 1, 5, 110, 111, 100, 101, 115, 22, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 23, 1, 64, 1, 8, 116, 105, 109, 101, 108, 105, 110, 101, 24, 1, 0, 4, 0, 19, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 25, 4, 1, 17, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 47, 97, 112, 105, 5, 3, 4, 1, 18, 116, 105, 109, 101, 108, 105, 110, 101, 58, 99, 111, 114, 101, 47, 99, 111, 114, 101, 4, 0, 11, 10, 1, 0, 4, 99, 111, 114, 101, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
