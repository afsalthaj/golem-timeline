package timeline:event-processor-stub;

interface stub-event-processor {
  use golem:rpc/types@0.1.0.{uri as golem-rpc-uri};
  use wasi:io/poll@0.2.0.{pollable as wasi-io-pollable};
  use timeline:event-processor/api.{event-value};
  use timeline:event-processor/api.{event};
  use timeline:event-processor/api.{time-period};
  use timeline:event-processor/api.{timeline-result-point};
  use timeline:event-processor/api.{timeline-result};
  use timeline:event-processor/api.{event-predicate-op};
  use timeline:event-processor/api.{event-predicate};

  resource future-initialize-latest-event-state-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<string, string>>;
  }
  resource future-initialize-tl-has-existed-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<string, string>>;
  }
  resource future-initialize-tl-has-existed-within-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<string, string>>;
  }
  resource future-add-event-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<string, string>>;
  }
  resource future-latest-event-to-state-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<timeline-result, string>>;
  }
  resource future-tl-has-existed-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<timeline-result, string>>;
  }
  resource future-tl-has-existed-within-result {
    subscribe: func() -> wasi-io-pollable;
    get: func() -> option<result<timeline-result, string>>;
  }
  resource api {
    constructor(location: golem-rpc-uri);
    blocking-initialize-latest-event-state: func(event-col-name: string) -> result<string, string>;
    initialize-latest-event-state: func(event-col-name: string) -> future-initialize-latest-event-state-result;
    blocking-initialize-tl-has-existed: func(event-predicate: event-predicate) -> result<string, string>;
    initialize-tl-has-existed: func(event-predicate: event-predicate) -> future-initialize-tl-has-existed-result;
    blocking-initialize-tl-has-existed-within: func(event-predicate: event-predicate, time: u64) -> result<string, string>;
    initialize-tl-has-existed-within: func(event-predicate: event-predicate, time: u64) -> future-initialize-tl-has-existed-within-result;
    blocking-add-event: func(event: event) -> result<string, string>;
    add-event: func(event: event) -> future-add-event-result;
    blocking-latest-event-to-state: func(t1: u64) -> result<timeline-result, string>;
    latest-event-to-state: func(t1: u64) -> future-latest-event-to-state-result;
    blocking-tl-has-existed: func(t1: u64) -> result<timeline-result, string>;
    tl-has-existed: func(t1: u64) -> future-tl-has-existed-result;
    blocking-tl-has-existed-within: func(t1: u64) -> result<timeline-result, string>;
    tl-has-existed-within: func(t1: u64) -> future-tl-has-existed-within-result;
  }

}

world wasm-rpc-stub-event-processor {
  export stub-event-processor;
}
