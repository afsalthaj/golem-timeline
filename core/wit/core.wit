package timeline:core;

interface api {
  use timeline:raw-events/api.{event-value, event};

  type node-index = s32;

  record timeline-op {
    nodes: list<timeline-node>,
  }

  variant timeline-node {
    leaf(worker-id),
    primitive(timeline-classic),
    not-node(timeline-classic-not),
    tl-has-existed(timeline-specific),
    tl-has-existed-within(timeline-specific-within),
    tl-duration-where(timeline-specific),
    tl-duration-in-cur-state(timeline-specific)
  }


  record worker-id {
    name: string
  }

  enum timeline-classic-comparator {
    greater-than,
    greater-than-equal,
    less-than,
    less-than-equal,
  }

  /// A  timeline-classic corresponds to classic timeline operations
  // in the paper
  // A primitive timeline is also maintained in a separate worker/server
  record timeline-classic {
    op: timeline-classic-comparator,
    timeline: node-index,
    value: event-value,
    server: worker-id
  }

  record timeline-classic-not {
    timeline: node-index,
    server: worker-id
  }

  // A filtered timeline is operation on state dynamic timelines
  // applied with an event filter
  // TLHasExistedWithIn(col("userAction" ) == "seek")
  // seek and col("userAction) is event-column-predicate-info
  // and == is filter-op
  // A filtered timeline is also maintained in a separate worker/server
  record timeline-specific {
    filter: timeline-specific-comparator,
    node: node-index,
    event-predicate: event-column-predicate-info,
    server: worker-id
  }

  record timeline-specific-within {
    filtered: timeline-specific,
    time: u64,
  }


  enum timeline-specific-comparator{
    equal,
    greater-than,
    less-than,
  }

  record event-column-predicate-info {
    col-name: string,
    value: event-value,
  }

  initialize-timeline: func(timeline: timeline-op) -> ();
}

world core {
  import timeline:raw-events-stub/stub-raw-events;
  export api;
}

