// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod exports {
  pub mod timeline {
    pub mod rawevents {
      
      #[allow(clippy::all)]
      pub mod api {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        #[derive(Clone)]
        pub struct ProductItem {
          pub product_id: wit_bindgen::rt::string::String,
          pub name: wit_bindgen::rt::string::String,
          pub price: f32,
          pub quantity: u32,
        }
        impl ::core::fmt::Debug for ProductItem {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("ProductItem").field("product-id", &self.product_id).field("name", &self.name).field("price", &self.price).field("quantity", &self.quantity).finish()
          }
        }
        #[derive(Clone)]
        pub struct Order {
          pub order_id: wit_bindgen::rt::string::String,
          pub items: wit_bindgen::rt::vec::Vec::<ProductItem>,
          pub total: f32,
          pub timestamp: u64,
        }
        impl ::core::fmt::Debug for Order {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Order").field("order-id", &self.order_id).field("items", &self.items).field("total", &self.total).field("timestamp", &self.timestamp).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "timeline:rawevents/api#add-order"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_order(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: f32,arg5: i64,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            let base9 = arg2;
            let len9 = arg3;
            let mut result9 = Vec::with_capacity(len9 as usize);
            for i in 0..len9 {
              let base = base9 + i * 24;
              let e9 = {
                let l1 = *((base + 0) as *const i32);
                let l2 = *((base + 4) as *const i32);
                let len3 = l2 as usize;
                let bytes3 = Vec::from_raw_parts(l1 as *mut _, len3, len3);
                let l4 = *((base + 8) as *const i32);
                let l5 = *((base + 12) as *const i32);
                let len6 = l5 as usize;
                let bytes6 = Vec::from_raw_parts(l4 as *mut _, len6, len6);
                let l7 = *((base + 16) as *const f32);
                let l8 = *((base + 20) as *const i32);
                
                ProductItem{
                  product_id: wit_bindgen::rt::string_lift(bytes3),
                  name: wit_bindgen::rt::string_lift(bytes6),
                  price: l7,
                  quantity: l8 as u32,
                }
              };
              result9.push(e9);
            }
            wit_bindgen::rt::dealloc(base9, (len9 as usize) * 24, 4);
            <_GuestImpl as Guest>::add_order(Order{
              order_id: wit_bindgen::rt::string_lift(bytes0),
              items: result9,
              total: arg4,
              timestamp: arg5 as u64,
            });
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "timeline:rawevents/api#get-events"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_get_events() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::get_events();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let vec8 = result0;
            let len8 = vec8.len() as i32;
            let layout8 = alloc::Layout::from_size_align_unchecked(vec8.len() * 32, 8);
            let result8 = if layout8.size() != 0
            {
              let ptr = alloc::alloc(layout8);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout8);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec8.into_iter().enumerate() {
              let base = result8 as i32 + (i as i32) * 32;
              {
                let Order{ order_id:order_id2, items:items2, total:total2, timestamp:timestamp2, } = e;
                let vec3 = (order_id2.into_bytes()).into_boxed_slice();
                let ptr3 = vec3.as_ptr() as i32;
                let len3 = vec3.len() as i32;
                ::core::mem::forget(vec3);
                *((base + 4) as *mut i32) = len3;
                *((base + 0) as *mut i32) = ptr3;
                let vec7 = items2;
                let len7 = vec7.len() as i32;
                let layout7 = alloc::Layout::from_size_align_unchecked(vec7.len() * 24, 4);
                let result7 = if layout7.size() != 0
                {
                  let ptr = alloc::alloc(layout7);
                  if ptr.is_null()
                  {
                    alloc::handle_alloc_error(layout7);
                  }
                  ptr
                }else {{
                  ::core::ptr::null_mut()
                }};
                for (i, e) in vec7.into_iter().enumerate() {
                  let base = result7 as i32 + (i as i32) * 24;
                  {
                    let ProductItem{ product_id:product_id4, name:name4, price:price4, quantity:quantity4, } = e;
                    let vec5 = (product_id4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr() as i32;
                    let len5 = vec5.len() as i32;
                    ::core::mem::forget(vec5);
                    *((base + 4) as *mut i32) = len5;
                    *((base + 0) as *mut i32) = ptr5;
                    let vec6 = (name4.into_bytes()).into_boxed_slice();
                    let ptr6 = vec6.as_ptr() as i32;
                    let len6 = vec6.len() as i32;
                    ::core::mem::forget(vec6);
                    *((base + 12) as *mut i32) = len6;
                    *((base + 8) as *mut i32) = ptr6;
                    *((base + 16) as *mut f32) = wit_bindgen::rt::as_f32(price4);
                    *((base + 20) as *mut i32) = wit_bindgen::rt::as_i32(quantity4);
                  }
                }
                *((base + 12) as *mut i32) = len7;
                *((base + 8) as *mut i32) = result7 as i32;
                *((base + 16) as *mut f32) = wit_bindgen::rt::as_f32(total2);
                *((base + 24) as *mut i64) = wit_bindgen::rt::as_i64(timestamp2);
              }
            }
            *((ptr1 + 4) as *mut i32) = len8;
            *((ptr1 + 0) as *mut i32) = result8 as i32;
            ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_timeline:rawevents/api#get-events"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_get_events(arg0: i32,) {
              let l9 = *((arg0 + 0) as *const i32);
              let l10 = *((arg0 + 4) as *const i32);
              let base11 = l9;
              let len11 = l10;
              for i in 0..len11 {
                let base = base11 + i *32;
                {
                  let l0 = *((base + 0) as *const i32);
                  let l1 = *((base + 4) as *const i32);
                  wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
                  let l6 = *((base + 8) as *const i32);
                  let l7 = *((base + 12) as *const i32);
                  let base8 = l6;
                  let len8 = l7;
                  for i in 0..len8 {
                    let base = base8 + i *24;
                    {
                      let l2 = *((base + 0) as *const i32);
                      let l3 = *((base + 4) as *const i32);
                      wit_bindgen::rt::dealloc(l2, (l3) as usize, 1);
                      let l4 = *((base + 8) as *const i32);
                      let l5 = *((base + 12) as *const i32);
                      wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                    }
                  }
                  wit_bindgen::rt::dealloc(base8, (len8 as usize) * 24, 4);
                }
              }
              wit_bindgen::rt::dealloc(base11, (len11 as usize) * 32, 8);
            }
          };
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn add_order(order: Order,);
          fn get_events() -> wit_bindgen::rt::vec::Vec::<Order>;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 8]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:rawevents"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 560] = [3, 0, 9, 114, 97, 119, 101, 118, 101, 110, 116, 115, 0, 97, 115, 109, 13, 0, 1, 0, 7, 190, 1, 1, 65, 2, 1, 66, 10, 1, 114, 4, 10, 112, 114, 111, 100, 117, 99, 116, 45, 105, 100, 115, 4, 110, 97, 109, 101, 115, 5, 112, 114, 105, 99, 101, 118, 8, 113, 117, 97, 110, 116, 105, 116, 121, 121, 4, 0, 12, 112, 114, 111, 100, 117, 99, 116, 45, 105, 116, 101, 109, 3, 0, 0, 1, 112, 1, 1, 114, 4, 8, 111, 114, 100, 101, 114, 45, 105, 100, 115, 5, 105, 116, 101, 109, 115, 2, 5, 116, 111, 116, 97, 108, 118, 9, 116, 105, 109, 101, 115, 116, 97, 109, 112, 119, 4, 0, 5, 111, 114, 100, 101, 114, 3, 0, 3, 1, 64, 1, 5, 111, 114, 100, 101, 114, 4, 1, 0, 4, 0, 9, 97, 100, 100, 45, 111, 114, 100, 101, 114, 1, 5, 1, 112, 4, 1, 64, 0, 0, 6, 4, 0, 10, 103, 101, 116, 45, 101, 118, 101, 110, 116, 115, 1, 7, 4, 1, 22, 116, 105, 109, 101, 108, 105, 110, 101, 58, 114, 97, 119, 101, 118, 101, 110, 116, 115, 47, 97, 112, 105, 5, 0, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 226, 1, 1, 65, 2, 1, 65, 2, 1, 66, 10, 1, 114, 4, 10, 112, 114, 111, 100, 117, 99, 116, 45, 105, 100, 115, 4, 110, 97, 109, 101, 115, 5, 112, 114, 105, 99, 101, 118, 8, 113, 117, 97, 110, 116, 105, 116, 121, 121, 4, 0, 12, 112, 114, 111, 100, 117, 99, 116, 45, 105, 116, 101, 109, 3, 0, 0, 1, 112, 1, 1, 114, 4, 8, 111, 114, 100, 101, 114, 45, 105, 100, 115, 5, 105, 116, 101, 109, 115, 2, 5, 116, 111, 116, 97, 108, 118, 9, 116, 105, 109, 101, 115, 116, 97, 109, 112, 119, 4, 0, 5, 111, 114, 100, 101, 114, 3, 0, 3, 1, 64, 1, 5, 111, 114, 100, 101, 114, 4, 1, 0, 4, 0, 9, 97, 100, 100, 45, 111, 114, 100, 101, 114, 1, 5, 1, 112, 4, 1, 64, 0, 0, 6, 4, 0, 10, 103, 101, 116, 45, 101, 118, 101, 110, 116, 115, 1, 7, 4, 1, 22, 116, 105, 109, 101, 108, 105, 110, 101, 58, 114, 97, 119, 101, 118, 101, 110, 116, 115, 47, 97, 112, 105, 5, 0, 4, 1, 28, 116, 105, 109, 101, 108, 105, 110, 101, 58, 114, 97, 119, 101, 118, 101, 110, 116, 115, 47, 114, 97, 119, 101, 118, 101, 110, 116, 115, 4, 0, 11, 15, 1, 0, 9, 114, 97, 119, 101, 118, 101, 110, 116, 115, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
