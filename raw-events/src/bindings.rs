// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod golem {
  pub mod timeline {
    
    #[allow(clippy::all)]
    pub mod api {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type NodeIndex = i32;
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, PartialEq)]
      pub enum TimelinePrimitiveOp {
        GreaterThan,
        GreaterThanEqual,
        LessThan,
        LessThanEqual,
      }
      impl ::core::fmt::Debug for TimelinePrimitiveOp {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            TimelinePrimitiveOp::GreaterThan => {
              f.debug_tuple("TimelinePrimitiveOp::GreaterThan").finish()
            }
            TimelinePrimitiveOp::GreaterThanEqual => {
              f.debug_tuple("TimelinePrimitiveOp::GreaterThanEqual").finish()
            }
            TimelinePrimitiveOp::LessThan => {
              f.debug_tuple("TimelinePrimitiveOp::LessThan").finish()
            }
            TimelinePrimitiveOp::LessThanEqual => {
              f.debug_tuple("TimelinePrimitiveOp::LessThanEqual").finish()
            }
          }
        }
      }
      
      impl TimelinePrimitiveOp{
        pub(crate) unsafe fn _lift(val: u8) -> TimelinePrimitiveOp{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }
          
          match val {
            0 => TimelinePrimitiveOp::GreaterThan,
            1 => TimelinePrimitiveOp::GreaterThanEqual,
            2 => TimelinePrimitiveOp::LessThan,
            3 => TimelinePrimitiveOp::LessThanEqual,
            
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, PartialEq)]
      pub enum FilterOp {
        Equal,
        GreaterThan,
        LessThan,
      }
      impl ::core::fmt::Debug for FilterOp {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            FilterOp::Equal => {
              f.debug_tuple("FilterOp::Equal").finish()
            }
            FilterOp::GreaterThan => {
              f.debug_tuple("FilterOp::GreaterThan").finish()
            }
            FilterOp::LessThan => {
              f.debug_tuple("FilterOp::LessThan").finish()
            }
          }
        }
      }
      
      impl FilterOp{
        pub(crate) unsafe fn _lift(val: u8) -> FilterOp{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }
          
          match val {
            0 => FilterOp::Equal,
            1 => FilterOp::GreaterThan,
            2 => FilterOp::LessThan,
            
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      #[derive(Clone)]
      pub enum EventValue{
        StringValue(wit_bindgen::rt::string::String),
        IntValue(i64),
        FloatValue(f64),
        BoolValue(bool),
      }
      impl ::core::fmt::Debug for EventValue {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            EventValue::StringValue(e) => {
              f.debug_tuple("EventValue::StringValue").field(e).finish()
            }
            EventValue::IntValue(e) => {
              f.debug_tuple("EventValue::IntValue").field(e).finish()
            }
            EventValue::FloatValue(e) => {
              f.debug_tuple("EventValue::FloatValue").field(e).finish()
            }
            EventValue::BoolValue(e) => {
              f.debug_tuple("EventValue::BoolValue").field(e).finish()
            }
          }
        }
      }
      #[derive(Clone)]
      pub struct PrimitiveTimeline {
        pub op: TimelinePrimitiveOp,
        pub timeline: NodeIndex,
        pub value: EventValue,
      }
      impl ::core::fmt::Debug for PrimitiveTimeline {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("PrimitiveTimeline").field("op", &self.op).field("timeline", &self.timeline).field("value", &self.value).finish()
        }
      }
      #[derive(Clone)]
      pub struct EventColumnPredicateInfo {
        pub col_name: wit_bindgen::rt::string::String,
        pub value: EventValue,
      }
      impl ::core::fmt::Debug for EventColumnPredicateInfo {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("EventColumnPredicateInfo").field("col-name", &self.col_name).field("value", &self.value).finish()
        }
      }
      #[derive(Clone)]
      pub struct FilteredTimeline {
        pub filter: FilterOp,
        pub node: NodeIndex,
        pub event_predicate: EventColumnPredicateInfo,
      }
      impl ::core::fmt::Debug for FilteredTimeline {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("FilteredTimeline").field("filter", &self.filter).field("node", &self.node).field("event-predicate", &self.event_predicate).finish()
        }
      }
      #[derive(Clone)]
      pub struct FilteredTimelineWithin {
        pub filtered: FilteredTimeline,
        pub time: u64,
      }
      impl ::core::fmt::Debug for FilteredTimelineWithin {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("FilteredTimelineWithin").field("filtered", &self.filtered).field("time", &self.time).finish()
        }
      }
      #[derive(Clone)]
      pub enum TimelineNode{
        Leaf,
        Primitive(PrimitiveTimeline),
        NotNode(NodeIndex),
        TlHasExisted(FilteredTimeline),
        TlHasExistedWithin(FilteredTimelineWithin),
        TlDurationWhere(FilteredTimeline),
        TlDurationInCurState(FilteredTimeline),
      }
      impl ::core::fmt::Debug for TimelineNode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            TimelineNode::Leaf => {
              f.debug_tuple("TimelineNode::Leaf").finish()
            }
            TimelineNode::Primitive(e) => {
              f.debug_tuple("TimelineNode::Primitive").field(e).finish()
            }
            TimelineNode::NotNode(e) => {
              f.debug_tuple("TimelineNode::NotNode").field(e).finish()
            }
            TimelineNode::TlHasExisted(e) => {
              f.debug_tuple("TimelineNode::TlHasExisted").field(e).finish()
            }
            TimelineNode::TlHasExistedWithin(e) => {
              f.debug_tuple("TimelineNode::TlHasExistedWithin").field(e).finish()
            }
            TimelineNode::TlDurationWhere(e) => {
              f.debug_tuple("TimelineNode::TlDurationWhere").field(e).finish()
            }
            TimelineNode::TlDurationInCurState(e) => {
              f.debug_tuple("TimelineNode::TlDurationInCurState").field(e).finish()
            }
          }
        }
      }
      #[derive(Clone)]
      pub struct TimelineOp {
        pub nodes: wit_bindgen::rt::vec::Vec::<TimelineNode>,
      }
      impl ::core::fmt::Debug for TimelineOp {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("TimelineOp").field("nodes", &self.nodes).finish()
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn get_timelines() -> wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::string::String>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "golem:timeline/api")]
          extern "C" {
            #[link_name = "get-timelines"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *((ptr0 + 0) as *const i32);
          let l2 = *((ptr0 + 4) as *const i32);
          let base6 = l1;
          let len6 = l2;
          let mut result6 = Vec::with_capacity(len6 as usize);
          for i in 0..len6 {
            let base = base6 + i * 8;
            let e6 = {
              let l3 = *((base + 0) as *const i32);
              let l4 = *((base + 4) as *const i32);
              let len5 = l4 as usize;
              let bytes5 = Vec::from_raw_parts(l3 as *mut _, len5, len5);
              
              wit_bindgen::rt::string_lift(bytes5)
            };
            result6.push(e6);
          }
          wit_bindgen::rt::dealloc(base6, (len6 as usize) * 8, 4);
          result6
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn initialize_timeline(timeline: &TimelineOp,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let TimelineOp{ nodes:nodes0, } = timeline;
          let vec20 = nodes0;
          let len20 = vec20.len() as i32;
          let layout20 = alloc::Layout::from_size_align_unchecked(vec20.len() * 48, 8);
          let result20 = if layout20.size() != 0
          {
            let ptr = alloc::alloc(layout20);
            if ptr.is_null()
            {
              alloc::handle_alloc_error(layout20);
            }
            ptr
          }else {{
            ::core::ptr::null_mut()
          }};
          for (i, e) in vec20.into_iter().enumerate() {
            let base = result20 as i32 + (i as i32) * 48;
            {
              match e {
                TimelineNode::Leaf=> {
                  {
                    *((base + 0) as *mut u8) = (0i32) as u8;
                  }
                }
                TimelineNode::Primitive(e) => {
                  *((base + 0) as *mut u8) = (1i32) as u8;
                  let PrimitiveTimeline{ op:op1, timeline:timeline1, value:value1, } = e;
                  *((base + 8) as *mut u8) = (op1.clone() as i32) as u8;
                  *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(timeline1);
                  match value1 {
                    EventValue::StringValue(e) => {
                      *((base + 16) as *mut u8) = (0i32) as u8;
                      let vec2 = e;
                      let ptr2 = vec2.as_ptr() as i32;
                      let len2 = vec2.len() as i32;
                      *((base + 28) as *mut i32) = len2;
                      *((base + 24) as *mut i32) = ptr2;
                    },
                    EventValue::IntValue(e) => {
                      *((base + 16) as *mut u8) = (1i32) as u8;
                      *((base + 24) as *mut i64) = wit_bindgen::rt::as_i64(e);
                    },
                    EventValue::FloatValue(e) => {
                      *((base + 16) as *mut u8) = (2i32) as u8;
                      *((base + 24) as *mut f64) = wit_bindgen::rt::as_f64(e);
                    },
                    EventValue::BoolValue(e) => {
                      *((base + 16) as *mut u8) = (3i32) as u8;
                      *((base + 24) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                    },
                  }
                },
                TimelineNode::NotNode(e) => {
                  *((base + 0) as *mut u8) = (2i32) as u8;
                  *((base + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                },
                TimelineNode::TlHasExisted(e) => {
                  *((base + 0) as *mut u8) = (3i32) as u8;
                  let FilteredTimeline{ filter:filter3, node:node3, event_predicate:event_predicate3, } = e;
                  *((base + 8) as *mut u8) = (filter3.clone() as i32) as u8;
                  *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(node3);
                  let EventColumnPredicateInfo{ col_name:col_name4, value:value4, } = event_predicate3;
                  let vec5 = col_name4;
                  let ptr5 = vec5.as_ptr() as i32;
                  let len5 = vec5.len() as i32;
                  *((base + 20) as *mut i32) = len5;
                  *((base + 16) as *mut i32) = ptr5;
                  match value4 {
                    EventValue::StringValue(e) => {
                      *((base + 24) as *mut u8) = (0i32) as u8;
                      let vec6 = e;
                      let ptr6 = vec6.as_ptr() as i32;
                      let len6 = vec6.len() as i32;
                      *((base + 36) as *mut i32) = len6;
                      *((base + 32) as *mut i32) = ptr6;
                    },
                    EventValue::IntValue(e) => {
                      *((base + 24) as *mut u8) = (1i32) as u8;
                      *((base + 32) as *mut i64) = wit_bindgen::rt::as_i64(e);
                    },
                    EventValue::FloatValue(e) => {
                      *((base + 24) as *mut u8) = (2i32) as u8;
                      *((base + 32) as *mut f64) = wit_bindgen::rt::as_f64(e);
                    },
                    EventValue::BoolValue(e) => {
                      *((base + 24) as *mut u8) = (3i32) as u8;
                      *((base + 32) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                    },
                  }
                },
                TimelineNode::TlHasExistedWithin(e) => {
                  *((base + 0) as *mut u8) = (4i32) as u8;
                  let FilteredTimelineWithin{ filtered:filtered7, time:time7, } = e;
                  let FilteredTimeline{ filter:filter8, node:node8, event_predicate:event_predicate8, } = filtered7;
                  *((base + 8) as *mut u8) = (filter8.clone() as i32) as u8;
                  *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(node8);
                  let EventColumnPredicateInfo{ col_name:col_name9, value:value9, } = event_predicate8;
                  let vec10 = col_name9;
                  let ptr10 = vec10.as_ptr() as i32;
                  let len10 = vec10.len() as i32;
                  *((base + 20) as *mut i32) = len10;
                  *((base + 16) as *mut i32) = ptr10;
                  match value9 {
                    EventValue::StringValue(e) => {
                      *((base + 24) as *mut u8) = (0i32) as u8;
                      let vec11 = e;
                      let ptr11 = vec11.as_ptr() as i32;
                      let len11 = vec11.len() as i32;
                      *((base + 36) as *mut i32) = len11;
                      *((base + 32) as *mut i32) = ptr11;
                    },
                    EventValue::IntValue(e) => {
                      *((base + 24) as *mut u8) = (1i32) as u8;
                      *((base + 32) as *mut i64) = wit_bindgen::rt::as_i64(e);
                    },
                    EventValue::FloatValue(e) => {
                      *((base + 24) as *mut u8) = (2i32) as u8;
                      *((base + 32) as *mut f64) = wit_bindgen::rt::as_f64(e);
                    },
                    EventValue::BoolValue(e) => {
                      *((base + 24) as *mut u8) = (3i32) as u8;
                      *((base + 32) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                    },
                  }
                  *((base + 40) as *mut i64) = wit_bindgen::rt::as_i64(time7);
                },
                TimelineNode::TlDurationWhere(e) => {
                  *((base + 0) as *mut u8) = (5i32) as u8;
                  let FilteredTimeline{ filter:filter12, node:node12, event_predicate:event_predicate12, } = e;
                  *((base + 8) as *mut u8) = (filter12.clone() as i32) as u8;
                  *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(node12);
                  let EventColumnPredicateInfo{ col_name:col_name13, value:value13, } = event_predicate12;
                  let vec14 = col_name13;
                  let ptr14 = vec14.as_ptr() as i32;
                  let len14 = vec14.len() as i32;
                  *((base + 20) as *mut i32) = len14;
                  *((base + 16) as *mut i32) = ptr14;
                  match value13 {
                    EventValue::StringValue(e) => {
                      *((base + 24) as *mut u8) = (0i32) as u8;
                      let vec15 = e;
                      let ptr15 = vec15.as_ptr() as i32;
                      let len15 = vec15.len() as i32;
                      *((base + 36) as *mut i32) = len15;
                      *((base + 32) as *mut i32) = ptr15;
                    },
                    EventValue::IntValue(e) => {
                      *((base + 24) as *mut u8) = (1i32) as u8;
                      *((base + 32) as *mut i64) = wit_bindgen::rt::as_i64(e);
                    },
                    EventValue::FloatValue(e) => {
                      *((base + 24) as *mut u8) = (2i32) as u8;
                      *((base + 32) as *mut f64) = wit_bindgen::rt::as_f64(e);
                    },
                    EventValue::BoolValue(e) => {
                      *((base + 24) as *mut u8) = (3i32) as u8;
                      *((base + 32) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                    },
                  }
                },
                TimelineNode::TlDurationInCurState(e) => {
                  *((base + 0) as *mut u8) = (6i32) as u8;
                  let FilteredTimeline{ filter:filter16, node:node16, event_predicate:event_predicate16, } = e;
                  *((base + 8) as *mut u8) = (filter16.clone() as i32) as u8;
                  *((base + 12) as *mut i32) = wit_bindgen::rt::as_i32(node16);
                  let EventColumnPredicateInfo{ col_name:col_name17, value:value17, } = event_predicate16;
                  let vec18 = col_name17;
                  let ptr18 = vec18.as_ptr() as i32;
                  let len18 = vec18.len() as i32;
                  *((base + 20) as *mut i32) = len18;
                  *((base + 16) as *mut i32) = ptr18;
                  match value17 {
                    EventValue::StringValue(e) => {
                      *((base + 24) as *mut u8) = (0i32) as u8;
                      let vec19 = e;
                      let ptr19 = vec19.as_ptr() as i32;
                      let len19 = vec19.len() as i32;
                      *((base + 36) as *mut i32) = len19;
                      *((base + 32) as *mut i32) = ptr19;
                    },
                    EventValue::IntValue(e) => {
                      *((base + 24) as *mut u8) = (1i32) as u8;
                      *((base + 32) as *mut i64) = wit_bindgen::rt::as_i64(e);
                    },
                    EventValue::FloatValue(e) => {
                      *((base + 24) as *mut u8) = (2i32) as u8;
                      *((base + 32) as *mut f64) = wit_bindgen::rt::as_f64(e);
                    },
                    EventValue::BoolValue(e) => {
                      *((base + 24) as *mut u8) = (3i32) as u8;
                      *((base + 32) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                    },
                  }
                },
              }
            }
          }
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "golem:timeline/api")]
          extern "C" {
            #[link_name = "initialize-timeline"]
            fn wit_import(_: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, ){ unreachable!() }
          wit_import(result20 as i32, len20);
          if layout20.size() != 0 {
            alloc::dealloc(result20, layout20);
          }
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod timeline {
    pub mod rawevents {
      
      #[allow(clippy::all)]
      pub mod api {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type EventValue = super::super::super::super::golem::timeline::api::EventValue;
        #[derive(Clone)]
        pub struct Event {
          pub time: u64,
          pub event: EventValue,
        }
        impl ::core::fmt::Debug for Event {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Event").field("time", &self.time).field("event", &self.event).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "timeline:rawevents/api#add-event"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_add_event(arg0: i64,arg1: i32,arg2: i64,arg3: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            use super::super::super::super::golem::timeline::api::EventValue as V1;
            let v1 = match arg1 {
              0 => {
                let e1 = {
                  let len0 = arg3 as usize;
                  let bytes0 = Vec::from_raw_parts(arg2 as i32 as *mut _, len0, len0);
                  
                  wit_bindgen::rt::string_lift(bytes0)
                };
                V1::StringValue(e1)
              }
              1 => {
                let e1 = arg2;
                V1::IntValue(e1)
              }
              2 => {
                let e1 = f64::from_bits(arg2 as u64);
                V1::FloatValue(e1)
              }
              n => {
                debug_assert_eq!(n, 3, "invalid enum discriminant");
                let e1 = wit_bindgen::rt::bool_lift(arg2 as i32 as u8);
                V1::BoolValue(e1)
              }
            };
            <_GuestImpl as Guest>::add_event(Event{
              time: arg0 as u64,
              event: v1,
            });
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "timeline:rawevents/api#get-event"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_get_event(arg0: i64,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::get_event(arg0 as u64);
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let Event{ time:time2, event:event2, } = result0;
            *((ptr1 + 0) as *mut i64) = wit_bindgen::rt::as_i64(time2);
            use super::super::super::super::golem::timeline::api::EventValue as V4;
            match event2 {
              V4::StringValue(e) => {
                *((ptr1 + 8) as *mut u8) = (0i32) as u8;
                let vec3 = (e.into_bytes()).into_boxed_slice();
                let ptr3 = vec3.as_ptr() as i32;
                let len3 = vec3.len() as i32;
                ::core::mem::forget(vec3);
                *((ptr1 + 20) as *mut i32) = len3;
                *((ptr1 + 16) as *mut i32) = ptr3;
              },
              V4::IntValue(e) => {
                *((ptr1 + 8) as *mut u8) = (1i32) as u8;
                *((ptr1 + 16) as *mut i64) = wit_bindgen::rt::as_i64(e);
              },
              V4::FloatValue(e) => {
                *((ptr1 + 8) as *mut u8) = (2i32) as u8;
                *((ptr1 + 16) as *mut f64) = wit_bindgen::rt::as_f64(e);
              },
              V4::BoolValue(e) => {
                *((ptr1 + 8) as *mut u8) = (3i32) as u8;
                *((ptr1 + 16) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
              },
            }
            ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_timeline:rawevents/api#get-event"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_get_event(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 8) as *const u8));
              match l0 {
                0 => {
                  let l1 = *((arg0 + 16) as *const i32);
                  let l2 = *((arg0 + 20) as *const i32);
                  wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                },
                1 => (),
                2 => (),
                _ => (),
              }
            }
          };
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "timeline:rawevents/api#get-events"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_get_events() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::get_events();
            let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
            let vec5 = result0;
            let len5 = vec5.len() as i32;
            let layout5 = alloc::Layout::from_size_align_unchecked(vec5.len() * 24, 8);
            let result5 = if layout5.size() != 0
            {
              let ptr = alloc::alloc(layout5);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout5);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec5.into_iter().enumerate() {
              let base = result5 as i32 + (i as i32) * 24;
              {
                let Event{ time:time2, event:event2, } = e;
                *((base + 0) as *mut i64) = wit_bindgen::rt::as_i64(time2);
                use super::super::super::super::golem::timeline::api::EventValue as V4;
                match event2 {
                  V4::StringValue(e) => {
                    *((base + 8) as *mut u8) = (0i32) as u8;
                    let vec3 = (e.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((base + 20) as *mut i32) = len3;
                    *((base + 16) as *mut i32) = ptr3;
                  },
                  V4::IntValue(e) => {
                    *((base + 8) as *mut u8) = (1i32) as u8;
                    *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(e);
                  },
                  V4::FloatValue(e) => {
                    *((base + 8) as *mut u8) = (2i32) as u8;
                    *((base + 16) as *mut f64) = wit_bindgen::rt::as_f64(e);
                  },
                  V4::BoolValue(e) => {
                    *((base + 8) as *mut u8) = (3i32) as u8;
                    *((base + 16) as *mut u8) = (match e { true => 1, false => 0 }) as u8;
                  },
                }
              }
            }
            *((ptr1 + 4) as *mut i32) = len5;
            *((ptr1 + 0) as *mut i32) = result5 as i32;
            ptr1
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_timeline:rawevents/api#get-events"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_get_events(arg0: i32,) {
              let l3 = *((arg0 + 0) as *const i32);
              let l4 = *((arg0 + 4) as *const i32);
              let base5 = l3;
              let len5 = l4;
              for i in 0..len5 {
                let base = base5 + i *24;
                {
                  let l0 = i32::from(*((base + 8) as *const u8));
                  match l0 {
                    0 => {
                      let l1 = *((base + 16) as *const i32);
                      let l2 = *((base + 20) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                    1 => (),
                    2 => (),
                    _ => (),
                  }
                }
              }
              wit_bindgen::rt::dealloc(base5, (len5 as usize) * 24, 8);
            }
          };
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn add_event(order: Event,);
          fn get_event(time: u64,) -> Event;
          fn get_events() -> wit_bindgen::rt::vec::Vec::<Event>;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(8))]
        struct _RetArea([u8; 24]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 24]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:rawevents"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1955] = [3, 0, 9, 114, 97, 119, 101, 118, 101, 110, 116, 115, 0, 97, 115, 109, 13, 0, 1, 0, 7, 215, 6, 1, 65, 5, 1, 66, 23, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 0, 1, 109, 4, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 18, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 15, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 4, 0, 21, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 105, 109, 105, 116, 105, 118, 101, 45, 111, 112, 3, 0, 2, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 9, 102, 105, 108, 116, 101, 114, 45, 111, 112, 3, 0, 4, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 6, 1, 114, 3, 2, 111, 112, 3, 8, 116, 105, 109, 101, 108, 105, 110, 101, 1, 5, 118, 97, 108, 117, 101, 7, 4, 0, 18, 112, 114, 105, 109, 105, 116, 105, 118, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 0, 8, 1, 114, 3, 2, 111, 112, 3, 3, 105, 110, 100, 1, 5, 118, 97, 108, 117, 101, 7, 4, 0, 18, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 105, 109, 105, 116, 105, 118, 101, 3, 0, 10, 1, 114, 2, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 7, 4, 0, 27, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 3, 0, 12, 1, 114, 3, 6, 102, 105, 108, 116, 101, 114, 5, 4, 110, 111, 100, 101, 1, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 13, 4, 0, 17, 102, 105, 108, 116, 101, 114, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 0, 14, 1, 114, 2, 8, 102, 105, 108, 116, 101, 114, 101, 100, 15, 4, 116, 105, 109, 101, 119, 4, 0, 24, 102, 105, 108, 116, 101, 114, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 105, 110, 3, 0, 16, 1, 113, 7, 4, 108, 101, 97, 102, 0, 0, 9, 112, 114, 105, 109, 105, 116, 105, 118, 101, 1, 9, 0, 8, 110, 111, 116, 45, 110, 111, 100, 101, 1, 1, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 15, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 17, 0, 17, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 119, 104, 101, 114, 101, 1, 15, 0, 24, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 105, 110, 45, 99, 117, 114, 45, 115, 116, 97, 116, 101, 1, 15, 0, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 18, 1, 112, 19, 1, 114, 1, 5, 110, 111, 100, 101, 115, 20, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 21, 3, 1, 18, 103, 111, 108, 101, 109, 58, 116, 105, 109, 101, 108, 105, 110, 101, 47, 97, 112, 105, 5, 0, 2, 3, 0, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 1, 66, 11, 2, 3, 2, 1, 1, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 1, 114, 2, 4, 116, 105, 109, 101, 119, 5, 101, 118, 101, 110, 116, 1, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 1, 64, 1, 5, 111, 114, 100, 101, 114, 3, 1, 0, 4, 0, 9, 97, 100, 100, 45, 101, 118, 101, 110, 116, 1, 4, 1, 64, 1, 4, 116, 105, 109, 101, 119, 0, 3, 4, 0, 9, 103, 101, 116, 45, 101, 118, 101, 110, 116, 1, 5, 1, 112, 3, 1, 64, 0, 0, 6, 4, 0, 10, 103, 101, 116, 45, 101, 118, 101, 110, 116, 115, 1, 7, 4, 1, 22, 116, 105, 109, 101, 108, 105, 110, 101, 58, 114, 97, 119, 101, 118, 101, 110, 116, 115, 47, 97, 112, 105, 5, 2, 11, 9, 1, 0, 3, 97, 112, 105, 3, 0, 0, 7, 188, 7, 1, 65, 2, 1, 65, 5, 1, 66, 28, 1, 122, 4, 0, 10, 110, 111, 100, 101, 45, 105, 110, 100, 101, 120, 3, 0, 0, 1, 109, 4, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 18, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 15, 108, 101, 115, 115, 45, 116, 104, 97, 110, 45, 101, 113, 117, 97, 108, 4, 0, 21, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 105, 109, 105, 116, 105, 118, 101, 45, 111, 112, 3, 0, 2, 1, 109, 3, 5, 101, 113, 117, 97, 108, 12, 103, 114, 101, 97, 116, 101, 114, 45, 116, 104, 97, 110, 9, 108, 101, 115, 115, 45, 116, 104, 97, 110, 4, 0, 9, 102, 105, 108, 116, 101, 114, 45, 111, 112, 3, 0, 4, 1, 113, 4, 12, 115, 116, 114, 105, 110, 103, 45, 118, 97, 108, 117, 101, 1, 115, 0, 9, 105, 110, 116, 45, 118, 97, 108, 117, 101, 1, 120, 0, 11, 102, 108, 111, 97, 116, 45, 118, 97, 108, 117, 101, 1, 117, 0, 10, 98, 111, 111, 108, 45, 118, 97, 108, 117, 101, 1, 127, 0, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 6, 1, 114, 3, 2, 111, 112, 3, 8, 116, 105, 109, 101, 108, 105, 110, 101, 1, 5, 118, 97, 108, 117, 101, 7, 4, 0, 18, 112, 114, 105, 109, 105, 116, 105, 118, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 0, 8, 1, 114, 3, 2, 111, 112, 3, 3, 105, 110, 100, 1, 5, 118, 97, 108, 117, 101, 7, 4, 0, 18, 116, 105, 109, 101, 108, 105, 110, 101, 45, 112, 114, 105, 109, 105, 116, 105, 118, 101, 3, 0, 10, 1, 114, 2, 8, 99, 111, 108, 45, 110, 97, 109, 101, 115, 5, 118, 97, 108, 117, 101, 7, 4, 0, 27, 101, 118, 101, 110, 116, 45, 99, 111, 108, 117, 109, 110, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 45, 105, 110, 102, 111, 3, 0, 12, 1, 114, 3, 6, 102, 105, 108, 116, 101, 114, 5, 4, 110, 111, 100, 101, 1, 15, 101, 118, 101, 110, 116, 45, 112, 114, 101, 100, 105, 99, 97, 116, 101, 13, 4, 0, 17, 102, 105, 108, 116, 101, 114, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 3, 0, 14, 1, 114, 2, 8, 102, 105, 108, 116, 101, 114, 101, 100, 15, 4, 116, 105, 109, 101, 119, 4, 0, 24, 102, 105, 108, 116, 101, 114, 101, 100, 45, 116, 105, 109, 101, 108, 105, 110, 101, 45, 119, 105, 116, 104, 105, 110, 3, 0, 16, 1, 113, 7, 4, 108, 101, 97, 102, 0, 0, 9, 112, 114, 105, 109, 105, 116, 105, 118, 101, 1, 9, 0, 8, 110, 111, 116, 45, 110, 111, 100, 101, 1, 1, 0, 14, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 1, 15, 0, 21, 116, 108, 45, 104, 97, 115, 45, 101, 120, 105, 115, 116, 101, 100, 45, 119, 105, 116, 104, 105, 110, 1, 17, 0, 17, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 119, 104, 101, 114, 101, 1, 15, 0, 24, 116, 108, 45, 100, 117, 114, 97, 116, 105, 111, 110, 45, 105, 110, 45, 99, 117, 114, 45, 115, 116, 97, 116, 101, 1, 15, 0, 4, 0, 13, 116, 105, 109, 101, 108, 105, 110, 101, 45, 110, 111, 100, 101, 3, 0, 18, 1, 112, 19, 1, 114, 1, 5, 110, 111, 100, 101, 115, 20, 4, 0, 11, 116, 105, 109, 101, 108, 105, 110, 101, 45, 111, 112, 3, 0, 21, 1, 112, 115, 1, 64, 0, 0, 23, 4, 0, 13, 103, 101, 116, 45, 116, 105, 109, 101, 108, 105, 110, 101, 115, 1, 24, 1, 64, 1, 8, 116, 105, 109, 101, 108, 105, 110, 101, 22, 1, 0, 4, 0, 19, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 45, 116, 105, 109, 101, 108, 105, 110, 101, 1, 25, 3, 1, 18, 103, 111, 108, 101, 109, 58, 116, 105, 109, 101, 108, 105, 110, 101, 47, 97, 112, 105, 5, 0, 2, 3, 0, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 1, 66, 11, 2, 3, 2, 1, 1, 4, 0, 11, 101, 118, 101, 110, 116, 45, 118, 97, 108, 117, 101, 3, 0, 0, 1, 114, 2, 4, 116, 105, 109, 101, 119, 5, 101, 118, 101, 110, 116, 1, 4, 0, 5, 101, 118, 101, 110, 116, 3, 0, 2, 1, 64, 1, 5, 111, 114, 100, 101, 114, 3, 1, 0, 4, 0, 9, 97, 100, 100, 45, 101, 118, 101, 110, 116, 1, 4, 1, 64, 1, 4, 116, 105, 109, 101, 119, 0, 3, 4, 0, 9, 103, 101, 116, 45, 101, 118, 101, 110, 116, 1, 5, 1, 112, 3, 1, 64, 0, 0, 6, 4, 0, 10, 103, 101, 116, 45, 101, 118, 101, 110, 116, 115, 1, 7, 4, 1, 22, 116, 105, 109, 101, 108, 105, 110, 101, 58, 114, 97, 119, 101, 118, 101, 110, 116, 115, 47, 97, 112, 105, 5, 2, 4, 1, 28, 116, 105, 109, 101, 108, 105, 110, 101, 58, 114, 97, 119, 101, 118, 101, 110, 116, 115, 47, 114, 97, 119, 101, 118, 101, 110, 116, 115, 4, 0, 11, 15, 1, 0, 9, 114, 97, 119, 101, 118, 101, 110, 116, 115, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
